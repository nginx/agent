// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: common.proto

package proto

import (
	fmt "fmt"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	types "github.com/gogo/protobuf/types"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// Metadata timestamped info associating a client with a specific command message
type Metadata struct {
	Timestamp            *types.Timestamp `protobuf:"bytes,1,opt,name=timestamp,proto3" json:"timestamp"`
	ClientId             string           `protobuf:"bytes,2,opt,name=client_id,json=clientId,proto3" json:"client_id"`
	MessageId            string           `protobuf:"bytes,3,opt,name=message_id,json=messageId,proto3" json:"message_id"`
	CloudAccountId       string           `protobuf:"bytes,4,opt,name=cloud_account_id,json=cloudAccountId,proto3" json:"cloud_account_id"`
	XXX_NoUnkeyedLiteral struct{}         `json:"-"`
	XXX_unrecognized     []byte           `json:"-"`
	XXX_sizecache        int32            `json:"-"`
}

func (m *Metadata) Reset()         { *m = Metadata{} }
func (m *Metadata) String() string { return proto.CompactTextString(m) }
func (*Metadata) ProtoMessage()    {}
func (*Metadata) Descriptor() ([]byte, []int) {
	return fileDescriptor_555bd8c177793206, []int{0}
}
func (m *Metadata) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Metadata) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Metadata.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Metadata) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Metadata.Merge(m, src)
}
func (m *Metadata) XXX_Size() int {
	return m.Size()
}
func (m *Metadata) XXX_DiscardUnknown() {
	xxx_messageInfo_Metadata.DiscardUnknown(m)
}

var xxx_messageInfo_Metadata proto.InternalMessageInfo

func (m *Metadata) GetTimestamp() *types.Timestamp {
	if m != nil {
		return m.Timestamp
	}
	return nil
}

func (m *Metadata) GetClientId() string {
	if m != nil {
		return m.ClientId
	}
	return ""
}

func (m *Metadata) GetMessageId() string {
	if m != nil {
		return m.MessageId
	}
	return ""
}

func (m *Metadata) GetCloudAccountId() string {
	if m != nil {
		return m.CloudAccountId
	}
	return ""
}

type DirectoryMap struct {
	Directories          []*Directory `protobuf:"bytes,1,rep,name=directories,proto3" json:"directories,omitempty"`
	XXX_NoUnkeyedLiteral struct{}     `json:"-"`
	XXX_unrecognized     []byte       `json:"-"`
	XXX_sizecache        int32        `json:"-"`
}

func (m *DirectoryMap) Reset()         { *m = DirectoryMap{} }
func (m *DirectoryMap) String() string { return proto.CompactTextString(m) }
func (*DirectoryMap) ProtoMessage()    {}
func (*DirectoryMap) Descriptor() ([]byte, []int) {
	return fileDescriptor_555bd8c177793206, []int{1}
}
func (m *DirectoryMap) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DirectoryMap) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_DirectoryMap.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *DirectoryMap) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DirectoryMap.Merge(m, src)
}
func (m *DirectoryMap) XXX_Size() int {
	return m.Size()
}
func (m *DirectoryMap) XXX_DiscardUnknown() {
	xxx_messageInfo_DirectoryMap.DiscardUnknown(m)
}

var xxx_messageInfo_DirectoryMap proto.InternalMessageInfo

func (m *DirectoryMap) GetDirectories() []*Directory {
	if m != nil {
		return m.Directories
	}
	return nil
}

type File struct {
	Name                 string           `protobuf:"bytes,1,opt,name=name,proto3" json:"name"`
	Lines                int32            `protobuf:"varint,2,opt,name=lines,proto3" json:"lines"`
	Mtime                *types.Timestamp `protobuf:"bytes,3,opt,name=mtime,proto3" json:"mtime"`
	Permissions          string           `protobuf:"bytes,4,opt,name=permissions,proto3" json:"permissions"`
	Size_                int64            `protobuf:"varint,5,opt,name=size,proto3" json:"size"`
	Contents             []byte           `protobuf:"bytes,6,opt,name=contents,proto3" json:"contents"`
	XXX_NoUnkeyedLiteral struct{}         `json:"-"`
	XXX_unrecognized     []byte           `json:"-"`
	XXX_sizecache        int32            `json:"-"`
}

func (m *File) Reset()         { *m = File{} }
func (m *File) String() string { return proto.CompactTextString(m) }
func (*File) ProtoMessage()    {}
func (*File) Descriptor() ([]byte, []int) {
	return fileDescriptor_555bd8c177793206, []int{2}
}
func (m *File) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *File) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_File.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *File) XXX_Merge(src proto.Message) {
	xxx_messageInfo_File.Merge(m, src)
}
func (m *File) XXX_Size() int {
	return m.Size()
}
func (m *File) XXX_DiscardUnknown() {
	xxx_messageInfo_File.DiscardUnknown(m)
}

var xxx_messageInfo_File proto.InternalMessageInfo

func (m *File) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *File) GetLines() int32 {
	if m != nil {
		return m.Lines
	}
	return 0
}

func (m *File) GetMtime() *types.Timestamp {
	if m != nil {
		return m.Mtime
	}
	return nil
}

func (m *File) GetPermissions() string {
	if m != nil {
		return m.Permissions
	}
	return ""
}

func (m *File) GetSize_() int64 {
	if m != nil {
		return m.Size_
	}
	return 0
}

func (m *File) GetContents() []byte {
	if m != nil {
		return m.Contents
	}
	return nil
}

type Directory struct {
	Name                 string           `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Mtime                *types.Timestamp `protobuf:"bytes,2,opt,name=mtime,proto3" json:"mtime,omitempty"`
	Permissions          string           `protobuf:"bytes,3,opt,name=permissions,proto3" json:"permissions,omitempty"`
	Size_                int64            `protobuf:"varint,4,opt,name=size,proto3" json:"size,omitempty"`
	Files                []*File          `protobuf:"bytes,5,rep,name=files,proto3" json:"files,omitempty"`
	XXX_NoUnkeyedLiteral struct{}         `json:"-"`
	XXX_unrecognized     []byte           `json:"-"`
	XXX_sizecache        int32            `json:"-"`
}

func (m *Directory) Reset()         { *m = Directory{} }
func (m *Directory) String() string { return proto.CompactTextString(m) }
func (*Directory) ProtoMessage()    {}
func (*Directory) Descriptor() ([]byte, []int) {
	return fileDescriptor_555bd8c177793206, []int{3}
}
func (m *Directory) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Directory) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Directory.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Directory) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Directory.Merge(m, src)
}
func (m *Directory) XXX_Size() int {
	return m.Size()
}
func (m *Directory) XXX_DiscardUnknown() {
	xxx_messageInfo_Directory.DiscardUnknown(m)
}

var xxx_messageInfo_Directory proto.InternalMessageInfo

func (m *Directory) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *Directory) GetMtime() *types.Timestamp {
	if m != nil {
		return m.Mtime
	}
	return nil
}

func (m *Directory) GetPermissions() string {
	if m != nil {
		return m.Permissions
	}
	return ""
}

func (m *Directory) GetSize_() int64 {
	if m != nil {
		return m.Size_
	}
	return 0
}

func (m *Directory) GetFiles() []*File {
	if m != nil {
		return m.Files
	}
	return nil
}

type SslCertificates struct {
	SslCerts             []*SslCertificate `protobuf:"bytes,1,rep,name=ssl_certs,json=sslCerts,proto3" json:"ssl_certs,omitempty"`
	XXX_NoUnkeyedLiteral struct{}          `json:"-"`
	XXX_unrecognized     []byte            `json:"-"`
	XXX_sizecache        int32             `json:"-"`
}

func (m *SslCertificates) Reset()         { *m = SslCertificates{} }
func (m *SslCertificates) String() string { return proto.CompactTextString(m) }
func (*SslCertificates) ProtoMessage()    {}
func (*SslCertificates) Descriptor() ([]byte, []int) {
	return fileDescriptor_555bd8c177793206, []int{4}
}
func (m *SslCertificates) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SslCertificates) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SslCertificates.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SslCertificates) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SslCertificates.Merge(m, src)
}
func (m *SslCertificates) XXX_Size() int {
	return m.Size()
}
func (m *SslCertificates) XXX_DiscardUnknown() {
	xxx_messageInfo_SslCertificates.DiscardUnknown(m)
}

var xxx_messageInfo_SslCertificates proto.InternalMessageInfo

func (m *SslCertificates) GetSslCerts() []*SslCertificate {
	if m != nil {
		return m.SslCerts
	}
	return nil
}

type SslCertificate struct {
	FileName               string            `protobuf:"bytes,1,opt,name=file_name,json=fileName,proto3" json:"fileName"`
	Size_                  int64             `protobuf:"varint,2,opt,name=size,proto3" json:"size"`
	Mtime                  *types.Timestamp  `protobuf:"bytes,3,opt,name=mtime,proto3" json:"mtime"`
	Validity               *CertificateDates `protobuf:"bytes,4,opt,name=validity,proto3" json:"validity"`
	Issuer                 *CertificateName  `protobuf:"bytes,5,opt,name=issuer,proto3" json:"issuer"`
	Subject                *CertificateName  `protobuf:"bytes,6,opt,name=subject,proto3" json:"subject"`
	SubjAltNames           []string          `protobuf:"bytes,7,rep,name=subj_alt_names,json=subjAltNames,proto3" json:"subjectAltName"`
	OcspUrl                []string          `protobuf:"bytes,8,rep,name=ocsp_url,json=ocspUrl,proto3" json:"ocspURL"`
	PublicKeyAlgorithm     string            `protobuf:"bytes,9,opt,name=public_key_algorithm,json=publicKeyAlgorithm,proto3" json:"publicKeyAlgorithm"`
	SignatureAlgorithm     string            `protobuf:"bytes,10,opt,name=signature_algorithm,json=signatureAlgorithm,proto3" json:"signatureAlgorithm"`
	SerialNumber           string            `protobuf:"bytes,11,opt,name=serial_number,json=serialNumber,proto3" json:"serialNumber"`
	SubjectKeyIdentifier   string            `protobuf:"bytes,12,opt,name=subject_key_identifier,json=subjectKeyIdentifier,proto3" json:"subjectKeyIdentifier"`
	Fingerprint            string            `protobuf:"bytes,13,opt,name=fingerprint,proto3" json:"fingerprint"`
	FingerprintAlgorithm   string            `protobuf:"bytes,14,opt,name=fingerprint_algorithm,json=fingerprintAlgorithm,proto3" json:"fingerprintAlgorithm"`
	Version                int64             `protobuf:"varint,15,opt,name=version,proto3" json:"version"`
	AuthorityKeyIdentifier string            `protobuf:"bytes,16,opt,name=authority_key_identifier,json=authorityKeyIdentifier,proto3" json:"authorityKeyIdentifier"`
	XXX_NoUnkeyedLiteral   struct{}          `json:"-"`
	XXX_unrecognized       []byte            `json:"-"`
	XXX_sizecache          int32             `json:"-"`
}

func (m *SslCertificate) Reset()         { *m = SslCertificate{} }
func (m *SslCertificate) String() string { return proto.CompactTextString(m) }
func (*SslCertificate) ProtoMessage()    {}
func (*SslCertificate) Descriptor() ([]byte, []int) {
	return fileDescriptor_555bd8c177793206, []int{5}
}
func (m *SslCertificate) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SslCertificate) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SslCertificate.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SslCertificate) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SslCertificate.Merge(m, src)
}
func (m *SslCertificate) XXX_Size() int {
	return m.Size()
}
func (m *SslCertificate) XXX_DiscardUnknown() {
	xxx_messageInfo_SslCertificate.DiscardUnknown(m)
}

var xxx_messageInfo_SslCertificate proto.InternalMessageInfo

func (m *SslCertificate) GetFileName() string {
	if m != nil {
		return m.FileName
	}
	return ""
}

func (m *SslCertificate) GetSize_() int64 {
	if m != nil {
		return m.Size_
	}
	return 0
}

func (m *SslCertificate) GetMtime() *types.Timestamp {
	if m != nil {
		return m.Mtime
	}
	return nil
}

func (m *SslCertificate) GetValidity() *CertificateDates {
	if m != nil {
		return m.Validity
	}
	return nil
}

func (m *SslCertificate) GetIssuer() *CertificateName {
	if m != nil {
		return m.Issuer
	}
	return nil
}

func (m *SslCertificate) GetSubject() *CertificateName {
	if m != nil {
		return m.Subject
	}
	return nil
}

func (m *SslCertificate) GetSubjAltNames() []string {
	if m != nil {
		return m.SubjAltNames
	}
	return nil
}

func (m *SslCertificate) GetOcspUrl() []string {
	if m != nil {
		return m.OcspUrl
	}
	return nil
}

func (m *SslCertificate) GetPublicKeyAlgorithm() string {
	if m != nil {
		return m.PublicKeyAlgorithm
	}
	return ""
}

func (m *SslCertificate) GetSignatureAlgorithm() string {
	if m != nil {
		return m.SignatureAlgorithm
	}
	return ""
}

func (m *SslCertificate) GetSerialNumber() string {
	if m != nil {
		return m.SerialNumber
	}
	return ""
}

func (m *SslCertificate) GetSubjectKeyIdentifier() string {
	if m != nil {
		return m.SubjectKeyIdentifier
	}
	return ""
}

func (m *SslCertificate) GetFingerprint() string {
	if m != nil {
		return m.Fingerprint
	}
	return ""
}

func (m *SslCertificate) GetFingerprintAlgorithm() string {
	if m != nil {
		return m.FingerprintAlgorithm
	}
	return ""
}

func (m *SslCertificate) GetVersion() int64 {
	if m != nil {
		return m.Version
	}
	return 0
}

func (m *SslCertificate) GetAuthorityKeyIdentifier() string {
	if m != nil {
		return m.AuthorityKeyIdentifier
	}
	return ""
}

type CertificateDates struct {
	NotBefore            int64    `protobuf:"varint,1,opt,name=not_before,json=notBefore,proto3" json:"notBefore"`
	NotAfter             int64    `protobuf:"varint,2,opt,name=not_after,json=notAfter,proto3" json:"notAfter"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *CertificateDates) Reset()         { *m = CertificateDates{} }
func (m *CertificateDates) String() string { return proto.CompactTextString(m) }
func (*CertificateDates) ProtoMessage()    {}
func (*CertificateDates) Descriptor() ([]byte, []int) {
	return fileDescriptor_555bd8c177793206, []int{6}
}
func (m *CertificateDates) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CertificateDates) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CertificateDates.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CertificateDates) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CertificateDates.Merge(m, src)
}
func (m *CertificateDates) XXX_Size() int {
	return m.Size()
}
func (m *CertificateDates) XXX_DiscardUnknown() {
	xxx_messageInfo_CertificateDates.DiscardUnknown(m)
}

var xxx_messageInfo_CertificateDates proto.InternalMessageInfo

func (m *CertificateDates) GetNotBefore() int64 {
	if m != nil {
		return m.NotBefore
	}
	return 0
}

func (m *CertificateDates) GetNotAfter() int64 {
	if m != nil {
		return m.NotAfter
	}
	return 0
}

type CertificateName struct {
	CommonName           string   `protobuf:"bytes,1,opt,name=common_name,json=commonName,proto3" json:"commonName"`
	Country              []string `protobuf:"bytes,2,rep,name=country,proto3" json:"country"`
	State                []string `protobuf:"bytes,3,rep,name=state,proto3" json:"state"`
	Locality             []string `protobuf:"bytes,4,rep,name=locality,proto3" json:"locality"`
	Organization         []string `protobuf:"bytes,5,rep,name=organization,proto3" json:"organization"`
	OrganizationalUnit   []string `protobuf:"bytes,6,rep,name=organizational_unit,json=organizationalUnit,proto3" json:"organizationalUnit"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *CertificateName) Reset()         { *m = CertificateName{} }
func (m *CertificateName) String() string { return proto.CompactTextString(m) }
func (*CertificateName) ProtoMessage()    {}
func (*CertificateName) Descriptor() ([]byte, []int) {
	return fileDescriptor_555bd8c177793206, []int{7}
}
func (m *CertificateName) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CertificateName) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CertificateName.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CertificateName) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CertificateName.Merge(m, src)
}
func (m *CertificateName) XXX_Size() int {
	return m.Size()
}
func (m *CertificateName) XXX_DiscardUnknown() {
	xxx_messageInfo_CertificateName.DiscardUnknown(m)
}

var xxx_messageInfo_CertificateName proto.InternalMessageInfo

func (m *CertificateName) GetCommonName() string {
	if m != nil {
		return m.CommonName
	}
	return ""
}

func (m *CertificateName) GetCountry() []string {
	if m != nil {
		return m.Country
	}
	return nil
}

func (m *CertificateName) GetState() []string {
	if m != nil {
		return m.State
	}
	return nil
}

func (m *CertificateName) GetLocality() []string {
	if m != nil {
		return m.Locality
	}
	return nil
}

func (m *CertificateName) GetOrganization() []string {
	if m != nil {
		return m.Organization
	}
	return nil
}

func (m *CertificateName) GetOrganizationalUnit() []string {
	if m != nil {
		return m.OrganizationalUnit
	}
	return nil
}

type ZippedFile struct {
	Contents             []byte   `protobuf:"bytes,1,opt,name=contents,proto3" json:"contents"`
	Checksum             string   `protobuf:"bytes,2,opt,name=checksum,proto3" json:"checksum"`
	RootDirectory        string   `protobuf:"bytes,3,opt,name=root_directory,json=rootDirectory,proto3" json:"root_directory"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ZippedFile) Reset()         { *m = ZippedFile{} }
func (m *ZippedFile) String() string { return proto.CompactTextString(m) }
func (*ZippedFile) ProtoMessage()    {}
func (*ZippedFile) Descriptor() ([]byte, []int) {
	return fileDescriptor_555bd8c177793206, []int{8}
}
func (m *ZippedFile) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ZippedFile) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ZippedFile.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ZippedFile) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ZippedFile.Merge(m, src)
}
func (m *ZippedFile) XXX_Size() int {
	return m.Size()
}
func (m *ZippedFile) XXX_DiscardUnknown() {
	xxx_messageInfo_ZippedFile.DiscardUnknown(m)
}

var xxx_messageInfo_ZippedFile proto.InternalMessageInfo

func (m *ZippedFile) GetContents() []byte {
	if m != nil {
		return m.Contents
	}
	return nil
}

func (m *ZippedFile) GetChecksum() string {
	if m != nil {
		return m.Checksum
	}
	return ""
}

func (m *ZippedFile) GetRootDirectory() string {
	if m != nil {
		return m.RootDirectory
	}
	return ""
}

func init() {
	proto.RegisterType((*Metadata)(nil), "f5.nginx.agent.sdk.Metadata")
	proto.RegisterType((*DirectoryMap)(nil), "f5.nginx.agent.sdk.DirectoryMap")
	proto.RegisterType((*File)(nil), "f5.nginx.agent.sdk.File")
	proto.RegisterType((*Directory)(nil), "f5.nginx.agent.sdk.Directory")
	proto.RegisterType((*SslCertificates)(nil), "f5.nginx.agent.sdk.SslCertificates")
	proto.RegisterType((*SslCertificate)(nil), "f5.nginx.agent.sdk.SslCertificate")
	proto.RegisterType((*CertificateDates)(nil), "f5.nginx.agent.sdk.CertificateDates")
	proto.RegisterType((*CertificateName)(nil), "f5.nginx.agent.sdk.CertificateName")
	proto.RegisterType((*ZippedFile)(nil), "f5.nginx.agent.sdk.ZippedFile")
}

func init() { proto.RegisterFile("common.proto", fileDescriptor_555bd8c177793206) }

var fileDescriptor_555bd8c177793206 = []byte{
	// 1109 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xa4, 0x56, 0xcf, 0x8e, 0xe3, 0x44,
	0x13, 0x97, 0x27, 0x9b, 0x9d, 0xa4, 0x92, 0xc9, 0x8c, 0xfa, 0xdb, 0x6f, 0x65, 0x8d, 0x60, 0x1d,
	0x85, 0x3f, 0xca, 0x22, 0x48, 0x60, 0x60, 0x05, 0x68, 0x25, 0x56, 0x13, 0x56, 0x2c, 0xc3, 0x32,
	0x83, 0xd4, 0xec, 0x5e, 0xf6, 0x62, 0x39, 0x76, 0xc7, 0xd3, 0x8c, 0xed, 0x8e, 0xdc, 0xed, 0x11,
	0xd9, 0x57, 0xe1, 0x31, 0x38, 0xf0, 0x0a, 0x1c, 0x79, 0x02, 0x0b, 0xcd, 0xd1, 0x07, 0x8e, 0xdc,
	0x90, 0x50, 0x57, 0xdb, 0x8e, 0x33, 0x13, 0x76, 0x91, 0xb8, 0xb8, 0xab, 0x7e, 0x55, 0xd5, 0xee,
	0xfa, 0x75, 0x75, 0x75, 0x43, 0xdf, 0x17, 0x71, 0x2c, 0x92, 0xc9, 0x32, 0x15, 0x4a, 0x10, 0xb2,
	0x78, 0x30, 0x49, 0x42, 0x9e, 0xfc, 0x38, 0xf1, 0x42, 0x96, 0xa8, 0x89, 0x0c, 0x2e, 0x0e, 0x21,
	0x14, 0xa1, 0x30, 0xf6, 0x43, 0x27, 0x14, 0x22, 0x8c, 0xd8, 0x14, 0xb5, 0x79, 0xb6, 0x98, 0x2a,
	0x1e, 0x33, 0xa9, 0xbc, 0x78, 0x69, 0x1c, 0x46, 0x7f, 0x58, 0xd0, 0x39, 0x65, 0xca, 0x0b, 0x3c,
	0xe5, 0x91, 0x27, 0xd0, 0xad, 0xed, 0xb6, 0x35, 0xb4, 0xc6, 0xbd, 0xa3, 0xc3, 0x89, 0x99, 0x61,
	0x52, 0xcd, 0x30, 0x79, 0x56, 0x79, 0xcc, 0xf6, 0x8a, 0xdc, 0x59, 0x07, 0xd0, 0xb5, 0x48, 0xde,
	0x83, 0xae, 0x1f, 0x71, 0x96, 0x28, 0x97, 0x07, 0xf6, 0xce, 0xd0, 0x1a, 0x77, 0x8d, 0x73, 0x0d,
	0xd2, 0x8e, 0x11, 0x4f, 0x02, 0xf2, 0x01, 0x40, 0xcc, 0xa4, 0xf4, 0x42, 0xa6, 0x9d, 0x5b, 0xe8,
	0x3c, 0x28, 0x72, 0xa7, 0x81, 0xd2, 0x6e, 0x29, 0x9f, 0x04, 0xe4, 0x0b, 0x38, 0xf0, 0x23, 0x91,
	0x05, 0xae, 0xe7, 0xfb, 0x22, 0x33, 0x7f, 0xb8, 0x85, 0x41, 0x77, 0x8a, 0xdc, 0xb9, 0x61, 0xa3,
	0x03, 0x44, 0x8e, 0x0d, 0x70, 0x12, 0x8c, 0xbe, 0x83, 0xfe, 0x63, 0x9e, 0x32, 0x5f, 0x89, 0x74,
	0x75, 0xea, 0x2d, 0xc9, 0x23, 0xe8, 0x05, 0xa5, 0xce, 0x99, 0xb4, 0xad, 0x61, 0x6b, 0xdc, 0x3b,
	0x7a, 0x73, 0x72, 0x93, 0xd7, 0x49, 0x1d, 0x46, 0x9b, 0x11, 0xa3, 0xbf, 0x2c, 0xb8, 0xf5, 0x15,
	0x8f, 0x18, 0x79, 0x03, 0x6e, 0x25, 0x5e, 0xcc, 0x90, 0xb8, 0xee, 0xac, 0x53, 0xe4, 0x0e, 0xea,
	0x14, 0xbf, 0xc4, 0x81, 0x76, 0xc4, 0x13, 0x26, 0x91, 0x8e, 0xf6, 0xac, 0x5b, 0xe4, 0x8e, 0x01,
	0xa8, 0x19, 0xc8, 0x43, 0x68, 0xc7, 0x9a, 0x41, 0xa4, 0xe0, 0xd5, 0xc4, 0x63, 0x30, 0x3a, 0x53,
	0x33, 0x90, 0x8f, 0xa0, 0xb7, 0x64, 0x69, 0xcc, 0xa5, 0xe4, 0x22, 0x91, 0x25, 0x21, 0xfb, 0x45,
	0xee, 0x34, 0x61, 0xda, 0x54, 0xf4, 0x72, 0x25, 0x7f, 0xc9, 0xec, 0xf6, 0xd0, 0x1a, 0xb7, 0xcc,
	0x72, 0xb5, 0x4e, 0xf1, 0x4b, 0xc6, 0xd0, 0xf1, 0x45, 0xa2, 0x58, 0xa2, 0xa4, 0x7d, 0x7b, 0x68,
	0x8d, 0xfb, 0xb3, 0x7e, 0x91, 0x3b, 0x35, 0x46, 0x6b, 0x69, 0xf4, 0x8b, 0x05, 0xdd, 0x9a, 0x1a,
	0x42, 0x9a, 0x24, 0x94, 0xa9, 0x7f, 0x58, 0x65, 0xb6, 0xf3, 0xba, 0xcc, 0xaa, 0x74, 0x86, 0x9b,
	0xe9, 0x60, 0x51, 0x6c, 0xae, 0x9e, 0x94, 0xab, 0xd7, 0x99, 0xb6, 0xca, 0x35, 0x4f, 0xa0, 0xbd,
	0xe0, 0x11, 0x93, 0x76, 0x1b, 0x37, 0xd1, 0xde, 0xb6, 0x89, 0x7a, 0xa7, 0xa8, 0x71, 0x1b, 0x51,
	0xd8, 0xff, 0x5e, 0x46, 0x5f, 0xb2, 0x54, 0xf1, 0x05, 0xf7, 0x3d, 0xc5, 0x24, 0x79, 0x04, 0x5d,
	0x29, 0x23, 0xd7, 0x67, 0xa9, 0xaa, 0x6a, 0x61, 0xb4, 0x6d, 0x9a, 0xcd, 0x38, 0xda, 0x91, 0x46,
	0x97, 0xa3, 0x3f, 0x77, 0x61, 0xb0, 0x69, 0x24, 0xf7, 0xa1, 0xab, 0xff, 0xe7, 0x36, 0x8a, 0x03,
	0xb9, 0xd4, 0xe0, 0x99, 0x2e, 0x90, 0x5a, 0xaa, 0xf7, 0x64, 0x67, 0xeb, 0x9e, 0xfc, 0xa7, 0x0a,
	0x39, 0x83, 0xce, 0xa5, 0x17, 0xf1, 0x80, 0xab, 0x15, 0x92, 0xd6, 0x3b, 0x7a, 0x7b, 0x5b, 0x62,
	0x8d, 0x85, 0x3f, 0xd6, 0x8c, 0x98, 0xa5, 0x56, 0x91, 0xb4, 0x96, 0xc8, 0x13, 0xb8, 0xcd, 0xa5,
	0xcc, 0x58, 0x8a, 0x05, 0xd4, 0x3b, 0x7a, 0xeb, 0x35, 0xb3, 0xe9, 0xfc, 0x66, 0x50, 0xe4, 0x4e,
	0x19, 0x46, 0xcb, 0x91, 0x7c, 0x03, 0xbb, 0x32, 0x9b, 0xff, 0xc0, 0x7c, 0x85, 0x85, 0xf6, 0x2f,
	0x67, 0xea, 0x15, 0xb9, 0x53, 0xc5, 0xd1, 0x4a, 0x20, 0x9f, 0xc1, 0x40, 0x8b, 0xae, 0x17, 0x29,
	0xa4, 0x5b, 0xda, 0xbb, 0xc3, 0xd6, 0xb8, 0x3b, 0x23, 0x45, 0xee, 0x0c, 0x4a, 0xa7, 0xe3, 0x48,
	0x21, 0xeb, 0x7d, 0xad, 0x97, 0x8a, 0x24, 0xef, 0x42, 0x47, 0xf8, 0x72, 0xe9, 0x66, 0x69, 0x64,
	0x77, 0x30, 0x06, 0xff, 0xa0, 0xb1, 0xe7, 0xf4, 0x5b, 0x6a, 0x84, 0x34, 0x22, 0x5f, 0xc3, 0x9d,
	0x65, 0x36, 0x8f, 0xb8, 0xef, 0x5e, 0xb0, 0x95, 0xeb, 0x45, 0xa1, 0x48, 0xb9, 0x3a, 0x8f, 0xed,
	0x2e, 0xee, 0xeb, 0xdd, 0x22, 0x77, 0x88, 0xb1, 0x3f, 0x65, 0xab, 0xe3, 0xca, 0x4a, 0xb7, 0x60,
	0xe4, 0x09, 0xfc, 0x4f, 0xf2, 0x30, 0xf1, 0x54, 0x96, 0xb2, 0xc6, 0x44, 0xb0, 0x9e, 0xa8, 0x36,
	0x37, 0x26, 0xba, 0x89, 0x91, 0x07, 0xb0, 0x27, 0x59, 0xca, 0xbd, 0xc8, 0x4d, 0xb2, 0x78, 0xce,
	0x52, 0xbb, 0x87, 0x53, 0x1c, 0x14, 0xb9, 0xd3, 0x37, 0x86, 0x33, 0xc4, 0xe9, 0x86, 0x46, 0xce,
	0xe0, 0x6e, 0xc9, 0x08, 0xa6, 0xc2, 0x03, 0x96, 0x68, 0x86, 0x59, 0x6a, 0xf7, 0x31, 0xde, 0x2e,
	0x72, 0xe7, 0x4e, 0xe9, 0xf1, 0x94, 0xad, 0x4e, 0x6a, 0x3b, 0xdd, 0x8a, 0xea, 0x16, 0xb4, 0xe0,
	0x49, 0xc8, 0xd2, 0x65, 0xca, 0x13, 0x65, 0xef, 0xad, 0x5b, 0x50, 0x03, 0xa6, 0x4d, 0x85, 0x9c,
	0xc2, 0xff, 0x1b, 0x6a, 0x83, 0x84, 0xc1, 0x7a, 0x05, 0x0d, 0x87, 0x35, 0x0d, 0x5b, 0x51, 0xf2,
	0x0e, 0xec, 0x5e, 0xb2, 0x54, 0xf7, 0x07, 0x7b, 0x1f, 0x0f, 0x10, 0x6e, 0x61, 0x09, 0xd1, 0x4a,
	0x20, 0xcf, 0xc0, 0xf6, 0x32, 0x75, 0xae, 0x83, 0x56, 0xd7, 0x53, 0x3f, 0xc0, 0x1f, 0x1f, 0x16,
	0xb9, 0x73, 0xb7, 0xf6, 0xd9, 0x4c, 0xfe, 0x1f, 0xf0, 0xd1, 0x05, 0x1c, 0x5c, 0x3f, 0x3b, 0xe4,
	0x7d, 0x80, 0x44, 0x28, 0x77, 0xce, 0x16, 0x22, 0x35, 0x47, 0xbf, 0x65, 0xee, 0xc1, 0x44, 0xa8,
	0x19, 0x82, 0x74, 0x2d, 0xea, 0x3e, 0xa1, 0xbd, 0xbd, 0x85, 0x62, 0x69, 0xd9, 0x01, 0xf0, 0xf0,
	0x25, 0x42, 0x1d, 0x6b, 0x8c, 0xd6, 0xd2, 0xe8, 0xe7, 0x1d, 0xd8, 0xbf, 0x76, 0x22, 0xc8, 0x14,
	0x7a, 0xe6, 0x69, 0xd0, 0x6c, 0x34, 0x78, 0x91, 0x1a, 0x18, 0x8b, 0xbe, 0x21, 0x6b, 0xba, 0xf0,
	0x52, 0x4c, 0x57, 0xf6, 0xce, 0xba, 0xe2, 0x4b, 0x88, 0x56, 0x82, 0xbe, 0xb8, 0xa4, 0xf2, 0x94,
	0xee, 0x3a, 0xda, 0x09, 0x3b, 0x0b, 0x02, 0xd4, 0x0c, 0xfa, 0xaa, 0x88, 0x84, 0xef, 0x45, 0xa6,
	0xb3, 0xb4, 0xaa, 0xf6, 0x56, 0x61, 0xb4, 0x96, 0xc8, 0x27, 0xd0, 0x17, 0x69, 0xe8, 0x25, 0xfc,
	0xa5, 0xa7, 0xf4, 0x2e, 0xb5, 0xd1, 0x1b, 0x0b, 0xb5, 0x89, 0xd3, 0x0d, 0x4d, 0x1f, 0x94, 0xa6,
	0xee, 0x45, 0x6e, 0x96, 0x70, 0xdd, 0x2c, 0x5a, 0xd5, 0x41, 0xd9, 0x34, 0x3f, 0x4f, 0xb8, 0xa2,
	0x5b, 0xb0, 0xd1, 0x4f, 0x16, 0xc0, 0x0b, 0xbe, 0x5c, 0xb2, 0x00, 0xef, 0xeb, 0xe6, 0x15, 0x67,
	0xbd, 0xea, 0x8a, 0x43, 0xcf, 0x73, 0xe6, 0x5f, 0xc8, 0x2c, 0x2e, 0x5f, 0x33, 0xc6, 0xb3, 0xc4,
	0x68, 0x2d, 0x91, 0xcf, 0x61, 0x90, 0x0a, 0xa1, 0xdc, 0xea, 0x81, 0xb0, 0x2a, 0x1f, 0x34, 0xd8,
	0x80, 0x36, 0x2d, 0x74, 0x4f, 0xeb, 0xf5, 0xcd, 0x39, 0xfb, 0xf4, 0xd7, 0xab, 0x7b, 0xd6, 0x6f,
	0x57, 0xf7, 0xac, 0xdf, 0xaf, 0xee, 0x59, 0x2f, 0xee, 0x87, 0x5c, 0x9d, 0x67, 0xf3, 0x89, 0x2f,
	0xe2, 0x29, 0xf6, 0xc2, 0x29, 0xf6, 0xc2, 0xa9, 0x0c, 0x2e, 0xa6, 0x97, 0x47, 0xe6, 0x3d, 0xf7,
	0xd0, 0x34, 0xfe, 0xdb, 0x38, 0x7c, 0xfc, 0x77, 0x00, 0x00, 0x00, 0xff, 0xff, 0x43, 0xa7, 0x21,
	0xce, 0x1a, 0x0a, 0x00, 0x00,
}

func (m *Metadata) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Metadata) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Metadata) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.CloudAccountId) > 0 {
		i -= len(m.CloudAccountId)
		copy(dAtA[i:], m.CloudAccountId)
		i = encodeVarintCommon(dAtA, i, uint64(len(m.CloudAccountId)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.MessageId) > 0 {
		i -= len(m.MessageId)
		copy(dAtA[i:], m.MessageId)
		i = encodeVarintCommon(dAtA, i, uint64(len(m.MessageId)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.ClientId) > 0 {
		i -= len(m.ClientId)
		copy(dAtA[i:], m.ClientId)
		i = encodeVarintCommon(dAtA, i, uint64(len(m.ClientId)))
		i--
		dAtA[i] = 0x12
	}
	if m.Timestamp != nil {
		{
			size, err := m.Timestamp.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintCommon(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *DirectoryMap) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DirectoryMap) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *DirectoryMap) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Directories) > 0 {
		for iNdEx := len(m.Directories) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Directories[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintCommon(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *File) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *File) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *File) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Contents) > 0 {
		i -= len(m.Contents)
		copy(dAtA[i:], m.Contents)
		i = encodeVarintCommon(dAtA, i, uint64(len(m.Contents)))
		i--
		dAtA[i] = 0x32
	}
	if m.Size_ != 0 {
		i = encodeVarintCommon(dAtA, i, uint64(m.Size_))
		i--
		dAtA[i] = 0x28
	}
	if len(m.Permissions) > 0 {
		i -= len(m.Permissions)
		copy(dAtA[i:], m.Permissions)
		i = encodeVarintCommon(dAtA, i, uint64(len(m.Permissions)))
		i--
		dAtA[i] = 0x22
	}
	if m.Mtime != nil {
		{
			size, err := m.Mtime.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintCommon(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if m.Lines != 0 {
		i = encodeVarintCommon(dAtA, i, uint64(m.Lines))
		i--
		dAtA[i] = 0x10
	}
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintCommon(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *Directory) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Directory) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Directory) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Files) > 0 {
		for iNdEx := len(m.Files) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Files[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintCommon(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x2a
		}
	}
	if m.Size_ != 0 {
		i = encodeVarintCommon(dAtA, i, uint64(m.Size_))
		i--
		dAtA[i] = 0x20
	}
	if len(m.Permissions) > 0 {
		i -= len(m.Permissions)
		copy(dAtA[i:], m.Permissions)
		i = encodeVarintCommon(dAtA, i, uint64(len(m.Permissions)))
		i--
		dAtA[i] = 0x1a
	}
	if m.Mtime != nil {
		{
			size, err := m.Mtime.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintCommon(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintCommon(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *SslCertificates) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SslCertificates) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SslCertificates) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.SslCerts) > 0 {
		for iNdEx := len(m.SslCerts) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.SslCerts[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintCommon(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *SslCertificate) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SslCertificate) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SslCertificate) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.AuthorityKeyIdentifier) > 0 {
		i -= len(m.AuthorityKeyIdentifier)
		copy(dAtA[i:], m.AuthorityKeyIdentifier)
		i = encodeVarintCommon(dAtA, i, uint64(len(m.AuthorityKeyIdentifier)))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x82
	}
	if m.Version != 0 {
		i = encodeVarintCommon(dAtA, i, uint64(m.Version))
		i--
		dAtA[i] = 0x78
	}
	if len(m.FingerprintAlgorithm) > 0 {
		i -= len(m.FingerprintAlgorithm)
		copy(dAtA[i:], m.FingerprintAlgorithm)
		i = encodeVarintCommon(dAtA, i, uint64(len(m.FingerprintAlgorithm)))
		i--
		dAtA[i] = 0x72
	}
	if len(m.Fingerprint) > 0 {
		i -= len(m.Fingerprint)
		copy(dAtA[i:], m.Fingerprint)
		i = encodeVarintCommon(dAtA, i, uint64(len(m.Fingerprint)))
		i--
		dAtA[i] = 0x6a
	}
	if len(m.SubjectKeyIdentifier) > 0 {
		i -= len(m.SubjectKeyIdentifier)
		copy(dAtA[i:], m.SubjectKeyIdentifier)
		i = encodeVarintCommon(dAtA, i, uint64(len(m.SubjectKeyIdentifier)))
		i--
		dAtA[i] = 0x62
	}
	if len(m.SerialNumber) > 0 {
		i -= len(m.SerialNumber)
		copy(dAtA[i:], m.SerialNumber)
		i = encodeVarintCommon(dAtA, i, uint64(len(m.SerialNumber)))
		i--
		dAtA[i] = 0x5a
	}
	if len(m.SignatureAlgorithm) > 0 {
		i -= len(m.SignatureAlgorithm)
		copy(dAtA[i:], m.SignatureAlgorithm)
		i = encodeVarintCommon(dAtA, i, uint64(len(m.SignatureAlgorithm)))
		i--
		dAtA[i] = 0x52
	}
	if len(m.PublicKeyAlgorithm) > 0 {
		i -= len(m.PublicKeyAlgorithm)
		copy(dAtA[i:], m.PublicKeyAlgorithm)
		i = encodeVarintCommon(dAtA, i, uint64(len(m.PublicKeyAlgorithm)))
		i--
		dAtA[i] = 0x4a
	}
	if len(m.OcspUrl) > 0 {
		for iNdEx := len(m.OcspUrl) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.OcspUrl[iNdEx])
			copy(dAtA[i:], m.OcspUrl[iNdEx])
			i = encodeVarintCommon(dAtA, i, uint64(len(m.OcspUrl[iNdEx])))
			i--
			dAtA[i] = 0x42
		}
	}
	if len(m.SubjAltNames) > 0 {
		for iNdEx := len(m.SubjAltNames) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.SubjAltNames[iNdEx])
			copy(dAtA[i:], m.SubjAltNames[iNdEx])
			i = encodeVarintCommon(dAtA, i, uint64(len(m.SubjAltNames[iNdEx])))
			i--
			dAtA[i] = 0x3a
		}
	}
	if m.Subject != nil {
		{
			size, err := m.Subject.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintCommon(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x32
	}
	if m.Issuer != nil {
		{
			size, err := m.Issuer.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintCommon(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x2a
	}
	if m.Validity != nil {
		{
			size, err := m.Validity.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintCommon(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x22
	}
	if m.Mtime != nil {
		{
			size, err := m.Mtime.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintCommon(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if m.Size_ != 0 {
		i = encodeVarintCommon(dAtA, i, uint64(m.Size_))
		i--
		dAtA[i] = 0x10
	}
	if len(m.FileName) > 0 {
		i -= len(m.FileName)
		copy(dAtA[i:], m.FileName)
		i = encodeVarintCommon(dAtA, i, uint64(len(m.FileName)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *CertificateDates) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CertificateDates) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CertificateDates) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.NotAfter != 0 {
		i = encodeVarintCommon(dAtA, i, uint64(m.NotAfter))
		i--
		dAtA[i] = 0x10
	}
	if m.NotBefore != 0 {
		i = encodeVarintCommon(dAtA, i, uint64(m.NotBefore))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *CertificateName) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CertificateName) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CertificateName) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.OrganizationalUnit) > 0 {
		for iNdEx := len(m.OrganizationalUnit) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.OrganizationalUnit[iNdEx])
			copy(dAtA[i:], m.OrganizationalUnit[iNdEx])
			i = encodeVarintCommon(dAtA, i, uint64(len(m.OrganizationalUnit[iNdEx])))
			i--
			dAtA[i] = 0x32
		}
	}
	if len(m.Organization) > 0 {
		for iNdEx := len(m.Organization) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.Organization[iNdEx])
			copy(dAtA[i:], m.Organization[iNdEx])
			i = encodeVarintCommon(dAtA, i, uint64(len(m.Organization[iNdEx])))
			i--
			dAtA[i] = 0x2a
		}
	}
	if len(m.Locality) > 0 {
		for iNdEx := len(m.Locality) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.Locality[iNdEx])
			copy(dAtA[i:], m.Locality[iNdEx])
			i = encodeVarintCommon(dAtA, i, uint64(len(m.Locality[iNdEx])))
			i--
			dAtA[i] = 0x22
		}
	}
	if len(m.State) > 0 {
		for iNdEx := len(m.State) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.State[iNdEx])
			copy(dAtA[i:], m.State[iNdEx])
			i = encodeVarintCommon(dAtA, i, uint64(len(m.State[iNdEx])))
			i--
			dAtA[i] = 0x1a
		}
	}
	if len(m.Country) > 0 {
		for iNdEx := len(m.Country) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.Country[iNdEx])
			copy(dAtA[i:], m.Country[iNdEx])
			i = encodeVarintCommon(dAtA, i, uint64(len(m.Country[iNdEx])))
			i--
			dAtA[i] = 0x12
		}
	}
	if len(m.CommonName) > 0 {
		i -= len(m.CommonName)
		copy(dAtA[i:], m.CommonName)
		i = encodeVarintCommon(dAtA, i, uint64(len(m.CommonName)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ZippedFile) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ZippedFile) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ZippedFile) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.RootDirectory) > 0 {
		i -= len(m.RootDirectory)
		copy(dAtA[i:], m.RootDirectory)
		i = encodeVarintCommon(dAtA, i, uint64(len(m.RootDirectory)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Checksum) > 0 {
		i -= len(m.Checksum)
		copy(dAtA[i:], m.Checksum)
		i = encodeVarintCommon(dAtA, i, uint64(len(m.Checksum)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Contents) > 0 {
		i -= len(m.Contents)
		copy(dAtA[i:], m.Contents)
		i = encodeVarintCommon(dAtA, i, uint64(len(m.Contents)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintCommon(dAtA []byte, offset int, v uint64) int {
	offset -= sovCommon(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *Metadata) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Timestamp != nil {
		l = m.Timestamp.Size()
		n += 1 + l + sovCommon(uint64(l))
	}
	l = len(m.ClientId)
	if l > 0 {
		n += 1 + l + sovCommon(uint64(l))
	}
	l = len(m.MessageId)
	if l > 0 {
		n += 1 + l + sovCommon(uint64(l))
	}
	l = len(m.CloudAccountId)
	if l > 0 {
		n += 1 + l + sovCommon(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *DirectoryMap) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Directories) > 0 {
		for _, e := range m.Directories {
			l = e.Size()
			n += 1 + l + sovCommon(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *File) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovCommon(uint64(l))
	}
	if m.Lines != 0 {
		n += 1 + sovCommon(uint64(m.Lines))
	}
	if m.Mtime != nil {
		l = m.Mtime.Size()
		n += 1 + l + sovCommon(uint64(l))
	}
	l = len(m.Permissions)
	if l > 0 {
		n += 1 + l + sovCommon(uint64(l))
	}
	if m.Size_ != 0 {
		n += 1 + sovCommon(uint64(m.Size_))
	}
	l = len(m.Contents)
	if l > 0 {
		n += 1 + l + sovCommon(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *Directory) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovCommon(uint64(l))
	}
	if m.Mtime != nil {
		l = m.Mtime.Size()
		n += 1 + l + sovCommon(uint64(l))
	}
	l = len(m.Permissions)
	if l > 0 {
		n += 1 + l + sovCommon(uint64(l))
	}
	if m.Size_ != 0 {
		n += 1 + sovCommon(uint64(m.Size_))
	}
	if len(m.Files) > 0 {
		for _, e := range m.Files {
			l = e.Size()
			n += 1 + l + sovCommon(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *SslCertificates) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.SslCerts) > 0 {
		for _, e := range m.SslCerts {
			l = e.Size()
			n += 1 + l + sovCommon(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *SslCertificate) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.FileName)
	if l > 0 {
		n += 1 + l + sovCommon(uint64(l))
	}
	if m.Size_ != 0 {
		n += 1 + sovCommon(uint64(m.Size_))
	}
	if m.Mtime != nil {
		l = m.Mtime.Size()
		n += 1 + l + sovCommon(uint64(l))
	}
	if m.Validity != nil {
		l = m.Validity.Size()
		n += 1 + l + sovCommon(uint64(l))
	}
	if m.Issuer != nil {
		l = m.Issuer.Size()
		n += 1 + l + sovCommon(uint64(l))
	}
	if m.Subject != nil {
		l = m.Subject.Size()
		n += 1 + l + sovCommon(uint64(l))
	}
	if len(m.SubjAltNames) > 0 {
		for _, s := range m.SubjAltNames {
			l = len(s)
			n += 1 + l + sovCommon(uint64(l))
		}
	}
	if len(m.OcspUrl) > 0 {
		for _, s := range m.OcspUrl {
			l = len(s)
			n += 1 + l + sovCommon(uint64(l))
		}
	}
	l = len(m.PublicKeyAlgorithm)
	if l > 0 {
		n += 1 + l + sovCommon(uint64(l))
	}
	l = len(m.SignatureAlgorithm)
	if l > 0 {
		n += 1 + l + sovCommon(uint64(l))
	}
	l = len(m.SerialNumber)
	if l > 0 {
		n += 1 + l + sovCommon(uint64(l))
	}
	l = len(m.SubjectKeyIdentifier)
	if l > 0 {
		n += 1 + l + sovCommon(uint64(l))
	}
	l = len(m.Fingerprint)
	if l > 0 {
		n += 1 + l + sovCommon(uint64(l))
	}
	l = len(m.FingerprintAlgorithm)
	if l > 0 {
		n += 1 + l + sovCommon(uint64(l))
	}
	if m.Version != 0 {
		n += 1 + sovCommon(uint64(m.Version))
	}
	l = len(m.AuthorityKeyIdentifier)
	if l > 0 {
		n += 2 + l + sovCommon(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *CertificateDates) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.NotBefore != 0 {
		n += 1 + sovCommon(uint64(m.NotBefore))
	}
	if m.NotAfter != 0 {
		n += 1 + sovCommon(uint64(m.NotAfter))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *CertificateName) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.CommonName)
	if l > 0 {
		n += 1 + l + sovCommon(uint64(l))
	}
	if len(m.Country) > 0 {
		for _, s := range m.Country {
			l = len(s)
			n += 1 + l + sovCommon(uint64(l))
		}
	}
	if len(m.State) > 0 {
		for _, s := range m.State {
			l = len(s)
			n += 1 + l + sovCommon(uint64(l))
		}
	}
	if len(m.Locality) > 0 {
		for _, s := range m.Locality {
			l = len(s)
			n += 1 + l + sovCommon(uint64(l))
		}
	}
	if len(m.Organization) > 0 {
		for _, s := range m.Organization {
			l = len(s)
			n += 1 + l + sovCommon(uint64(l))
		}
	}
	if len(m.OrganizationalUnit) > 0 {
		for _, s := range m.OrganizationalUnit {
			l = len(s)
			n += 1 + l + sovCommon(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ZippedFile) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Contents)
	if l > 0 {
		n += 1 + l + sovCommon(uint64(l))
	}
	l = len(m.Checksum)
	if l > 0 {
		n += 1 + l + sovCommon(uint64(l))
	}
	l = len(m.RootDirectory)
	if l > 0 {
		n += 1 + l + sovCommon(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func sovCommon(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozCommon(x uint64) (n int) {
	return sovCommon(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *Metadata) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCommon
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Metadata: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Metadata: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Timestamp", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCommon
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCommon
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Timestamp == nil {
				m.Timestamp = &types.Timestamp{}
			}
			if err := m.Timestamp.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ClientId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCommon
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCommon
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ClientId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MessageId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCommon
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCommon
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.MessageId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CloudAccountId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCommon
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCommon
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CloudAccountId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCommon(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthCommon
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DirectoryMap) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCommon
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DirectoryMap: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DirectoryMap: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Directories", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCommon
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCommon
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Directories = append(m.Directories, &Directory{})
			if err := m.Directories[len(m.Directories)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCommon(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthCommon
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *File) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCommon
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: File: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: File: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCommon
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCommon
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Lines", wireType)
			}
			m.Lines = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Lines |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Mtime", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCommon
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCommon
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Mtime == nil {
				m.Mtime = &types.Timestamp{}
			}
			if err := m.Mtime.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Permissions", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCommon
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCommon
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Permissions = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Size_", wireType)
			}
			m.Size_ = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Size_ |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Contents", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthCommon
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthCommon
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Contents = append(m.Contents[:0], dAtA[iNdEx:postIndex]...)
			if m.Contents == nil {
				m.Contents = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCommon(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthCommon
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Directory) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCommon
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Directory: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Directory: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCommon
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCommon
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Mtime", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCommon
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCommon
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Mtime == nil {
				m.Mtime = &types.Timestamp{}
			}
			if err := m.Mtime.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Permissions", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCommon
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCommon
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Permissions = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Size_", wireType)
			}
			m.Size_ = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Size_ |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Files", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCommon
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCommon
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Files = append(m.Files, &File{})
			if err := m.Files[len(m.Files)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCommon(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthCommon
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SslCertificates) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCommon
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SslCertificates: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SslCertificates: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SslCerts", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCommon
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCommon
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SslCerts = append(m.SslCerts, &SslCertificate{})
			if err := m.SslCerts[len(m.SslCerts)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCommon(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthCommon
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SslCertificate) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCommon
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SslCertificate: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SslCertificate: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FileName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCommon
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCommon
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.FileName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Size_", wireType)
			}
			m.Size_ = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Size_ |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Mtime", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCommon
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCommon
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Mtime == nil {
				m.Mtime = &types.Timestamp{}
			}
			if err := m.Mtime.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Validity", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCommon
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCommon
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Validity == nil {
				m.Validity = &CertificateDates{}
			}
			if err := m.Validity.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Issuer", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCommon
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCommon
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Issuer == nil {
				m.Issuer = &CertificateName{}
			}
			if err := m.Issuer.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Subject", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCommon
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCommon
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Subject == nil {
				m.Subject = &CertificateName{}
			}
			if err := m.Subject.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SubjAltNames", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCommon
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCommon
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SubjAltNames = append(m.SubjAltNames, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OcspUrl", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCommon
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCommon
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.OcspUrl = append(m.OcspUrl, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PublicKeyAlgorithm", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCommon
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCommon
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PublicKeyAlgorithm = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SignatureAlgorithm", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCommon
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCommon
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SignatureAlgorithm = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SerialNumber", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCommon
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCommon
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SerialNumber = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 12:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SubjectKeyIdentifier", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCommon
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCommon
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SubjectKeyIdentifier = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 13:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Fingerprint", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCommon
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCommon
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Fingerprint = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 14:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FingerprintAlgorithm", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCommon
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCommon
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.FingerprintAlgorithm = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 15:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Version", wireType)
			}
			m.Version = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Version |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 16:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AuthorityKeyIdentifier", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCommon
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCommon
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AuthorityKeyIdentifier = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCommon(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthCommon
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CertificateDates) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCommon
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CertificateDates: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CertificateDates: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field NotBefore", wireType)
			}
			m.NotBefore = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.NotBefore |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field NotAfter", wireType)
			}
			m.NotAfter = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.NotAfter |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipCommon(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthCommon
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CertificateName) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCommon
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CertificateName: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CertificateName: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CommonName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCommon
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCommon
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CommonName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Country", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCommon
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCommon
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Country = append(m.Country, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field State", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCommon
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCommon
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.State = append(m.State, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Locality", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCommon
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCommon
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Locality = append(m.Locality, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Organization", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCommon
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCommon
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Organization = append(m.Organization, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OrganizationalUnit", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCommon
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCommon
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.OrganizationalUnit = append(m.OrganizationalUnit, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCommon(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthCommon
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ZippedFile) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCommon
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ZippedFile: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ZippedFile: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Contents", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthCommon
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthCommon
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Contents = append(m.Contents[:0], dAtA[iNdEx:postIndex]...)
			if m.Contents == nil {
				m.Contents = []byte{}
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Checksum", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCommon
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCommon
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Checksum = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RootDirectory", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCommon
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCommon
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RootDirectory = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCommon(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthCommon
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipCommon(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowCommon
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowCommon
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowCommon
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthCommon
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupCommon
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthCommon
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthCommon        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowCommon          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupCommon = fmt.Errorf("proto: unexpected end of group")
)
