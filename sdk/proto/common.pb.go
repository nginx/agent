// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: common.proto

package proto

import (
	fmt "fmt"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	types "github.com/gogo/protobuf/types"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// Action enum
type File_Action int32

const (
	// Default value
	File_unset File_Action = 0
	// No changes to the file
	File_unchanged File_Action = 1
	// New file
	File_add File_Action = 2
	// Updated file
	File_update File_Action = 3
	// File deleted
	File_delete File_Action = 4
)

var File_Action_name = map[int32]string{
	0: "unset",
	1: "unchanged",
	2: "add",
	3: "update",
	4: "delete",
}

var File_Action_value = map[string]int32{
	"unset":     0,
	"unchanged": 1,
	"add":       2,
	"update":    3,
	"delete":    4,
}

func (x File_Action) String() string {
	return proto.EnumName(File_Action_name, int32(x))
}

func (File_Action) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_555bd8c177793206, []int{2, 0}
}

// Represents the metadata for a message
type Metadata struct {
	// timestamp defines the time of message creation
	Timestamp *types.Timestamp `protobuf:"bytes,1,opt,name=timestamp,proto3" json:"timestamp"`
	// Client ID
	ClientId string `protobuf:"bytes,2,opt,name=client_id,json=clientId,proto3" json:"client_id"`
	// Message ID
	MessageId string `protobuf:"bytes,3,opt,name=message_id,json=messageId,proto3" json:"message_id"`
	// Cloud Account ID (e.g. AWS/Azure/GCP account ID)
	CloudAccountId       string   `protobuf:"bytes,4,opt,name=cloud_account_id,json=cloudAccountId,proto3" json:"cloud_account_id"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Metadata) Reset()         { *m = Metadata{} }
func (m *Metadata) String() string { return proto.CompactTextString(m) }
func (*Metadata) ProtoMessage()    {}
func (*Metadata) Descriptor() ([]byte, []int) {
	return fileDescriptor_555bd8c177793206, []int{0}
}
func (m *Metadata) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Metadata) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Metadata.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Metadata) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Metadata.Merge(m, src)
}
func (m *Metadata) XXX_Size() int {
	return m.Size()
}
func (m *Metadata) XXX_DiscardUnknown() {
	xxx_messageInfo_Metadata.DiscardUnknown(m)
}

var xxx_messageInfo_Metadata proto.InternalMessageInfo

func (m *Metadata) GetTimestamp() *types.Timestamp {
	if m != nil {
		return m.Timestamp
	}
	return nil
}

func (m *Metadata) GetClientId() string {
	if m != nil {
		return m.ClientId
	}
	return ""
}

func (m *Metadata) GetMessageId() string {
	if m != nil {
		return m.MessageId
	}
	return ""
}

func (m *Metadata) GetCloudAccountId() string {
	if m != nil {
		return m.CloudAccountId
	}
	return ""
}

// Represents a map of directories & files on the system
type DirectoryMap struct {
	// List of directories
	Directories          []*Directory `protobuf:"bytes,1,rep,name=directories,proto3" json:"directories,omitempty"`
	XXX_NoUnkeyedLiteral struct{}     `json:"-"`
	XXX_unrecognized     []byte       `json:"-"`
	XXX_sizecache        int32        `json:"-"`
}

func (m *DirectoryMap) Reset()         { *m = DirectoryMap{} }
func (m *DirectoryMap) String() string { return proto.CompactTextString(m) }
func (*DirectoryMap) ProtoMessage()    {}
func (*DirectoryMap) Descriptor() ([]byte, []int) {
	return fileDescriptor_555bd8c177793206, []int{1}
}
func (m *DirectoryMap) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DirectoryMap) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_DirectoryMap.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *DirectoryMap) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DirectoryMap.Merge(m, src)
}
func (m *DirectoryMap) XXX_Size() int {
	return m.Size()
}
func (m *DirectoryMap) XXX_DiscardUnknown() {
	xxx_messageInfo_DirectoryMap.DiscardUnknown(m)
}

var xxx_messageInfo_DirectoryMap proto.InternalMessageInfo

func (m *DirectoryMap) GetDirectories() []*Directory {
	if m != nil {
		return m.Directories
	}
	return nil
}

// Represents a file
type File struct {
	// Name of the file
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name"`
	// Number of lines in the file
	Lines int32 `protobuf:"varint,2,opt,name=lines,proto3" json:"lines"`
	// When the file was last modified
	Mtime *types.Timestamp `protobuf:"bytes,3,opt,name=mtime,proto3" json:"mtime"`
	// File permissions (e.g. 0644)
	Permissions string `protobuf:"bytes,4,opt,name=permissions,proto3" json:"permissions"`
	// Size of the file in bytes
	Size_ int64 `protobuf:"varint,5,opt,name=size,proto3" json:"size"`
	// The contents of the file in bytes
	Contents []byte `protobuf:"bytes,6,opt,name=contents,proto3" json:"contents"`
	// Action to take on the file (e.g. update, delete, etc)
	Action               File_Action `protobuf:"varint,7,opt,name=action,proto3,enum=f5.nginx.agent.sdk.File_Action" json:"action,omitempty"`
	XXX_NoUnkeyedLiteral struct{}    `json:"-"`
	XXX_unrecognized     []byte      `json:"-"`
	XXX_sizecache        int32       `json:"-"`
}

func (m *File) Reset()         { *m = File{} }
func (m *File) String() string { return proto.CompactTextString(m) }
func (*File) ProtoMessage()    {}
func (*File) Descriptor() ([]byte, []int) {
	return fileDescriptor_555bd8c177793206, []int{2}
}
func (m *File) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *File) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_File.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *File) XXX_Merge(src proto.Message) {
	xxx_messageInfo_File.Merge(m, src)
}
func (m *File) XXX_Size() int {
	return m.Size()
}
func (m *File) XXX_DiscardUnknown() {
	xxx_messageInfo_File.DiscardUnknown(m)
}

var xxx_messageInfo_File proto.InternalMessageInfo

func (m *File) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *File) GetLines() int32 {
	if m != nil {
		return m.Lines
	}
	return 0
}

func (m *File) GetMtime() *types.Timestamp {
	if m != nil {
		return m.Mtime
	}
	return nil
}

func (m *File) GetPermissions() string {
	if m != nil {
		return m.Permissions
	}
	return ""
}

func (m *File) GetSize_() int64 {
	if m != nil {
		return m.Size_
	}
	return 0
}

func (m *File) GetContents() []byte {
	if m != nil {
		return m.Contents
	}
	return nil
}

func (m *File) GetAction() File_Action {
	if m != nil {
		return m.Action
	}
	return File_unset
}

// Represents a directory
type Directory struct {
	// Name of the directory
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// When the directory was last modified
	Mtime *types.Timestamp `protobuf:"bytes,2,opt,name=mtime,proto3" json:"mtime,omitempty"`
	// Directory permissions (e.g. 0644)
	Permissions string `protobuf:"bytes,3,opt,name=permissions,proto3" json:"permissions,omitempty"`
	// Size of the directory in bytes
	Size_ int64 `protobuf:"varint,4,opt,name=size,proto3" json:"size,omitempty"`
	// List of files in the directory
	Files                []*File  `protobuf:"bytes,5,rep,name=files,proto3" json:"files,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Directory) Reset()         { *m = Directory{} }
func (m *Directory) String() string { return proto.CompactTextString(m) }
func (*Directory) ProtoMessage()    {}
func (*Directory) Descriptor() ([]byte, []int) {
	return fileDescriptor_555bd8c177793206, []int{3}
}
func (m *Directory) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Directory) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Directory.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Directory) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Directory.Merge(m, src)
}
func (m *Directory) XXX_Size() int {
	return m.Size()
}
func (m *Directory) XXX_DiscardUnknown() {
	xxx_messageInfo_Directory.DiscardUnknown(m)
}

var xxx_messageInfo_Directory proto.InternalMessageInfo

func (m *Directory) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *Directory) GetMtime() *types.Timestamp {
	if m != nil {
		return m.Mtime
	}
	return nil
}

func (m *Directory) GetPermissions() string {
	if m != nil {
		return m.Permissions
	}
	return ""
}

func (m *Directory) GetSize_() int64 {
	if m != nil {
		return m.Size_
	}
	return 0
}

func (m *Directory) GetFiles() []*File {
	if m != nil {
		return m.Files
	}
	return nil
}

// Represents a list of SSL certificates files
type SslCertificates struct {
	// List of SSL certificates
	SslCerts             []*SslCertificate `protobuf:"bytes,1,rep,name=ssl_certs,json=sslCerts,proto3" json:"ssl_certs,omitempty"`
	XXX_NoUnkeyedLiteral struct{}          `json:"-"`
	XXX_unrecognized     []byte            `json:"-"`
	XXX_sizecache        int32             `json:"-"`
}

func (m *SslCertificates) Reset()         { *m = SslCertificates{} }
func (m *SslCertificates) String() string { return proto.CompactTextString(m) }
func (*SslCertificates) ProtoMessage()    {}
func (*SslCertificates) Descriptor() ([]byte, []int) {
	return fileDescriptor_555bd8c177793206, []int{4}
}
func (m *SslCertificates) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SslCertificates) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SslCertificates.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SslCertificates) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SslCertificates.Merge(m, src)
}
func (m *SslCertificates) XXX_Size() int {
	return m.Size()
}
func (m *SslCertificates) XXX_DiscardUnknown() {
	xxx_messageInfo_SslCertificates.DiscardUnknown(m)
}

var xxx_messageInfo_SslCertificates proto.InternalMessageInfo

func (m *SslCertificates) GetSslCerts() []*SslCertificate {
	if m != nil {
		return m.SslCerts
	}
	return nil
}

// Represents a SSL certificate file
type SslCertificate struct {
	// Name of the file
	FileName string `protobuf:"bytes,1,opt,name=file_name,json=fileName,proto3" json:"fileName"`
	// Size of the file in bytes
	Size_ int64 `protobuf:"varint,2,opt,name=size,proto3" json:"size"`
	// When the file was last modified
	Mtime *types.Timestamp `protobuf:"bytes,3,opt,name=mtime,proto3" json:"mtime"`
	// A time when the certificate is valid
	Validity *CertificateDates `protobuf:"bytes,4,opt,name=validity,proto3" json:"validity"`
	// This field contains the distinguished name (DN) of the certificate issuer
	Issuer *CertificateName `protobuf:"bytes,5,opt,name=issuer,proto3" json:"issuer"`
	// This dedicated object name associated with the public key, for which the certificate is issued
	Subject *CertificateName `protobuf:"bytes,6,opt,name=subject,proto3" json:"subject"`
	// Subject alternative names that allows users to specify additional host names for the SSL certificate
	SubjAltNames []string `protobuf:"bytes,7,rep,name=subj_alt_names,json=subjAltNames,proto3" json:"subjectAltName"`
	// Online Certificate Status Protocol URL
	OcspUrl []string `protobuf:"bytes,8,rep,name=ocsp_url,json=ocspUrl,proto3" json:"ocspURL"`
	// Public key encryption algorithm (e.g. RSA)
	PublicKeyAlgorithm string `protobuf:"bytes,9,opt,name=public_key_algorithm,json=publicKeyAlgorithm,proto3" json:"publicKeyAlgorithm"`
	// The signature algorithm contain a hashing algorithm and an encryption algorithm (e.g. sha256RSA where sha256 is the hashing algorithm and RSA is the encryption algorithm)
	SignatureAlgorithm string `protobuf:"bytes,10,opt,name=signature_algorithm,json=signatureAlgorithm,proto3" json:"signatureAlgorithm"`
	// Used to uniquely identify the certificate within a CA's systems
	SerialNumber string `protobuf:"bytes,11,opt,name=serial_number,json=serialNumber,proto3" json:"serialNumber"`
	// The subject key identifier extension provides a means of identifying certificates that contain a particular public key
	SubjectKeyIdentifier string `protobuf:"bytes,12,opt,name=subject_key_identifier,json=subjectKeyIdentifier,proto3" json:"subjectKeyIdentifier"`
	// SSL certificate fingerprint
	Fingerprint string `protobuf:"bytes,13,opt,name=fingerprint,proto3" json:"fingerprint"`
	// SSL certificate fingerprint algorithm
	FingerprintAlgorithm string `protobuf:"bytes,14,opt,name=fingerprint_algorithm,json=fingerprintAlgorithm,proto3" json:"fingerprintAlgorithm"`
	// There are three versions of certificates: 1, 2 and 3, numbered as 0, 1 and 2. Version 1 supports only the basic fields; Version 2 adds unique identifiers, which represent two additional fields; Version 3 adds extensions.
	Version int64 `protobuf:"varint,15,opt,name=version,proto3" json:"version"`
	// The authority key identifier extension provides a means of identifying the Public Key corresponding to the Private Key used to sign a certificate
	AuthorityKeyIdentifier string   `protobuf:"bytes,16,opt,name=authority_key_identifier,json=authorityKeyIdentifier,proto3" json:"authorityKeyIdentifier"`
	XXX_NoUnkeyedLiteral   struct{} `json:"-"`
	XXX_unrecognized       []byte   `json:"-"`
	XXX_sizecache          int32    `json:"-"`
}

func (m *SslCertificate) Reset()         { *m = SslCertificate{} }
func (m *SslCertificate) String() string { return proto.CompactTextString(m) }
func (*SslCertificate) ProtoMessage()    {}
func (*SslCertificate) Descriptor() ([]byte, []int) {
	return fileDescriptor_555bd8c177793206, []int{5}
}
func (m *SslCertificate) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SslCertificate) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SslCertificate.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SslCertificate) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SslCertificate.Merge(m, src)
}
func (m *SslCertificate) XXX_Size() int {
	return m.Size()
}
func (m *SslCertificate) XXX_DiscardUnknown() {
	xxx_messageInfo_SslCertificate.DiscardUnknown(m)
}

var xxx_messageInfo_SslCertificate proto.InternalMessageInfo

func (m *SslCertificate) GetFileName() string {
	if m != nil {
		return m.FileName
	}
	return ""
}

func (m *SslCertificate) GetSize_() int64 {
	if m != nil {
		return m.Size_
	}
	return 0
}

func (m *SslCertificate) GetMtime() *types.Timestamp {
	if m != nil {
		return m.Mtime
	}
	return nil
}

func (m *SslCertificate) GetValidity() *CertificateDates {
	if m != nil {
		return m.Validity
	}
	return nil
}

func (m *SslCertificate) GetIssuer() *CertificateName {
	if m != nil {
		return m.Issuer
	}
	return nil
}

func (m *SslCertificate) GetSubject() *CertificateName {
	if m != nil {
		return m.Subject
	}
	return nil
}

func (m *SslCertificate) GetSubjAltNames() []string {
	if m != nil {
		return m.SubjAltNames
	}
	return nil
}

func (m *SslCertificate) GetOcspUrl() []string {
	if m != nil {
		return m.OcspUrl
	}
	return nil
}

func (m *SslCertificate) GetPublicKeyAlgorithm() string {
	if m != nil {
		return m.PublicKeyAlgorithm
	}
	return ""
}

func (m *SslCertificate) GetSignatureAlgorithm() string {
	if m != nil {
		return m.SignatureAlgorithm
	}
	return ""
}

func (m *SslCertificate) GetSerialNumber() string {
	if m != nil {
		return m.SerialNumber
	}
	return ""
}

func (m *SslCertificate) GetSubjectKeyIdentifier() string {
	if m != nil {
		return m.SubjectKeyIdentifier
	}
	return ""
}

func (m *SslCertificate) GetFingerprint() string {
	if m != nil {
		return m.Fingerprint
	}
	return ""
}

func (m *SslCertificate) GetFingerprintAlgorithm() string {
	if m != nil {
		return m.FingerprintAlgorithm
	}
	return ""
}

func (m *SslCertificate) GetVersion() int64 {
	if m != nil {
		return m.Version
	}
	return 0
}

func (m *SslCertificate) GetAuthorityKeyIdentifier() string {
	if m != nil {
		return m.AuthorityKeyIdentifier
	}
	return ""
}

// Represents the dates for which a certificate is valid
type CertificateDates struct {
	// The start date that for when the certificate is valid
	NotBefore int64 `protobuf:"varint,1,opt,name=not_before,json=notBefore,proto3" json:"notBefore"`
	// The end date that for when the certificate is valid
	NotAfter             int64    `protobuf:"varint,2,opt,name=not_after,json=notAfter,proto3" json:"notAfter"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *CertificateDates) Reset()         { *m = CertificateDates{} }
func (m *CertificateDates) String() string { return proto.CompactTextString(m) }
func (*CertificateDates) ProtoMessage()    {}
func (*CertificateDates) Descriptor() ([]byte, []int) {
	return fileDescriptor_555bd8c177793206, []int{6}
}
func (m *CertificateDates) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CertificateDates) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CertificateDates.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CertificateDates) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CertificateDates.Merge(m, src)
}
func (m *CertificateDates) XXX_Size() int {
	return m.Size()
}
func (m *CertificateDates) XXX_DiscardUnknown() {
	xxx_messageInfo_CertificateDates.DiscardUnknown(m)
}

var xxx_messageInfo_CertificateDates proto.InternalMessageInfo

func (m *CertificateDates) GetNotBefore() int64 {
	if m != nil {
		return m.NotBefore
	}
	return 0
}

func (m *CertificateDates) GetNotAfter() int64 {
	if m != nil {
		return m.NotAfter
	}
	return 0
}

// Represents a Distinguished Name (DN)
type CertificateName struct {
	// The fully qualified domain name (e.g. www.example.com)
	CommonName string `protobuf:"bytes,1,opt,name=common_name,json=commonName,proto3" json:"commonName"`
	// Country
	Country []string `protobuf:"bytes,2,rep,name=country,proto3" json:"country"`
	// State
	State []string `protobuf:"bytes,3,rep,name=state,proto3" json:"state"`
	// Locality
	Locality []string `protobuf:"bytes,4,rep,name=locality,proto3" json:"locality"`
	// Organization
	Organization []string `protobuf:"bytes,5,rep,name=organization,proto3" json:"organization"`
	// Organizational Unit
	OrganizationalUnit   []string `protobuf:"bytes,6,rep,name=organizational_unit,json=organizationalUnit,proto3" json:"organizationalUnit"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *CertificateName) Reset()         { *m = CertificateName{} }
func (m *CertificateName) String() string { return proto.CompactTextString(m) }
func (*CertificateName) ProtoMessage()    {}
func (*CertificateName) Descriptor() ([]byte, []int) {
	return fileDescriptor_555bd8c177793206, []int{7}
}
func (m *CertificateName) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CertificateName) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CertificateName.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CertificateName) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CertificateName.Merge(m, src)
}
func (m *CertificateName) XXX_Size() int {
	return m.Size()
}
func (m *CertificateName) XXX_DiscardUnknown() {
	xxx_messageInfo_CertificateName.DiscardUnknown(m)
}

var xxx_messageInfo_CertificateName proto.InternalMessageInfo

func (m *CertificateName) GetCommonName() string {
	if m != nil {
		return m.CommonName
	}
	return ""
}

func (m *CertificateName) GetCountry() []string {
	if m != nil {
		return m.Country
	}
	return nil
}

func (m *CertificateName) GetState() []string {
	if m != nil {
		return m.State
	}
	return nil
}

func (m *CertificateName) GetLocality() []string {
	if m != nil {
		return m.Locality
	}
	return nil
}

func (m *CertificateName) GetOrganization() []string {
	if m != nil {
		return m.Organization
	}
	return nil
}

func (m *CertificateName) GetOrganizationalUnit() []string {
	if m != nil {
		return m.OrganizationalUnit
	}
	return nil
}

// Represents a zipped file
type ZippedFile struct {
	// The contents of the file in bytes
	Contents []byte `protobuf:"bytes,1,opt,name=contents,proto3" json:"contents"`
	// File checksum
	Checksum string `protobuf:"bytes,2,opt,name=checksum,proto3" json:"checksum"`
	// The directory where the file is located
	RootDirectory        string   `protobuf:"bytes,3,opt,name=root_directory,json=rootDirectory,proto3" json:"root_directory"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ZippedFile) Reset()         { *m = ZippedFile{} }
func (m *ZippedFile) String() string { return proto.CompactTextString(m) }
func (*ZippedFile) ProtoMessage()    {}
func (*ZippedFile) Descriptor() ([]byte, []int) {
	return fileDescriptor_555bd8c177793206, []int{8}
}
func (m *ZippedFile) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ZippedFile) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ZippedFile.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ZippedFile) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ZippedFile.Merge(m, src)
}
func (m *ZippedFile) XXX_Size() int {
	return m.Size()
}
func (m *ZippedFile) XXX_DiscardUnknown() {
	xxx_messageInfo_ZippedFile.DiscardUnknown(m)
}

var xxx_messageInfo_ZippedFile proto.InternalMessageInfo

func (m *ZippedFile) GetContents() []byte {
	if m != nil {
		return m.Contents
	}
	return nil
}

func (m *ZippedFile) GetChecksum() string {
	if m != nil {
		return m.Checksum
	}
	return ""
}

func (m *ZippedFile) GetRootDirectory() string {
	if m != nil {
		return m.RootDirectory
	}
	return ""
}

func init() {
	proto.RegisterEnum("f5.nginx.agent.sdk.File_Action", File_Action_name, File_Action_value)
	proto.RegisterType((*Metadata)(nil), "f5.nginx.agent.sdk.Metadata")
	proto.RegisterType((*DirectoryMap)(nil), "f5.nginx.agent.sdk.DirectoryMap")
	proto.RegisterType((*File)(nil), "f5.nginx.agent.sdk.File")
	proto.RegisterType((*Directory)(nil), "f5.nginx.agent.sdk.Directory")
	proto.RegisterType((*SslCertificates)(nil), "f5.nginx.agent.sdk.SslCertificates")
	proto.RegisterType((*SslCertificate)(nil), "f5.nginx.agent.sdk.SslCertificate")
	proto.RegisterType((*CertificateDates)(nil), "f5.nginx.agent.sdk.CertificateDates")
	proto.RegisterType((*CertificateName)(nil), "f5.nginx.agent.sdk.CertificateName")
	proto.RegisterType((*ZippedFile)(nil), "f5.nginx.agent.sdk.ZippedFile")
}

func init() { proto.RegisterFile("common.proto", fileDescriptor_555bd8c177793206) }

var fileDescriptor_555bd8c177793206 = []byte{
	// 1178 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xa4, 0x56, 0xcf, 0x8e, 0xdb, 0x36,
	0x13, 0xff, 0x64, 0xaf, 0x77, 0xad, 0xb1, 0xd7, 0x6b, 0xf0, 0x4b, 0x03, 0x61, 0xd1, 0x46, 0x86,
	0xfb, 0x07, 0x4e, 0xd1, 0xda, 0xed, 0xb6, 0x41, 0x5a, 0x04, 0x68, 0xb0, 0x4e, 0xd0, 0x74, 0x9b,
	0x66, 0x0b, 0xb0, 0xc9, 0x25, 0x17, 0x83, 0x96, 0x68, 0x2d, 0xbb, 0x32, 0x69, 0x88, 0x54, 0x50,
	0xe7, 0x55, 0xfa, 0x18, 0x3d, 0xf4, 0x15, 0x7a, 0xec, 0x13, 0x08, 0x45, 0x8e, 0x3a, 0xf4, 0xd8,
	0x4b, 0x2f, 0x05, 0x49, 0x49, 0x96, 0xb3, 0x4e, 0x52, 0xa0, 0x17, 0x71, 0xe6, 0x37, 0x33, 0x14,
	0xf9, 0xe3, 0x70, 0x86, 0xd0, 0x0d, 0xc4, 0x72, 0x29, 0xf8, 0x78, 0x95, 0x08, 0x25, 0x10, 0x5a,
	0xdc, 0x1a, 0xf3, 0x88, 0xf1, 0x9f, 0xc6, 0x24, 0xa2, 0x5c, 0x8d, 0x65, 0x78, 0x79, 0x0c, 0x91,
	0x88, 0x84, 0xb5, 0x1f, 0xfb, 0x91, 0x10, 0x51, 0x4c, 0x27, 0x46, 0x9b, 0xa7, 0x8b, 0x89, 0x62,
	0x4b, 0x2a, 0x15, 0x59, 0xae, 0xac, 0xc3, 0xf0, 0x4f, 0x07, 0xda, 0x8f, 0xa8, 0x22, 0x21, 0x51,
	0x04, 0x3d, 0x00, 0xb7, 0xb2, 0x7b, 0xce, 0xc0, 0x19, 0x75, 0x4e, 0x8e, 0xc7, 0x76, 0x86, 0x71,
	0x39, 0xc3, 0xf8, 0x71, 0xe9, 0x31, 0x3d, 0xcc, 0x33, 0x7f, 0x13, 0x80, 0x37, 0x22, 0xfa, 0x10,
	0xdc, 0x20, 0x66, 0x94, 0xab, 0x19, 0x0b, 0xbd, 0xc6, 0xc0, 0x19, 0xb9, 0xd6, 0xb9, 0x02, 0x71,
	0xdb, 0x8a, 0x67, 0x21, 0xfa, 0x18, 0x60, 0x49, 0xa5, 0x24, 0x11, 0xd5, 0xce, 0x4d, 0xe3, 0xdc,
	0xcb, 0x33, 0xbf, 0x86, 0x62, 0xb7, 0x90, 0xcf, 0x42, 0xf4, 0x15, 0xf4, 0x83, 0x58, 0xa4, 0xe1,
	0x8c, 0x04, 0x81, 0x48, 0xed, 0x1f, 0xf6, 0x4c, 0xd0, 0xb5, 0x3c, 0xf3, 0xaf, 0xd8, 0x70, 0xcf,
	0x20, 0xa7, 0x16, 0x38, 0x0b, 0x87, 0xdf, 0x43, 0xf7, 0x3e, 0x4b, 0x68, 0xa0, 0x44, 0xb2, 0x7e,
	0x44, 0x56, 0xe8, 0x2e, 0x74, 0xc2, 0x42, 0x67, 0x54, 0x7a, 0xce, 0xa0, 0x39, 0xea, 0x9c, 0xbc,
	0x33, 0xbe, 0xca, 0xeb, 0xb8, 0x0a, 0xc3, 0xf5, 0x88, 0xe1, 0xdf, 0x0d, 0xd8, 0xfb, 0x9a, 0xc5,
	0x14, 0xbd, 0x0d, 0x7b, 0x9c, 0x2c, 0xa9, 0x21, 0xce, 0x9d, 0xb6, 0xf3, 0xcc, 0x37, 0x3a, 0x36,
	0x5f, 0xe4, 0x43, 0x2b, 0x66, 0x9c, 0x4a, 0x43, 0x47, 0x6b, 0xea, 0xe6, 0x99, 0x6f, 0x01, 0x6c,
	0x07, 0x74, 0x07, 0x5a, 0x4b, 0xcd, 0xa0, 0xa1, 0xe0, 0xf5, 0xc4, 0x9b, 0x60, 0xe3, 0x8c, 0xed,
	0x80, 0x3e, 0x85, 0xce, 0x8a, 0x26, 0x4b, 0x26, 0x25, 0x13, 0x5c, 0x16, 0x84, 0x1c, 0xe5, 0x99,
	0x5f, 0x87, 0x71, 0x5d, 0xd1, 0xcb, 0x95, 0xec, 0x39, 0xf5, 0x5a, 0x03, 0x67, 0xd4, 0xb4, 0xcb,
	0xd5, 0x3a, 0x36, 0x5f, 0x34, 0x82, 0x76, 0x20, 0xb8, 0xa2, 0x5c, 0x49, 0x6f, 0x7f, 0xe0, 0x8c,
	0xba, 0xd3, 0x6e, 0x9e, 0xf9, 0x15, 0x86, 0x2b, 0x09, 0xdd, 0x86, 0x7d, 0x12, 0x28, 0x26, 0xb8,
	0x77, 0x30, 0x70, 0x46, 0xbd, 0x13, 0x7f, 0x17, 0x77, 0x9a, 0xa0, 0xf1, 0xa9, 0x71, 0xc3, 0x85,
	0xfb, 0xf0, 0x1e, 0xec, 0x5b, 0x04, 0xb9, 0xd0, 0x4a, 0xb9, 0xa4, 0xaa, 0xff, 0x3f, 0x74, 0x08,
	0x6e, 0xca, 0x83, 0x0b, 0xc2, 0x23, 0x1a, 0xf6, 0x1d, 0x74, 0x00, 0x4d, 0x12, 0x86, 0xfd, 0x06,
	0x02, 0xd8, 0x4f, 0x57, 0x21, 0x51, 0xb4, 0xdf, 0xd4, 0x72, 0x48, 0x63, 0xaa, 0x68, 0x7f, 0x6f,
	0xf8, 0xab, 0x03, 0x6e, 0x75, 0x30, 0x08, 0xd5, 0x8f, 0xa0, 0x20, 0xfe, 0x93, 0x92, 0xd7, 0xc6,
	0x9b, 0x78, 0x2d, 0xc9, 0x1c, 0x6c, 0x93, 0x69, 0x52, 0x72, 0x9b, 0x3b, 0x54, 0x70, 0xa7, 0x79,
	0x6e, 0x16, 0x8c, 0x8d, 0xa1, 0xb5, 0x60, 0x31, 0x95, 0x5e, 0xcb, 0xa4, 0x90, 0xf7, 0x2a, 0x1a,
	0xb0, 0x75, 0x1b, 0x62, 0x38, 0xfa, 0x41, 0xc6, 0xf7, 0x68, 0xa2, 0xd8, 0x82, 0x05, 0x44, 0x51,
	0x89, 0xee, 0x82, 0x2b, 0x65, 0x3c, 0x0b, 0x68, 0xa2, 0xca, 0x4c, 0x1c, 0xee, 0x9a, 0x66, 0x3b,
	0x0e, 0xb7, 0xa5, 0xd5, 0xe5, 0xf0, 0xaf, 0x03, 0xe8, 0x6d, 0x1b, 0xd1, 0x4d, 0x70, 0xf5, 0xff,
	0x66, 0xb5, 0xd4, 0x34, 0x27, 0xa9, 0xc1, 0x73, 0x9d, 0x9e, 0x95, 0x54, 0x65, 0x44, 0x63, 0x67,
	0x46, 0xfc, 0xa7, 0xfc, 0x3c, 0x87, 0xf6, 0x33, 0x12, 0xb3, 0x90, 0xa9, 0xb5, 0x21, 0xad, 0x73,
	0xf2, 0xde, 0xae, 0x8d, 0xd5, 0x16, 0x7e, 0x5f, 0x33, 0x62, 0x97, 0x5a, 0x46, 0xe2, 0x4a, 0x42,
	0x0f, 0x60, 0x9f, 0x49, 0x99, 0xd2, 0xc4, 0xa4, 0x6f, 0xe7, 0xe4, 0xdd, 0x37, 0xcc, 0xa6, 0xf7,
	0x37, 0x85, 0x3c, 0xf3, 0x8b, 0x30, 0x5c, 0x8c, 0xe8, 0x5b, 0x38, 0x90, 0xe9, 0xfc, 0x47, 0x1a,
	0x28, 0x93, 0xe6, 0xff, 0x72, 0xa6, 0x4e, 0x9e, 0xf9, 0x65, 0x1c, 0x2e, 0x05, 0xf4, 0x05, 0xf4,
	0xb4, 0x38, 0x23, 0xb1, 0x32, 0x74, 0x4b, 0xef, 0x60, 0xd0, 0x1c, 0xb9, 0x53, 0x94, 0x67, 0x7e,
	0xaf, 0x70, 0x3a, 0x8d, 0x95, 0x61, 0xbd, 0xab, 0xf5, 0x42, 0x91, 0xe8, 0x03, 0x68, 0x8b, 0x40,
	0xae, 0x66, 0x69, 0x12, 0x7b, 0x6d, 0x13, 0x63, 0xfe, 0xa0, 0xb1, 0x27, 0xf8, 0x3b, 0x6c, 0x85,
	0x24, 0x46, 0xdf, 0xc0, 0xb5, 0x55, 0x3a, 0x8f, 0x59, 0x30, 0xbb, 0xa4, 0xeb, 0x19, 0x89, 0x23,
	0x91, 0x30, 0x75, 0xb1, 0xf4, 0x5c, 0x73, 0xae, 0xd7, 0xf3, 0xcc, 0x47, 0xd6, 0xfe, 0x90, 0xae,
	0x4f, 0x4b, 0x2b, 0xde, 0x81, 0xa1, 0x07, 0xf0, 0x7f, 0xc9, 0x22, 0x4e, 0x54, 0x9a, 0xd0, 0xda,
	0x44, 0xb0, 0x99, 0xa8, 0x32, 0xd7, 0x26, 0xba, 0x8a, 0xa1, 0x5b, 0x70, 0x28, 0x69, 0xc2, 0x48,
	0x3c, 0xe3, 0xe9, 0x72, 0x4e, 0x13, 0xaf, 0x63, 0xa6, 0xe8, 0xe7, 0x99, 0xdf, 0xb5, 0x86, 0x73,
	0x83, 0xe3, 0x2d, 0x0d, 0x9d, 0xc3, 0xf5, 0x82, 0x11, 0xb3, 0x15, 0x16, 0x52, 0xae, 0x19, 0xa6,
	0x89, 0xd7, 0x35, 0xf1, 0x5e, 0x9e, 0xf9, 0xd7, 0x0a, 0x8f, 0x87, 0x74, 0x7d, 0x56, 0xd9, 0xf1,
	0x4e, 0x54, 0x17, 0xc0, 0x05, 0xe3, 0x11, 0x4d, 0x56, 0x09, 0xe3, 0xca, 0x3b, 0xdc, 0x14, 0xc0,
	0x1a, 0x8c, 0xeb, 0x0a, 0x7a, 0x04, 0x6f, 0xd5, 0xd4, 0x1a, 0x09, 0xbd, 0xcd, 0x0a, 0x6a, 0x0e,
	0x1b, 0x1a, 0x76, 0xa2, 0xe8, 0x7d, 0x38, 0x78, 0x46, 0x13, 0x5d, 0x1f, 0xbc, 0x23, 0x73, 0x81,
	0xcc, 0x11, 0x16, 0x10, 0x2e, 0x05, 0xf4, 0x18, 0x3c, 0x92, 0xaa, 0x0b, 0x1d, 0xb4, 0x7e, 0x79,
	0xeb, 0x7d, 0xf3, 0xe3, 0xe3, 0x3c, 0xf3, 0xaf, 0x57, 0x3e, 0xdb, 0x9b, 0x7f, 0x05, 0x3e, 0xbc,
	0x84, 0xfe, 0xcb, 0x77, 0x07, 0x7d, 0x04, 0xc0, 0x85, 0x9a, 0xcd, 0xe9, 0x42, 0x24, 0xf6, 0xea,
	0x37, 0x6d, 0x17, 0xe6, 0x42, 0x4d, 0x0d, 0x88, 0x37, 0xa2, 0xae, 0x13, 0xda, 0x9b, 0x2c, 0x14,
	0x4d, 0x8a, 0x0a, 0x60, 0x2e, 0x1f, 0x17, 0xea, 0x54, 0x63, 0xb8, 0x92, 0x86, 0xbf, 0x34, 0xe0,
	0xe8, 0xa5, 0x1b, 0x81, 0x26, 0xd0, 0xb1, 0x0f, 0x93, 0x7a, 0xa1, 0x31, 0x6d, 0xdc, 0xc2, 0x26,
	0xe9, 0x6b, 0xb2, 0xa6, 0xcb, 0xb4, 0xe4, 0x64, 0xed, 0x35, 0x36, 0x19, 0x5f, 0x40, 0xb8, 0x14,
	0x74, 0xdb, 0x94, 0x8a, 0x28, 0x5d, 0x75, 0xb4, 0x93, 0xa9, 0x2c, 0x06, 0xc0, 0x76, 0xd0, 0x8d,
	0x2a, 0x16, 0x01, 0x89, 0x6d, 0x65, 0x69, 0x96, 0xe5, 0xad, 0xc4, 0x70, 0x25, 0xa1, 0xcf, 0xa1,
	0x2b, 0x92, 0x88, 0x70, 0xf6, 0x9c, 0x98, 0x76, 0xd5, 0x32, 0xde, 0x26, 0x51, 0xeb, 0x38, 0xde,
	0xd2, 0xf4, 0x45, 0xa9, 0xeb, 0x24, 0x9e, 0xa5, 0x9c, 0xe9, 0x62, 0xd1, 0x2c, 0x2f, 0xca, 0xb6,
	0xf9, 0x09, 0x67, 0x0a, 0xef, 0xc0, 0x86, 0x3f, 0x3b, 0x00, 0x4f, 0xd9, 0x6a, 0x45, 0x43, 0xf3,
	0x5a, 0xa8, 0x37, 0x58, 0xe7, 0xb5, 0x0d, 0x56, 0x7b, 0x5e, 0xd0, 0xe0, 0x52, 0xa6, 0xcb, 0xe2,
	0x2d, 0x65, 0x3d, 0x0b, 0x0c, 0x57, 0x12, 0xfa, 0x12, 0x7a, 0x89, 0x10, 0x6a, 0x56, 0x3e, 0x4f,
	0xd6, 0xc5, 0x73, 0xca, 0x14, 0xa0, 0x6d, 0x0b, 0x3e, 0xd4, 0x7a, 0xd5, 0x39, 0xa7, 0xb7, 0x7f,
	0x7b, 0x71, 0xc3, 0xf9, 0xfd, 0xc5, 0x0d, 0xe7, 0x8f, 0x17, 0x37, 0x9c, 0xa7, 0x37, 0x23, 0xa6,
	0x2e, 0xd2, 0xf9, 0x38, 0x10, 0xcb, 0x89, 0xa9, 0x85, 0x13, 0x53, 0x0b, 0x27, 0x32, 0xbc, 0x9c,
	0x3c, 0x3b, 0xb1, 0xaf, 0xc9, 0x3b, 0xb6, 0xf0, 0xef, 0x9b, 0xe1, 0xb3, 0x7f, 0x02, 0x00, 0x00,
	0xff, 0xff, 0x95, 0x41, 0xf8, 0x87, 0x98, 0x0a, 0x00, 0x00,
}

func (m *Metadata) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Metadata) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Metadata) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.CloudAccountId) > 0 {
		i -= len(m.CloudAccountId)
		copy(dAtA[i:], m.CloudAccountId)
		i = encodeVarintCommon(dAtA, i, uint64(len(m.CloudAccountId)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.MessageId) > 0 {
		i -= len(m.MessageId)
		copy(dAtA[i:], m.MessageId)
		i = encodeVarintCommon(dAtA, i, uint64(len(m.MessageId)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.ClientId) > 0 {
		i -= len(m.ClientId)
		copy(dAtA[i:], m.ClientId)
		i = encodeVarintCommon(dAtA, i, uint64(len(m.ClientId)))
		i--
		dAtA[i] = 0x12
	}
	if m.Timestamp != nil {
		{
			size, err := m.Timestamp.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintCommon(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *DirectoryMap) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DirectoryMap) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *DirectoryMap) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Directories) > 0 {
		for iNdEx := len(m.Directories) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Directories[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintCommon(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *File) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *File) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *File) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Action != 0 {
		i = encodeVarintCommon(dAtA, i, uint64(m.Action))
		i--
		dAtA[i] = 0x38
	}
	if len(m.Contents) > 0 {
		i -= len(m.Contents)
		copy(dAtA[i:], m.Contents)
		i = encodeVarintCommon(dAtA, i, uint64(len(m.Contents)))
		i--
		dAtA[i] = 0x32
	}
	if m.Size_ != 0 {
		i = encodeVarintCommon(dAtA, i, uint64(m.Size_))
		i--
		dAtA[i] = 0x28
	}
	if len(m.Permissions) > 0 {
		i -= len(m.Permissions)
		copy(dAtA[i:], m.Permissions)
		i = encodeVarintCommon(dAtA, i, uint64(len(m.Permissions)))
		i--
		dAtA[i] = 0x22
	}
	if m.Mtime != nil {
		{
			size, err := m.Mtime.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintCommon(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if m.Lines != 0 {
		i = encodeVarintCommon(dAtA, i, uint64(m.Lines))
		i--
		dAtA[i] = 0x10
	}
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintCommon(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *Directory) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Directory) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Directory) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Files) > 0 {
		for iNdEx := len(m.Files) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Files[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintCommon(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x2a
		}
	}
	if m.Size_ != 0 {
		i = encodeVarintCommon(dAtA, i, uint64(m.Size_))
		i--
		dAtA[i] = 0x20
	}
	if len(m.Permissions) > 0 {
		i -= len(m.Permissions)
		copy(dAtA[i:], m.Permissions)
		i = encodeVarintCommon(dAtA, i, uint64(len(m.Permissions)))
		i--
		dAtA[i] = 0x1a
	}
	if m.Mtime != nil {
		{
			size, err := m.Mtime.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintCommon(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintCommon(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *SslCertificates) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SslCertificates) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SslCertificates) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.SslCerts) > 0 {
		for iNdEx := len(m.SslCerts) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.SslCerts[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintCommon(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *SslCertificate) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SslCertificate) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SslCertificate) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.AuthorityKeyIdentifier) > 0 {
		i -= len(m.AuthorityKeyIdentifier)
		copy(dAtA[i:], m.AuthorityKeyIdentifier)
		i = encodeVarintCommon(dAtA, i, uint64(len(m.AuthorityKeyIdentifier)))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x82
	}
	if m.Version != 0 {
		i = encodeVarintCommon(dAtA, i, uint64(m.Version))
		i--
		dAtA[i] = 0x78
	}
	if len(m.FingerprintAlgorithm) > 0 {
		i -= len(m.FingerprintAlgorithm)
		copy(dAtA[i:], m.FingerprintAlgorithm)
		i = encodeVarintCommon(dAtA, i, uint64(len(m.FingerprintAlgorithm)))
		i--
		dAtA[i] = 0x72
	}
	if len(m.Fingerprint) > 0 {
		i -= len(m.Fingerprint)
		copy(dAtA[i:], m.Fingerprint)
		i = encodeVarintCommon(dAtA, i, uint64(len(m.Fingerprint)))
		i--
		dAtA[i] = 0x6a
	}
	if len(m.SubjectKeyIdentifier) > 0 {
		i -= len(m.SubjectKeyIdentifier)
		copy(dAtA[i:], m.SubjectKeyIdentifier)
		i = encodeVarintCommon(dAtA, i, uint64(len(m.SubjectKeyIdentifier)))
		i--
		dAtA[i] = 0x62
	}
	if len(m.SerialNumber) > 0 {
		i -= len(m.SerialNumber)
		copy(dAtA[i:], m.SerialNumber)
		i = encodeVarintCommon(dAtA, i, uint64(len(m.SerialNumber)))
		i--
		dAtA[i] = 0x5a
	}
	if len(m.SignatureAlgorithm) > 0 {
		i -= len(m.SignatureAlgorithm)
		copy(dAtA[i:], m.SignatureAlgorithm)
		i = encodeVarintCommon(dAtA, i, uint64(len(m.SignatureAlgorithm)))
		i--
		dAtA[i] = 0x52
	}
	if len(m.PublicKeyAlgorithm) > 0 {
		i -= len(m.PublicKeyAlgorithm)
		copy(dAtA[i:], m.PublicKeyAlgorithm)
		i = encodeVarintCommon(dAtA, i, uint64(len(m.PublicKeyAlgorithm)))
		i--
		dAtA[i] = 0x4a
	}
	if len(m.OcspUrl) > 0 {
		for iNdEx := len(m.OcspUrl) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.OcspUrl[iNdEx])
			copy(dAtA[i:], m.OcspUrl[iNdEx])
			i = encodeVarintCommon(dAtA, i, uint64(len(m.OcspUrl[iNdEx])))
			i--
			dAtA[i] = 0x42
		}
	}
	if len(m.SubjAltNames) > 0 {
		for iNdEx := len(m.SubjAltNames) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.SubjAltNames[iNdEx])
			copy(dAtA[i:], m.SubjAltNames[iNdEx])
			i = encodeVarintCommon(dAtA, i, uint64(len(m.SubjAltNames[iNdEx])))
			i--
			dAtA[i] = 0x3a
		}
	}
	if m.Subject != nil {
		{
			size, err := m.Subject.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintCommon(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x32
	}
	if m.Issuer != nil {
		{
			size, err := m.Issuer.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintCommon(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x2a
	}
	if m.Validity != nil {
		{
			size, err := m.Validity.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintCommon(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x22
	}
	if m.Mtime != nil {
		{
			size, err := m.Mtime.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintCommon(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if m.Size_ != 0 {
		i = encodeVarintCommon(dAtA, i, uint64(m.Size_))
		i--
		dAtA[i] = 0x10
	}
	if len(m.FileName) > 0 {
		i -= len(m.FileName)
		copy(dAtA[i:], m.FileName)
		i = encodeVarintCommon(dAtA, i, uint64(len(m.FileName)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *CertificateDates) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CertificateDates) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CertificateDates) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.NotAfter != 0 {
		i = encodeVarintCommon(dAtA, i, uint64(m.NotAfter))
		i--
		dAtA[i] = 0x10
	}
	if m.NotBefore != 0 {
		i = encodeVarintCommon(dAtA, i, uint64(m.NotBefore))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *CertificateName) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CertificateName) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CertificateName) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.OrganizationalUnit) > 0 {
		for iNdEx := len(m.OrganizationalUnit) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.OrganizationalUnit[iNdEx])
			copy(dAtA[i:], m.OrganizationalUnit[iNdEx])
			i = encodeVarintCommon(dAtA, i, uint64(len(m.OrganizationalUnit[iNdEx])))
			i--
			dAtA[i] = 0x32
		}
	}
	if len(m.Organization) > 0 {
		for iNdEx := len(m.Organization) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.Organization[iNdEx])
			copy(dAtA[i:], m.Organization[iNdEx])
			i = encodeVarintCommon(dAtA, i, uint64(len(m.Organization[iNdEx])))
			i--
			dAtA[i] = 0x2a
		}
	}
	if len(m.Locality) > 0 {
		for iNdEx := len(m.Locality) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.Locality[iNdEx])
			copy(dAtA[i:], m.Locality[iNdEx])
			i = encodeVarintCommon(dAtA, i, uint64(len(m.Locality[iNdEx])))
			i--
			dAtA[i] = 0x22
		}
	}
	if len(m.State) > 0 {
		for iNdEx := len(m.State) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.State[iNdEx])
			copy(dAtA[i:], m.State[iNdEx])
			i = encodeVarintCommon(dAtA, i, uint64(len(m.State[iNdEx])))
			i--
			dAtA[i] = 0x1a
		}
	}
	if len(m.Country) > 0 {
		for iNdEx := len(m.Country) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.Country[iNdEx])
			copy(dAtA[i:], m.Country[iNdEx])
			i = encodeVarintCommon(dAtA, i, uint64(len(m.Country[iNdEx])))
			i--
			dAtA[i] = 0x12
		}
	}
	if len(m.CommonName) > 0 {
		i -= len(m.CommonName)
		copy(dAtA[i:], m.CommonName)
		i = encodeVarintCommon(dAtA, i, uint64(len(m.CommonName)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ZippedFile) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ZippedFile) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ZippedFile) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.RootDirectory) > 0 {
		i -= len(m.RootDirectory)
		copy(dAtA[i:], m.RootDirectory)
		i = encodeVarintCommon(dAtA, i, uint64(len(m.RootDirectory)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Checksum) > 0 {
		i -= len(m.Checksum)
		copy(dAtA[i:], m.Checksum)
		i = encodeVarintCommon(dAtA, i, uint64(len(m.Checksum)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Contents) > 0 {
		i -= len(m.Contents)
		copy(dAtA[i:], m.Contents)
		i = encodeVarintCommon(dAtA, i, uint64(len(m.Contents)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintCommon(dAtA []byte, offset int, v uint64) int {
	offset -= sovCommon(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *Metadata) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Timestamp != nil {
		l = m.Timestamp.Size()
		n += 1 + l + sovCommon(uint64(l))
	}
	l = len(m.ClientId)
	if l > 0 {
		n += 1 + l + sovCommon(uint64(l))
	}
	l = len(m.MessageId)
	if l > 0 {
		n += 1 + l + sovCommon(uint64(l))
	}
	l = len(m.CloudAccountId)
	if l > 0 {
		n += 1 + l + sovCommon(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *DirectoryMap) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Directories) > 0 {
		for _, e := range m.Directories {
			l = e.Size()
			n += 1 + l + sovCommon(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *File) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovCommon(uint64(l))
	}
	if m.Lines != 0 {
		n += 1 + sovCommon(uint64(m.Lines))
	}
	if m.Mtime != nil {
		l = m.Mtime.Size()
		n += 1 + l + sovCommon(uint64(l))
	}
	l = len(m.Permissions)
	if l > 0 {
		n += 1 + l + sovCommon(uint64(l))
	}
	if m.Size_ != 0 {
		n += 1 + sovCommon(uint64(m.Size_))
	}
	l = len(m.Contents)
	if l > 0 {
		n += 1 + l + sovCommon(uint64(l))
	}
	if m.Action != 0 {
		n += 1 + sovCommon(uint64(m.Action))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *Directory) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovCommon(uint64(l))
	}
	if m.Mtime != nil {
		l = m.Mtime.Size()
		n += 1 + l + sovCommon(uint64(l))
	}
	l = len(m.Permissions)
	if l > 0 {
		n += 1 + l + sovCommon(uint64(l))
	}
	if m.Size_ != 0 {
		n += 1 + sovCommon(uint64(m.Size_))
	}
	if len(m.Files) > 0 {
		for _, e := range m.Files {
			l = e.Size()
			n += 1 + l + sovCommon(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *SslCertificates) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.SslCerts) > 0 {
		for _, e := range m.SslCerts {
			l = e.Size()
			n += 1 + l + sovCommon(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *SslCertificate) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.FileName)
	if l > 0 {
		n += 1 + l + sovCommon(uint64(l))
	}
	if m.Size_ != 0 {
		n += 1 + sovCommon(uint64(m.Size_))
	}
	if m.Mtime != nil {
		l = m.Mtime.Size()
		n += 1 + l + sovCommon(uint64(l))
	}
	if m.Validity != nil {
		l = m.Validity.Size()
		n += 1 + l + sovCommon(uint64(l))
	}
	if m.Issuer != nil {
		l = m.Issuer.Size()
		n += 1 + l + sovCommon(uint64(l))
	}
	if m.Subject != nil {
		l = m.Subject.Size()
		n += 1 + l + sovCommon(uint64(l))
	}
	if len(m.SubjAltNames) > 0 {
		for _, s := range m.SubjAltNames {
			l = len(s)
			n += 1 + l + sovCommon(uint64(l))
		}
	}
	if len(m.OcspUrl) > 0 {
		for _, s := range m.OcspUrl {
			l = len(s)
			n += 1 + l + sovCommon(uint64(l))
		}
	}
	l = len(m.PublicKeyAlgorithm)
	if l > 0 {
		n += 1 + l + sovCommon(uint64(l))
	}
	l = len(m.SignatureAlgorithm)
	if l > 0 {
		n += 1 + l + sovCommon(uint64(l))
	}
	l = len(m.SerialNumber)
	if l > 0 {
		n += 1 + l + sovCommon(uint64(l))
	}
	l = len(m.SubjectKeyIdentifier)
	if l > 0 {
		n += 1 + l + sovCommon(uint64(l))
	}
	l = len(m.Fingerprint)
	if l > 0 {
		n += 1 + l + sovCommon(uint64(l))
	}
	l = len(m.FingerprintAlgorithm)
	if l > 0 {
		n += 1 + l + sovCommon(uint64(l))
	}
	if m.Version != 0 {
		n += 1 + sovCommon(uint64(m.Version))
	}
	l = len(m.AuthorityKeyIdentifier)
	if l > 0 {
		n += 2 + l + sovCommon(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *CertificateDates) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.NotBefore != 0 {
		n += 1 + sovCommon(uint64(m.NotBefore))
	}
	if m.NotAfter != 0 {
		n += 1 + sovCommon(uint64(m.NotAfter))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *CertificateName) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.CommonName)
	if l > 0 {
		n += 1 + l + sovCommon(uint64(l))
	}
	if len(m.Country) > 0 {
		for _, s := range m.Country {
			l = len(s)
			n += 1 + l + sovCommon(uint64(l))
		}
	}
	if len(m.State) > 0 {
		for _, s := range m.State {
			l = len(s)
			n += 1 + l + sovCommon(uint64(l))
		}
	}
	if len(m.Locality) > 0 {
		for _, s := range m.Locality {
			l = len(s)
			n += 1 + l + sovCommon(uint64(l))
		}
	}
	if len(m.Organization) > 0 {
		for _, s := range m.Organization {
			l = len(s)
			n += 1 + l + sovCommon(uint64(l))
		}
	}
	if len(m.OrganizationalUnit) > 0 {
		for _, s := range m.OrganizationalUnit {
			l = len(s)
			n += 1 + l + sovCommon(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ZippedFile) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Contents)
	if l > 0 {
		n += 1 + l + sovCommon(uint64(l))
	}
	l = len(m.Checksum)
	if l > 0 {
		n += 1 + l + sovCommon(uint64(l))
	}
	l = len(m.RootDirectory)
	if l > 0 {
		n += 1 + l + sovCommon(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func sovCommon(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozCommon(x uint64) (n int) {
	return sovCommon(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *Metadata) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCommon
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Metadata: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Metadata: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Timestamp", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCommon
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCommon
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Timestamp == nil {
				m.Timestamp = &types.Timestamp{}
			}
			if err := m.Timestamp.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ClientId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCommon
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCommon
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ClientId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MessageId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCommon
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCommon
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.MessageId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CloudAccountId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCommon
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCommon
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CloudAccountId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCommon(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthCommon
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DirectoryMap) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCommon
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DirectoryMap: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DirectoryMap: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Directories", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCommon
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCommon
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Directories = append(m.Directories, &Directory{})
			if err := m.Directories[len(m.Directories)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCommon(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthCommon
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *File) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCommon
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: File: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: File: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCommon
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCommon
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Lines", wireType)
			}
			m.Lines = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Lines |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Mtime", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCommon
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCommon
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Mtime == nil {
				m.Mtime = &types.Timestamp{}
			}
			if err := m.Mtime.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Permissions", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCommon
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCommon
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Permissions = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Size_", wireType)
			}
			m.Size_ = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Size_ |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Contents", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthCommon
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthCommon
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Contents = append(m.Contents[:0], dAtA[iNdEx:postIndex]...)
			if m.Contents == nil {
				m.Contents = []byte{}
			}
			iNdEx = postIndex
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Action", wireType)
			}
			m.Action = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Action |= File_Action(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipCommon(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthCommon
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Directory) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCommon
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Directory: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Directory: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCommon
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCommon
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Mtime", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCommon
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCommon
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Mtime == nil {
				m.Mtime = &types.Timestamp{}
			}
			if err := m.Mtime.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Permissions", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCommon
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCommon
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Permissions = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Size_", wireType)
			}
			m.Size_ = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Size_ |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Files", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCommon
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCommon
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Files = append(m.Files, &File{})
			if err := m.Files[len(m.Files)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCommon(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthCommon
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SslCertificates) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCommon
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SslCertificates: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SslCertificates: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SslCerts", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCommon
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCommon
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SslCerts = append(m.SslCerts, &SslCertificate{})
			if err := m.SslCerts[len(m.SslCerts)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCommon(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthCommon
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SslCertificate) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCommon
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SslCertificate: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SslCertificate: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FileName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCommon
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCommon
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.FileName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Size_", wireType)
			}
			m.Size_ = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Size_ |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Mtime", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCommon
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCommon
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Mtime == nil {
				m.Mtime = &types.Timestamp{}
			}
			if err := m.Mtime.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Validity", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCommon
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCommon
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Validity == nil {
				m.Validity = &CertificateDates{}
			}
			if err := m.Validity.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Issuer", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCommon
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCommon
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Issuer == nil {
				m.Issuer = &CertificateName{}
			}
			if err := m.Issuer.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Subject", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCommon
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCommon
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Subject == nil {
				m.Subject = &CertificateName{}
			}
			if err := m.Subject.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SubjAltNames", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCommon
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCommon
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SubjAltNames = append(m.SubjAltNames, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OcspUrl", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCommon
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCommon
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.OcspUrl = append(m.OcspUrl, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PublicKeyAlgorithm", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCommon
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCommon
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PublicKeyAlgorithm = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SignatureAlgorithm", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCommon
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCommon
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SignatureAlgorithm = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SerialNumber", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCommon
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCommon
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SerialNumber = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 12:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SubjectKeyIdentifier", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCommon
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCommon
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SubjectKeyIdentifier = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 13:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Fingerprint", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCommon
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCommon
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Fingerprint = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 14:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FingerprintAlgorithm", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCommon
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCommon
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.FingerprintAlgorithm = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 15:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Version", wireType)
			}
			m.Version = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Version |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 16:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AuthorityKeyIdentifier", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCommon
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCommon
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AuthorityKeyIdentifier = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCommon(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthCommon
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CertificateDates) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCommon
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CertificateDates: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CertificateDates: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field NotBefore", wireType)
			}
			m.NotBefore = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.NotBefore |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field NotAfter", wireType)
			}
			m.NotAfter = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.NotAfter |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipCommon(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthCommon
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CertificateName) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCommon
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CertificateName: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CertificateName: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CommonName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCommon
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCommon
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CommonName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Country", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCommon
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCommon
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Country = append(m.Country, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field State", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCommon
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCommon
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.State = append(m.State, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Locality", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCommon
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCommon
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Locality = append(m.Locality, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Organization", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCommon
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCommon
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Organization = append(m.Organization, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OrganizationalUnit", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCommon
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCommon
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.OrganizationalUnit = append(m.OrganizationalUnit, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCommon(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthCommon
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ZippedFile) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCommon
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ZippedFile: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ZippedFile: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Contents", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthCommon
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthCommon
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Contents = append(m.Contents[:0], dAtA[iNdEx:postIndex]...)
			if m.Contents == nil {
				m.Contents = []byte{}
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Checksum", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCommon
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCommon
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Checksum = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RootDirectory", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCommon
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCommon
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RootDirectory = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCommon(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthCommon
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipCommon(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowCommon
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowCommon
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowCommon
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthCommon
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupCommon
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthCommon
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthCommon        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowCommon          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupCommon = fmt.Errorf("proto: unexpected end of group")
)
