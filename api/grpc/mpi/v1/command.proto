// Copyright (c) F5, Inc.
//
// This source code is licensed under the Apache License, Version 2.0 license found in the
// LICENSE file in the root directory of this source tree.

// These proto definitions follow https://protobuf.dev/programming-guides/style/
// and recommendations outlined in https://static.sched.com/hosted_files/kccncna17/ad/2017%20CloudNativeCon%20-%20Mod%20gRPC%20Services.pdf
syntax = "proto3";
package mpi.v1;

option go_package = "mpi/v1";

import "mpi/v1/common.proto";
import "google/protobuf/struct.proto";

// A service outlining the command and control options for a DataPlane Client
// All operations are written from a client perspective
// The RPC calls generally flow Client -> Server, except for Subscribe which contains a bidirectional stream
// The ManagementPlaneRequest sent in the Subscribe stream triggers one or more client actions.
// Messages provided by the Management Plane must be a FIFO ordered queue. Messages in the queue must have a monotonically-increasing integer index. 
// The indexes do not need to be sequential. The index must be a 64-bit signed integer.
// The index must not reset for the entire lifetime of a unique Agent (i.e. the index does not reset to 0 only because of a temporary disconnection or new session). 
// Messages must not be removed from the Mangement Plane queue until Ack’d by the Agent. 
// Messages sent but not yet Ack’d must be kept in an “in-flight” buffer as they may need to be retried.
service CommandService {
    // Connects NGINX Agent to the Management Plane agnostic of instance data
    rpc CreateConnection(CreateConnectionRequest) returns (CreateConnectionResponse) {}
    // Reports on instances and their configurations
    rpc UpdateDataPlaneStatus(UpdateDataPlaneStatusRequest) returns (UpdateDataPlaneStatusResponse) {}
    // Reports on instance health
    rpc UpdateDataPlaneHealth(UpdateDataPlaneHealthRequest) returns (UpdateDataPlaneHealthResponse) {}
    // A decoupled communication mechanism between the data plane and management plane.
    // buf:lint:ignore RPC_RESPONSE_STANDARD_NAME
    // buf:lint:ignore RPC_REQUEST_STANDARD_NAME
    rpc Subscribe(stream DataPlaneResponse) returns (stream ManagementPlaneRequest) {}
}

// The connection request is an intial handshake to establish a connection, sending NGINX Agent instance information
message CreateConnectionRequest {
    // Meta-information associated with a message
    mpi.v1.MessageMeta message_meta = 1;
    // instance information associated with the NGINX Agent
    Instance agent = 2;
}

// A response to a CreateConnectionRequest
message CreateConnectionResponse {
    // the success or failure of the CreateConnectionRequest
    mpi.v1.CommandResponse response = 1;
    // the recommendation NGINX Agent configurations provided by the ManagementPlane
    AgentConfig agent_config = 2;
}

// Report on the status of the Data Plane
message UpdateDataPlaneStatusRequest {}

// Respond to a UpdateDataPlaneStatusRequest - intentionally empty
message UpdateDataPlaneStatusResponse {}

// Health report of a set of instances
message UpdateDataPlaneHealthRequest {}

// Response to a UpdateDataPlaneHealthRequest - intentionally empty
message UpdateDataPlaneHealthResponse {}

// Reports the status of an associated command. This may be in response to a ManagementPlaneRequest
message DataPlaneResponse {}

// A Management Plane request for information, triggers an associated rpc on the DataPlane
message ManagementPlaneRequest {}

// This represents an instance being reported on
message Instance {
    // Meta-information associated with an instance
    InstanceMeta instance_meta = 1;
    // Runtime configuration associated with an instance
    InstanceConfig instance_config = 2;
}

// Metainformation relating to the reported instance
message InstanceMeta {
    // the identifier associated with the instance
    string instance_id = 1;
    // the types of instances possible
    enum InstanceType {
        // Unspecified instance type
        INSTANCE_TYPE_UNSPECIFIED = 0;
        // NGINX Agent
        INSTANCE_TYPE_AGENT = 1;
        // NGINX
        INSTANCE_TYPE_NGINX = 2;
        // NGINX Plus
        INSTANCE_TYPE_NGINX_PLUS = 3;
        // NGINX Unit
        INSTANCE_TYPE_UNIT = 4;
    }
    // the types of instances possible
    InstanceType instance_type = 2;
    // the version of the instance
    string version = 3;
}

// Instance Configuration options
message InstanceConfig {
    oneof config {
        // NGINX Agent runtime configuration settings
        AgentConfig agent_config = 1;
    }
}

// This contains a series of NGINX Agent configurations
message AgentConfig { 
    // Command server settings
    Command command = 1;
    // Metrics server settings
    Metrics metrics = 2;
    // File server settings
    File file = 3;
    // A series of key/value pairs to add more data to the NGINX Agent instance
    repeated google.protobuf.Struct labels = 4;
    // A list of features that the NGINX Agent has
    repeated string features = 5;
    // Message buffer size, maximum not acknowledged messages from the subscribe perspective
    string message_buffer_size = 6;
}

// The command settings, associated with messaging from an external source 
message Command {}

// The metrics settings associated with orgins (sources) of the metrics and destinations (exporter)
message Metrics {}

// The file settings associated with file server for configurations
message File {}