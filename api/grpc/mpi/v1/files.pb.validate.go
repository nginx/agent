// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: mpi/v1/files.proto

package v1

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on FileDataChunk with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *FileDataChunk) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on FileDataChunk with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in FileDataChunkMultiError, or
// nil if none found.
func (m *FileDataChunk) ValidateAll() error {
	return m.validate(true)
}

func (m *FileDataChunk) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetMeta()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, FileDataChunkValidationError{
					field:  "Meta",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, FileDataChunkValidationError{
					field:  "Meta",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetMeta()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return FileDataChunkValidationError{
				field:  "Meta",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	switch v := m.Chunk.(type) {
	case *FileDataChunk_Header:
		if v == nil {
			err := FileDataChunkValidationError{
				field:  "Chunk",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

		if all {
			switch v := interface{}(m.GetHeader()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, FileDataChunkValidationError{
						field:  "Header",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, FileDataChunkValidationError{
						field:  "Header",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetHeader()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return FileDataChunkValidationError{
					field:  "Header",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *FileDataChunk_Content:
		if v == nil {
			err := FileDataChunkValidationError{
				field:  "Chunk",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

		if all {
			switch v := interface{}(m.GetContent()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, FileDataChunkValidationError{
						field:  "Content",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, FileDataChunkValidationError{
						field:  "Content",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetContent()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return FileDataChunkValidationError{
					field:  "Content",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	default:
		_ = v // ensures v is used
	}

	if len(errors) > 0 {
		return FileDataChunkMultiError(errors)
	}

	return nil
}

// FileDataChunkMultiError is an error wrapping multiple validation errors
// returned by FileDataChunk.ValidateAll() if the designated constraints
// aren't met.
type FileDataChunkMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m FileDataChunkMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m FileDataChunkMultiError) AllErrors() []error { return m }

// FileDataChunkValidationError is the validation error returned by
// FileDataChunk.Validate if the designated constraints aren't met.
type FileDataChunkValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e FileDataChunkValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e FileDataChunkValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e FileDataChunkValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e FileDataChunkValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e FileDataChunkValidationError) ErrorName() string { return "FileDataChunkValidationError" }

// Error satisfies the builtin error interface
func (e FileDataChunkValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sFileDataChunk.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = FileDataChunkValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = FileDataChunkValidationError{}

// Validate checks the field values on FileDataChunkHeader with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *FileDataChunkHeader) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on FileDataChunkHeader with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// FileDataChunkHeaderMultiError, or nil if none found.
func (m *FileDataChunkHeader) ValidateAll() error {
	return m.validate(true)
}

func (m *FileDataChunkHeader) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetFileMeta()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, FileDataChunkHeaderValidationError{
					field:  "FileMeta",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, FileDataChunkHeaderValidationError{
					field:  "FileMeta",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetFileMeta()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return FileDataChunkHeaderValidationError{
				field:  "FileMeta",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for Chunks

	// no validation rules for ChunkSize

	if len(errors) > 0 {
		return FileDataChunkHeaderMultiError(errors)
	}

	return nil
}

// FileDataChunkHeaderMultiError is an error wrapping multiple validation
// errors returned by FileDataChunkHeader.ValidateAll() if the designated
// constraints aren't met.
type FileDataChunkHeaderMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m FileDataChunkHeaderMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m FileDataChunkHeaderMultiError) AllErrors() []error { return m }

// FileDataChunkHeaderValidationError is the validation error returned by
// FileDataChunkHeader.Validate if the designated constraints aren't met.
type FileDataChunkHeaderValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e FileDataChunkHeaderValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e FileDataChunkHeaderValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e FileDataChunkHeaderValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e FileDataChunkHeaderValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e FileDataChunkHeaderValidationError) ErrorName() string {
	return "FileDataChunkHeaderValidationError"
}

// Error satisfies the builtin error interface
func (e FileDataChunkHeaderValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sFileDataChunkHeader.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = FileDataChunkHeaderValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = FileDataChunkHeaderValidationError{}

// Validate checks the field values on FileDataChunkContent with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *FileDataChunkContent) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on FileDataChunkContent with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// FileDataChunkContentMultiError, or nil if none found.
func (m *FileDataChunkContent) ValidateAll() error {
	return m.validate(true)
}

func (m *FileDataChunkContent) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for ChunkId

	// no validation rules for Data

	if len(errors) > 0 {
		return FileDataChunkContentMultiError(errors)
	}

	return nil
}

// FileDataChunkContentMultiError is an error wrapping multiple validation
// errors returned by FileDataChunkContent.ValidateAll() if the designated
// constraints aren't met.
type FileDataChunkContentMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m FileDataChunkContentMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m FileDataChunkContentMultiError) AllErrors() []error { return m }

// FileDataChunkContentValidationError is the validation error returned by
// FileDataChunkContent.Validate if the designated constraints aren't met.
type FileDataChunkContentValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e FileDataChunkContentValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e FileDataChunkContentValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e FileDataChunkContentValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e FileDataChunkContentValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e FileDataChunkContentValidationError) ErrorName() string {
	return "FileDataChunkContentValidationError"
}

// Error satisfies the builtin error interface
func (e FileDataChunkContentValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sFileDataChunkContent.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = FileDataChunkContentValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = FileDataChunkContentValidationError{}

// Validate checks the field values on GetOverviewRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetOverviewRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetOverviewRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetOverviewRequestMultiError, or nil if none found.
func (m *GetOverviewRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetOverviewRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetMessageMeta()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetOverviewRequestValidationError{
					field:  "MessageMeta",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetOverviewRequestValidationError{
					field:  "MessageMeta",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetMessageMeta()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetOverviewRequestValidationError{
				field:  "MessageMeta",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetConfigVersion()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetOverviewRequestValidationError{
					field:  "ConfigVersion",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetOverviewRequestValidationError{
					field:  "ConfigVersion",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetConfigVersion()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetOverviewRequestValidationError{
				field:  "ConfigVersion",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return GetOverviewRequestMultiError(errors)
	}

	return nil
}

// GetOverviewRequestMultiError is an error wrapping multiple validation errors
// returned by GetOverviewRequest.ValidateAll() if the designated constraints
// aren't met.
type GetOverviewRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetOverviewRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetOverviewRequestMultiError) AllErrors() []error { return m }

// GetOverviewRequestValidationError is the validation error returned by
// GetOverviewRequest.Validate if the designated constraints aren't met.
type GetOverviewRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetOverviewRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetOverviewRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetOverviewRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetOverviewRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetOverviewRequestValidationError) ErrorName() string {
	return "GetOverviewRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetOverviewRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetOverviewRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetOverviewRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetOverviewRequestValidationError{}

// Validate checks the field values on GetOverviewResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetOverviewResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetOverviewResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetOverviewResponseMultiError, or nil if none found.
func (m *GetOverviewResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetOverviewResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetOverview()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetOverviewResponseValidationError{
					field:  "Overview",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetOverviewResponseValidationError{
					field:  "Overview",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetOverview()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetOverviewResponseValidationError{
				field:  "Overview",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return GetOverviewResponseMultiError(errors)
	}

	return nil
}

// GetOverviewResponseMultiError is an error wrapping multiple validation
// errors returned by GetOverviewResponse.ValidateAll() if the designated
// constraints aren't met.
type GetOverviewResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetOverviewResponseMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetOverviewResponseMultiError) AllErrors() []error { return m }

// GetOverviewResponseValidationError is the validation error returned by
// GetOverviewResponse.Validate if the designated constraints aren't met.
type GetOverviewResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetOverviewResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetOverviewResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetOverviewResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetOverviewResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetOverviewResponseValidationError) ErrorName() string {
	return "GetOverviewResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetOverviewResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetOverviewResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetOverviewResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetOverviewResponseValidationError{}

// Validate checks the field values on UpdateOverviewRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpdateOverviewRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateOverviewRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdateOverviewRequestMultiError, or nil if none found.
func (m *UpdateOverviewRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateOverviewRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetMessageMeta()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, UpdateOverviewRequestValidationError{
					field:  "MessageMeta",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, UpdateOverviewRequestValidationError{
					field:  "MessageMeta",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetMessageMeta()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UpdateOverviewRequestValidationError{
				field:  "MessageMeta",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetOverview()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, UpdateOverviewRequestValidationError{
					field:  "Overview",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, UpdateOverviewRequestValidationError{
					field:  "Overview",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetOverview()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UpdateOverviewRequestValidationError{
				field:  "Overview",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return UpdateOverviewRequestMultiError(errors)
	}

	return nil
}

// UpdateOverviewRequestMultiError is an error wrapping multiple validation
// errors returned by UpdateOverviewRequest.ValidateAll() if the designated
// constraints aren't met.
type UpdateOverviewRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateOverviewRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateOverviewRequestMultiError) AllErrors() []error { return m }

// UpdateOverviewRequestValidationError is the validation error returned by
// UpdateOverviewRequest.Validate if the designated constraints aren't met.
type UpdateOverviewRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateOverviewRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateOverviewRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateOverviewRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateOverviewRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateOverviewRequestValidationError) ErrorName() string {
	return "UpdateOverviewRequestValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateOverviewRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateOverviewRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateOverviewRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateOverviewRequestValidationError{}

// Validate checks the field values on UpdateOverviewResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpdateOverviewResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateOverviewResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdateOverviewResponseMultiError, or nil if none found.
func (m *UpdateOverviewResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateOverviewResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetOverview()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, UpdateOverviewResponseValidationError{
					field:  "Overview",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, UpdateOverviewResponseValidationError{
					field:  "Overview",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetOverview()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UpdateOverviewResponseValidationError{
				field:  "Overview",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return UpdateOverviewResponseMultiError(errors)
	}

	return nil
}

// UpdateOverviewResponseMultiError is an error wrapping multiple validation
// errors returned by UpdateOverviewResponse.ValidateAll() if the designated
// constraints aren't met.
type UpdateOverviewResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateOverviewResponseMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateOverviewResponseMultiError) AllErrors() []error { return m }

// UpdateOverviewResponseValidationError is the validation error returned by
// UpdateOverviewResponse.Validate if the designated constraints aren't met.
type UpdateOverviewResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateOverviewResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateOverviewResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateOverviewResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateOverviewResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateOverviewResponseValidationError) ErrorName() string {
	return "UpdateOverviewResponseValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateOverviewResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateOverviewResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateOverviewResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateOverviewResponseValidationError{}

// Validate checks the field values on ConfigVersion with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *ConfigVersion) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ConfigVersion with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in ConfigVersionMultiError, or
// nil if none found.
func (m *ConfigVersion) ValidateAll() error {
	return m.validate(true)
}

func (m *ConfigVersion) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for InstanceId

	// no validation rules for Version

	if len(errors) > 0 {
		return ConfigVersionMultiError(errors)
	}

	return nil
}

// ConfigVersionMultiError is an error wrapping multiple validation errors
// returned by ConfigVersion.ValidateAll() if the designated constraints
// aren't met.
type ConfigVersionMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ConfigVersionMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ConfigVersionMultiError) AllErrors() []error { return m }

// ConfigVersionValidationError is the validation error returned by
// ConfigVersion.Validate if the designated constraints aren't met.
type ConfigVersionValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ConfigVersionValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ConfigVersionValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ConfigVersionValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ConfigVersionValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ConfigVersionValidationError) ErrorName() string { return "ConfigVersionValidationError" }

// Error satisfies the builtin error interface
func (e ConfigVersionValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sConfigVersion.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ConfigVersionValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ConfigVersionValidationError{}

// Validate checks the field values on FileOverview with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *FileOverview) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on FileOverview with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in FileOverviewMultiError, or
// nil if none found.
func (m *FileOverview) ValidateAll() error {
	return m.validate(true)
}

func (m *FileOverview) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetFiles() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, FileOverviewValidationError{
						field:  fmt.Sprintf("Files[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, FileOverviewValidationError{
						field:  fmt.Sprintf("Files[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return FileOverviewValidationError{
					field:  fmt.Sprintf("Files[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if all {
		switch v := interface{}(m.GetConfigVersion()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, FileOverviewValidationError{
					field:  "ConfigVersion",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, FileOverviewValidationError{
					field:  "ConfigVersion",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetConfigVersion()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return FileOverviewValidationError{
				field:  "ConfigVersion",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return FileOverviewMultiError(errors)
	}

	return nil
}

// FileOverviewMultiError is an error wrapping multiple validation errors
// returned by FileOverview.ValidateAll() if the designated constraints aren't met.
type FileOverviewMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m FileOverviewMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m FileOverviewMultiError) AllErrors() []error { return m }

// FileOverviewValidationError is the validation error returned by
// FileOverview.Validate if the designated constraints aren't met.
type FileOverviewValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e FileOverviewValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e FileOverviewValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e FileOverviewValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e FileOverviewValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e FileOverviewValidationError) ErrorName() string { return "FileOverviewValidationError" }

// Error satisfies the builtin error interface
func (e FileOverviewValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sFileOverview.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = FileOverviewValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = FileOverviewValidationError{}

// Validate checks the field values on File with the rules defined in the proto
// definition for this message. If any rules are violated, the first error
// encountered is returned, or nil if there are no violations.
func (m *File) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on File with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in FileMultiError, or nil if none found.
func (m *File) ValidateAll() error {
	return m.validate(true)
}

func (m *File) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetFileMeta()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, FileValidationError{
					field:  "FileMeta",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, FileValidationError{
					field:  "FileMeta",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetFileMeta()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return FileValidationError{
				field:  "FileMeta",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for Unmanaged

	if m.Action != nil {
		// no validation rules for Action
	}

	if len(errors) > 0 {
		return FileMultiError(errors)
	}

	return nil
}

// FileMultiError is an error wrapping multiple validation errors returned by
// File.ValidateAll() if the designated constraints aren't met.
type FileMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m FileMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m FileMultiError) AllErrors() []error { return m }

// FileValidationError is the validation error returned by File.Validate if the
// designated constraints aren't met.
type FileValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e FileValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e FileValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e FileValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e FileValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e FileValidationError) ErrorName() string { return "FileValidationError" }

// Error satisfies the builtin error interface
func (e FileValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sFile.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = FileValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = FileValidationError{}

// Validate checks the field values on GetFileRequest with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *GetFileRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetFileRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in GetFileRequestMultiError,
// or nil if none found.
func (m *GetFileRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetFileRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetMessageMeta()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetFileRequestValidationError{
					field:  "MessageMeta",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetFileRequestValidationError{
					field:  "MessageMeta",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetMessageMeta()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetFileRequestValidationError{
				field:  "MessageMeta",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetFileMeta()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetFileRequestValidationError{
					field:  "FileMeta",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetFileRequestValidationError{
					field:  "FileMeta",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetFileMeta()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetFileRequestValidationError{
				field:  "FileMeta",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return GetFileRequestMultiError(errors)
	}

	return nil
}

// GetFileRequestMultiError is an error wrapping multiple validation errors
// returned by GetFileRequest.ValidateAll() if the designated constraints
// aren't met.
type GetFileRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetFileRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetFileRequestMultiError) AllErrors() []error { return m }

// GetFileRequestValidationError is the validation error returned by
// GetFileRequest.Validate if the designated constraints aren't met.
type GetFileRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetFileRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetFileRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetFileRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetFileRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetFileRequestValidationError) ErrorName() string { return "GetFileRequestValidationError" }

// Error satisfies the builtin error interface
func (e GetFileRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetFileRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetFileRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetFileRequestValidationError{}

// Validate checks the field values on GetFileResponse with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *GetFileResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetFileResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetFileResponseMultiError, or nil if none found.
func (m *GetFileResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetFileResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetContents()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetFileResponseValidationError{
					field:  "Contents",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetFileResponseValidationError{
					field:  "Contents",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetContents()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetFileResponseValidationError{
				field:  "Contents",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return GetFileResponseMultiError(errors)
	}

	return nil
}

// GetFileResponseMultiError is an error wrapping multiple validation errors
// returned by GetFileResponse.ValidateAll() if the designated constraints
// aren't met.
type GetFileResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetFileResponseMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetFileResponseMultiError) AllErrors() []error { return m }

// GetFileResponseValidationError is the validation error returned by
// GetFileResponse.Validate if the designated constraints aren't met.
type GetFileResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetFileResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetFileResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetFileResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetFileResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetFileResponseValidationError) ErrorName() string { return "GetFileResponseValidationError" }

// Error satisfies the builtin error interface
func (e GetFileResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetFileResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetFileResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetFileResponseValidationError{}

// Validate checks the field values on FileContents with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *FileContents) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on FileContents with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in FileContentsMultiError, or
// nil if none found.
func (m *FileContents) ValidateAll() error {
	return m.validate(true)
}

func (m *FileContents) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Contents

	if len(errors) > 0 {
		return FileContentsMultiError(errors)
	}

	return nil
}

// FileContentsMultiError is an error wrapping multiple validation errors
// returned by FileContents.ValidateAll() if the designated constraints aren't met.
type FileContentsMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m FileContentsMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m FileContentsMultiError) AllErrors() []error { return m }

// FileContentsValidationError is the validation error returned by
// FileContents.Validate if the designated constraints aren't met.
type FileContentsValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e FileContentsValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e FileContentsValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e FileContentsValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e FileContentsValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e FileContentsValidationError) ErrorName() string { return "FileContentsValidationError" }

// Error satisfies the builtin error interface
func (e FileContentsValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sFileContents.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = FileContentsValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = FileContentsValidationError{}

// Validate checks the field values on FileMeta with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *FileMeta) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on FileMeta with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in FileMetaMultiError, or nil
// if none found.
func (m *FileMeta) ValidateAll() error {
	return m.validate(true)
}

func (m *FileMeta) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Name

	// no validation rules for Hash

	if all {
		switch v := interface{}(m.GetModifiedTime()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, FileMetaValidationError{
					field:  "ModifiedTime",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, FileMetaValidationError{
					field:  "ModifiedTime",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetModifiedTime()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return FileMetaValidationError{
				field:  "ModifiedTime",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for Permissions

	// no validation rules for Size

	switch v := m.FileType.(type) {
	case *FileMeta_CertificateMeta:
		if v == nil {
			err := FileMetaValidationError{
				field:  "FileType",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

		if all {
			switch v := interface{}(m.GetCertificateMeta()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, FileMetaValidationError{
						field:  "CertificateMeta",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, FileMetaValidationError{
						field:  "CertificateMeta",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetCertificateMeta()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return FileMetaValidationError{
					field:  "CertificateMeta",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	default:
		_ = v // ensures v is used
	}

	if len(errors) > 0 {
		return FileMetaMultiError(errors)
	}

	return nil
}

// FileMetaMultiError is an error wrapping multiple validation errors returned
// by FileMeta.ValidateAll() if the designated constraints aren't met.
type FileMetaMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m FileMetaMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m FileMetaMultiError) AllErrors() []error { return m }

// FileMetaValidationError is the validation error returned by
// FileMeta.Validate if the designated constraints aren't met.
type FileMetaValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e FileMetaValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e FileMetaValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e FileMetaValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e FileMetaValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e FileMetaValidationError) ErrorName() string { return "FileMetaValidationError" }

// Error satisfies the builtin error interface
func (e FileMetaValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sFileMeta.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = FileMetaValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = FileMetaValidationError{}

// Validate checks the field values on UpdateFileRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *UpdateFileRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateFileRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdateFileRequestMultiError, or nil if none found.
func (m *UpdateFileRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateFileRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetFile()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, UpdateFileRequestValidationError{
					field:  "File",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, UpdateFileRequestValidationError{
					field:  "File",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetFile()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UpdateFileRequestValidationError{
				field:  "File",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetContents()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, UpdateFileRequestValidationError{
					field:  "Contents",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, UpdateFileRequestValidationError{
					field:  "Contents",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetContents()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UpdateFileRequestValidationError{
				field:  "Contents",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetMessageMeta()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, UpdateFileRequestValidationError{
					field:  "MessageMeta",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, UpdateFileRequestValidationError{
					field:  "MessageMeta",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetMessageMeta()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UpdateFileRequestValidationError{
				field:  "MessageMeta",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return UpdateFileRequestMultiError(errors)
	}

	return nil
}

// UpdateFileRequestMultiError is an error wrapping multiple validation errors
// returned by UpdateFileRequest.ValidateAll() if the designated constraints
// aren't met.
type UpdateFileRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateFileRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateFileRequestMultiError) AllErrors() []error { return m }

// UpdateFileRequestValidationError is the validation error returned by
// UpdateFileRequest.Validate if the designated constraints aren't met.
type UpdateFileRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateFileRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateFileRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateFileRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateFileRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateFileRequestValidationError) ErrorName() string {
	return "UpdateFileRequestValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateFileRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateFileRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateFileRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateFileRequestValidationError{}

// Validate checks the field values on UpdateFileResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpdateFileResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateFileResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdateFileResponseMultiError, or nil if none found.
func (m *UpdateFileResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateFileResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetFileMeta()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, UpdateFileResponseValidationError{
					field:  "FileMeta",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, UpdateFileResponseValidationError{
					field:  "FileMeta",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetFileMeta()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UpdateFileResponseValidationError{
				field:  "FileMeta",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return UpdateFileResponseMultiError(errors)
	}

	return nil
}

// UpdateFileResponseMultiError is an error wrapping multiple validation errors
// returned by UpdateFileResponse.ValidateAll() if the designated constraints
// aren't met.
type UpdateFileResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateFileResponseMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateFileResponseMultiError) AllErrors() []error { return m }

// UpdateFileResponseValidationError is the validation error returned by
// UpdateFileResponse.Validate if the designated constraints aren't met.
type UpdateFileResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateFileResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateFileResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateFileResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateFileResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateFileResponseValidationError) ErrorName() string {
	return "UpdateFileResponseValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateFileResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateFileResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateFileResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateFileResponseValidationError{}

// Validate checks the field values on CertificateMeta with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *CertificateMeta) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CertificateMeta with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CertificateMetaMultiError, or nil if none found.
func (m *CertificateMeta) ValidateAll() error {
	return m.validate(true)
}

func (m *CertificateMeta) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for SerialNumber

	if all {
		switch v := interface{}(m.GetIssuer()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CertificateMetaValidationError{
					field:  "Issuer",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CertificateMetaValidationError{
					field:  "Issuer",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetIssuer()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CertificateMetaValidationError{
				field:  "Issuer",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetSubject()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CertificateMetaValidationError{
					field:  "Subject",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CertificateMetaValidationError{
					field:  "Subject",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetSubject()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CertificateMetaValidationError{
				field:  "Subject",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetSans()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CertificateMetaValidationError{
					field:  "Sans",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CertificateMetaValidationError{
					field:  "Sans",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetSans()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CertificateMetaValidationError{
				field:  "Sans",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetDates()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CertificateMetaValidationError{
					field:  "Dates",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CertificateMetaValidationError{
					field:  "Dates",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetDates()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CertificateMetaValidationError{
				field:  "Dates",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for SignatureAlgorithm

	// no validation rules for PublicKeyAlgorithm

	if len(errors) > 0 {
		return CertificateMetaMultiError(errors)
	}

	return nil
}

// CertificateMetaMultiError is an error wrapping multiple validation errors
// returned by CertificateMeta.ValidateAll() if the designated constraints
// aren't met.
type CertificateMetaMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CertificateMetaMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CertificateMetaMultiError) AllErrors() []error { return m }

// CertificateMetaValidationError is the validation error returned by
// CertificateMeta.Validate if the designated constraints aren't met.
type CertificateMetaValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CertificateMetaValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CertificateMetaValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CertificateMetaValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CertificateMetaValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CertificateMetaValidationError) ErrorName() string { return "CertificateMetaValidationError" }

// Error satisfies the builtin error interface
func (e CertificateMetaValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCertificateMeta.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CertificateMetaValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CertificateMetaValidationError{}

// Validate checks the field values on CertificateDates with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *CertificateDates) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CertificateDates with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CertificateDatesMultiError, or nil if none found.
func (m *CertificateDates) ValidateAll() error {
	return m.validate(true)
}

func (m *CertificateDates) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for NotBefore

	// no validation rules for NotAfter

	if len(errors) > 0 {
		return CertificateDatesMultiError(errors)
	}

	return nil
}

// CertificateDatesMultiError is an error wrapping multiple validation errors
// returned by CertificateDates.ValidateAll() if the designated constraints
// aren't met.
type CertificateDatesMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CertificateDatesMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CertificateDatesMultiError) AllErrors() []error { return m }

// CertificateDatesValidationError is the validation error returned by
// CertificateDates.Validate if the designated constraints aren't met.
type CertificateDatesValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CertificateDatesValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CertificateDatesValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CertificateDatesValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CertificateDatesValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CertificateDatesValidationError) ErrorName() string { return "CertificateDatesValidationError" }

// Error satisfies the builtin error interface
func (e CertificateDatesValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCertificateDates.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CertificateDatesValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CertificateDatesValidationError{}

// Validate checks the field values on SubjectAlternativeNames with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *SubjectAlternativeNames) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SubjectAlternativeNames with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// SubjectAlternativeNamesMultiError, or nil if none found.
func (m *SubjectAlternativeNames) ValidateAll() error {
	return m.validate(true)
}

func (m *SubjectAlternativeNames) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return SubjectAlternativeNamesMultiError(errors)
	}

	return nil
}

// SubjectAlternativeNamesMultiError is an error wrapping multiple validation
// errors returned by SubjectAlternativeNames.ValidateAll() if the designated
// constraints aren't met.
type SubjectAlternativeNamesMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SubjectAlternativeNamesMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SubjectAlternativeNamesMultiError) AllErrors() []error { return m }

// SubjectAlternativeNamesValidationError is the validation error returned by
// SubjectAlternativeNames.Validate if the designated constraints aren't met.
type SubjectAlternativeNamesValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SubjectAlternativeNamesValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SubjectAlternativeNamesValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SubjectAlternativeNamesValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SubjectAlternativeNamesValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SubjectAlternativeNamesValidationError) ErrorName() string {
	return "SubjectAlternativeNamesValidationError"
}

// Error satisfies the builtin error interface
func (e SubjectAlternativeNamesValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSubjectAlternativeNames.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SubjectAlternativeNamesValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SubjectAlternativeNamesValidationError{}

// Validate checks the field values on X509Name with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *X509Name) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on X509Name with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in X509NameMultiError, or nil
// if none found.
func (m *X509Name) ValidateAll() error {
	return m.validate(true)
}

func (m *X509Name) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for SerialNumber

	// no validation rules for CommonName

	for idx, item := range m.GetNames() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, X509NameValidationError{
						field:  fmt.Sprintf("Names[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, X509NameValidationError{
						field:  fmt.Sprintf("Names[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return X509NameValidationError{
					field:  fmt.Sprintf("Names[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	for idx, item := range m.GetExtraNames() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, X509NameValidationError{
						field:  fmt.Sprintf("ExtraNames[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, X509NameValidationError{
						field:  fmt.Sprintf("ExtraNames[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return X509NameValidationError{
					field:  fmt.Sprintf("ExtraNames[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return X509NameMultiError(errors)
	}

	return nil
}

// X509NameMultiError is an error wrapping multiple validation errors returned
// by X509Name.ValidateAll() if the designated constraints aren't met.
type X509NameMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m X509NameMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m X509NameMultiError) AllErrors() []error { return m }

// X509NameValidationError is the validation error returned by
// X509Name.Validate if the designated constraints aren't met.
type X509NameValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e X509NameValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e X509NameValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e X509NameValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e X509NameValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e X509NameValidationError) ErrorName() string { return "X509NameValidationError" }

// Error satisfies the builtin error interface
func (e X509NameValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sX509Name.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = X509NameValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = X509NameValidationError{}

// Validate checks the field values on AttributeTypeAndValue with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *AttributeTypeAndValue) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AttributeTypeAndValue with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// AttributeTypeAndValueMultiError, or nil if none found.
func (m *AttributeTypeAndValue) ValidateAll() error {
	return m.validate(true)
}

func (m *AttributeTypeAndValue) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Type

	// no validation rules for Value

	if len(errors) > 0 {
		return AttributeTypeAndValueMultiError(errors)
	}

	return nil
}

// AttributeTypeAndValueMultiError is an error wrapping multiple validation
// errors returned by AttributeTypeAndValue.ValidateAll() if the designated
// constraints aren't met.
type AttributeTypeAndValueMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AttributeTypeAndValueMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AttributeTypeAndValueMultiError) AllErrors() []error { return m }

// AttributeTypeAndValueValidationError is the validation error returned by
// AttributeTypeAndValue.Validate if the designated constraints aren't met.
type AttributeTypeAndValueValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AttributeTypeAndValueValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AttributeTypeAndValueValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AttributeTypeAndValueValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AttributeTypeAndValueValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AttributeTypeAndValueValidationError) ErrorName() string {
	return "AttributeTypeAndValueValidationError"
}

// Error satisfies the builtin error interface
func (e AttributeTypeAndValueValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAttributeTypeAndValue.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AttributeTypeAndValueValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AttributeTypeAndValueValidationError{}
