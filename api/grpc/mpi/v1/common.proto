// Copyright (c) F5, Inc.
//
// This source code is licensed under the Apache License, Version 2.0 license found in the
// LICENSE file in the root directory of this source tree.
syntax = "proto3";
package mpi.v1;

option go_package = "mpi/v1";

import "google/protobuf/timestamp.proto";
import "buf/validate/validate.proto";

// Meta-information associated with a message
message MessageMeta {
    // uuid v7 monotonically increasing string
    string message_id = 1;
    // if 2 or more messages associated with the same workflow, use this field as an association
    string correlation_id = 2;
    // timestamp for human readable timestamp in UTC format
    google.protobuf.Timestamp timestamp = 3;
}

// Represents a the status response of an command
message CommandResponse {
    // Command status enum
    enum CommandStatus {
        // Unspecified status of command
        COMMAND_STATUS_UNSPECIFIED = 0;
        // Command was successful
        COMMAND_STATUS_OK = 1;
        // Command error
        COMMAND_STATUS_ERROR = 2;
        // Command in-progress
        COMMAND_STATUS_IN_PROGRESS = 3;
        // Command failure
        COMMAND_STATUS_FAILURE = 4;
    }

    // Command status
    CommandStatus status = 1;
    // Provides a user friendly message to describe the response
    string message = 2;
    // Provides an error message of why the command failed, only populated when CommandStatus is COMMAND_STATUS_ERROR
    string error = 3;
}

// The top-level configuration for the command server
message ServerSettings {
    // Command server host
    string host = 1;
    // Command server port
    int32 port = 2 [(buf.validate.field).int32 = {gte: 1, lte: 65535}];
    // Server type (enum for gRPC, HTTP, etc.)
    ServerType type = 3;   
    enum ServerType {
        // Undefined server type
        SERVER_SETTINGS_TYPE_UNDEFINED = 0;
        // gRPC server type
        SERVER_SETTINGS_TYPE_GRPC = 1;
        // HTTP server type
        SERVER_SETTINGS_TYPE_HTTP = 2;
    }
}

// Defines the authentication configuration
message AuthSettings {
}
  
message TLSSettings {
    // TLS certificate for the command server (e.g., "/path/to/cert.pem")
    string cert = 1;
    // TLS key for the command server (e.g., "/path/to/key.pem")
    string key = 2;        
    // CA certificate for the command server (e.g., "/path/to/ca.pem")
    string ca = 3;
    // Controls whether a client verifies the server's certificate chain and host name. 
    // If skip_verify is true, accepts any certificate presented by the server and any host name in that certificate.    
    bool skip_verify = 4;
    // Server name for TLS
    string server_name = 5;
}
