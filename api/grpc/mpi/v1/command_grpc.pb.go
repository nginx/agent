// Copyright (c) F5, Inc.
//
// This source code is licensed under the Apache License, Version 2.0 license found in the
// LICENSE file in the root directory of this source tree.

// These proto definitions follow https://protobuf.dev/programming-guides/style/
// and recommendations outlined in https://static.sched.com/hosted_files/kccncna17/ad/2017%20CloudNativeCon%20-%20Mod%20gRPC%20Services.pdf

// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v4.25.1
// source: mpi/v1/command.proto

package v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	CommandService_CreateConnection_FullMethodName      = "/mpi.v1.CommandService/CreateConnection"
	CommandService_UpdateDataPlaneStatus_FullMethodName = "/mpi.v1.CommandService/UpdateDataPlaneStatus"
	CommandService_UpdateDataPlaneHealth_FullMethodName = "/mpi.v1.CommandService/UpdateDataPlaneHealth"
	CommandService_Subscribe_FullMethodName             = "/mpi.v1.CommandService/Subscribe"
)

// CommandServiceClient is the client API for CommandService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type CommandServiceClient interface {
	// Connects NGINX Agent to the Management Plane agnostic of instance data
	CreateConnection(ctx context.Context, in *CreateConnectionRequest, opts ...grpc.CallOption) (*CreateConnectionResponse, error)
	// Reports on instances and their configurations
	UpdateDataPlaneStatus(ctx context.Context, in *UpdateDataPlaneStatusRequest, opts ...grpc.CallOption) (*UpdateDataPlaneStatusResponse, error)
	// Reports on instance health
	UpdateDataPlaneHealth(ctx context.Context, in *UpdateDataPlaneHealthRequest, opts ...grpc.CallOption) (*UpdateDataPlaneHealthResponse, error)
	// A decoupled communication mechanism between the data plane and management plane.
	// buf:lint:ignore RPC_RESPONSE_STANDARD_NAME
	// buf:lint:ignore RPC_REQUEST_STANDARD_NAME
	Subscribe(ctx context.Context, opts ...grpc.CallOption) (CommandService_SubscribeClient, error)
}

type commandServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewCommandServiceClient(cc grpc.ClientConnInterface) CommandServiceClient {
	return &commandServiceClient{cc}
}

func (c *commandServiceClient) CreateConnection(ctx context.Context, in *CreateConnectionRequest, opts ...grpc.CallOption) (*CreateConnectionResponse, error) {
	out := new(CreateConnectionResponse)
	err := c.cc.Invoke(ctx, CommandService_CreateConnection_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *commandServiceClient) UpdateDataPlaneStatus(ctx context.Context, in *UpdateDataPlaneStatusRequest, opts ...grpc.CallOption) (*UpdateDataPlaneStatusResponse, error) {
	out := new(UpdateDataPlaneStatusResponse)
	err := c.cc.Invoke(ctx, CommandService_UpdateDataPlaneStatus_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *commandServiceClient) UpdateDataPlaneHealth(ctx context.Context, in *UpdateDataPlaneHealthRequest, opts ...grpc.CallOption) (*UpdateDataPlaneHealthResponse, error) {
	out := new(UpdateDataPlaneHealthResponse)
	err := c.cc.Invoke(ctx, CommandService_UpdateDataPlaneHealth_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *commandServiceClient) Subscribe(ctx context.Context, opts ...grpc.CallOption) (CommandService_SubscribeClient, error) {
	stream, err := c.cc.NewStream(ctx, &CommandService_ServiceDesc.Streams[0], CommandService_Subscribe_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &commandServiceSubscribeClient{stream}
	return x, nil
}

type CommandService_SubscribeClient interface {
	Send(*DataPlaneResponse) error
	Recv() (*ManagementPlaneRequest, error)
	grpc.ClientStream
}

type commandServiceSubscribeClient struct {
	grpc.ClientStream
}

func (x *commandServiceSubscribeClient) Send(m *DataPlaneResponse) error {
	return x.ClientStream.SendMsg(m)
}

func (x *commandServiceSubscribeClient) Recv() (*ManagementPlaneRequest, error) {
	m := new(ManagementPlaneRequest)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// CommandServiceServer is the server API for CommandService service.
// All implementations must embed UnimplementedCommandServiceServer
// for forward compatibility
type CommandServiceServer interface {
	// Connects NGINX Agent to the Management Plane agnostic of instance data
	CreateConnection(context.Context, *CreateConnectionRequest) (*CreateConnectionResponse, error)
	// Reports on instances and their configurations
	UpdateDataPlaneStatus(context.Context, *UpdateDataPlaneStatusRequest) (*UpdateDataPlaneStatusResponse, error)
	// Reports on instance health
	UpdateDataPlaneHealth(context.Context, *UpdateDataPlaneHealthRequest) (*UpdateDataPlaneHealthResponse, error)
	// A decoupled communication mechanism between the data plane and management plane.
	// buf:lint:ignore RPC_RESPONSE_STANDARD_NAME
	// buf:lint:ignore RPC_REQUEST_STANDARD_NAME
	Subscribe(CommandService_SubscribeServer) error
	mustEmbedUnimplementedCommandServiceServer()
}

// UnimplementedCommandServiceServer must be embedded to have forward compatible implementations.
type UnimplementedCommandServiceServer struct {
}

func (UnimplementedCommandServiceServer) CreateConnection(context.Context, *CreateConnectionRequest) (*CreateConnectionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateConnection not implemented")
}
func (UnimplementedCommandServiceServer) UpdateDataPlaneStatus(context.Context, *UpdateDataPlaneStatusRequest) (*UpdateDataPlaneStatusResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateDataPlaneStatus not implemented")
}
func (UnimplementedCommandServiceServer) UpdateDataPlaneHealth(context.Context, *UpdateDataPlaneHealthRequest) (*UpdateDataPlaneHealthResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateDataPlaneHealth not implemented")
}
func (UnimplementedCommandServiceServer) Subscribe(CommandService_SubscribeServer) error {
	return status.Errorf(codes.Unimplemented, "method Subscribe not implemented")
}
func (UnimplementedCommandServiceServer) mustEmbedUnimplementedCommandServiceServer() {}

// UnsafeCommandServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to CommandServiceServer will
// result in compilation errors.
type UnsafeCommandServiceServer interface {
	mustEmbedUnimplementedCommandServiceServer()
}

func RegisterCommandServiceServer(s grpc.ServiceRegistrar, srv CommandServiceServer) {
	s.RegisterService(&CommandService_ServiceDesc, srv)
}

func _CommandService_CreateConnection_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateConnectionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CommandServiceServer).CreateConnection(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CommandService_CreateConnection_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CommandServiceServer).CreateConnection(ctx, req.(*CreateConnectionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CommandService_UpdateDataPlaneStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateDataPlaneStatusRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CommandServiceServer).UpdateDataPlaneStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CommandService_UpdateDataPlaneStatus_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CommandServiceServer).UpdateDataPlaneStatus(ctx, req.(*UpdateDataPlaneStatusRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CommandService_UpdateDataPlaneHealth_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateDataPlaneHealthRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CommandServiceServer).UpdateDataPlaneHealth(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CommandService_UpdateDataPlaneHealth_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CommandServiceServer).UpdateDataPlaneHealth(ctx, req.(*UpdateDataPlaneHealthRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CommandService_Subscribe_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(CommandServiceServer).Subscribe(&commandServiceSubscribeServer{stream})
}

type CommandService_SubscribeServer interface {
	Send(*ManagementPlaneRequest) error
	Recv() (*DataPlaneResponse, error)
	grpc.ServerStream
}

type commandServiceSubscribeServer struct {
	grpc.ServerStream
}

func (x *commandServiceSubscribeServer) Send(m *ManagementPlaneRequest) error {
	return x.ServerStream.SendMsg(m)
}

func (x *commandServiceSubscribeServer) Recv() (*DataPlaneResponse, error) {
	m := new(DataPlaneResponse)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// CommandService_ServiceDesc is the grpc.ServiceDesc for CommandService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var CommandService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "mpi.v1.CommandService",
	HandlerType: (*CommandServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateConnection",
			Handler:    _CommandService_CreateConnection_Handler,
		},
		{
			MethodName: "UpdateDataPlaneStatus",
			Handler:    _CommandService_UpdateDataPlaneStatus_Handler,
		},
		{
			MethodName: "UpdateDataPlaneHealth",
			Handler:    _CommandService_UpdateDataPlaneHealth_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Subscribe",
			Handler:       _CommandService_Subscribe_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "mpi/v1/command.proto",
}
