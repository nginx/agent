// Code generated by counterfeiter. DO NOT EDIT.
package v1fakes

import (
	"context"
	"sync"

	v1 "github.com/nginx/agent/v3/api/grpc/mpi/v1"
	"google.golang.org/grpc"
)

type FakeFileServiceClient struct {
	GetFileStub        func(context.Context, *v1.GetFileRequest, ...grpc.CallOption) (*v1.GetFileResponse, error)
	getFileMutex       sync.RWMutex
	getFileArgsForCall []struct {
		arg1 context.Context
		arg2 *v1.GetFileRequest
		arg3 []grpc.CallOption
	}
	getFileReturns struct {
		result1 *v1.GetFileResponse
		result2 error
	}
	getFileReturnsOnCall map[int]struct {
		result1 *v1.GetFileResponse
		result2 error
	}
	GetOverviewStub        func(context.Context, *v1.GetOverviewRequest, ...grpc.CallOption) (*v1.GetOverviewResponse, error)
	getOverviewMutex       sync.RWMutex
	getOverviewArgsForCall []struct {
		arg1 context.Context
		arg2 *v1.GetOverviewRequest
		arg3 []grpc.CallOption
	}
	getOverviewReturns struct {
		result1 *v1.GetOverviewResponse
		result2 error
	}
	getOverviewReturnsOnCall map[int]struct {
		result1 *v1.GetOverviewResponse
		result2 error
	}
	UpdateFileStub        func(context.Context, *v1.UpdateFileRequest, ...grpc.CallOption) (*v1.UpdateFileResponse, error)
	updateFileMutex       sync.RWMutex
	updateFileArgsForCall []struct {
		arg1 context.Context
		arg2 *v1.UpdateFileRequest
		arg3 []grpc.CallOption
	}
	updateFileReturns struct {
		result1 *v1.UpdateFileResponse
		result2 error
	}
	updateFileReturnsOnCall map[int]struct {
		result1 *v1.UpdateFileResponse
		result2 error
	}
	UpdateOverviewStub        func(context.Context, *v1.UpdateOverviewRequest, ...grpc.CallOption) (*v1.UpdateOverviewResponse, error)
	updateOverviewMutex       sync.RWMutex
	updateOverviewArgsForCall []struct {
		arg1 context.Context
		arg2 *v1.UpdateOverviewRequest
		arg3 []grpc.CallOption
	}
	updateOverviewReturns struct {
		result1 *v1.UpdateOverviewResponse
		result2 error
	}
	updateOverviewReturnsOnCall map[int]struct {
		result1 *v1.UpdateOverviewResponse
		result2 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeFileServiceClient) GetFile(arg1 context.Context, arg2 *v1.GetFileRequest, arg3 ...grpc.CallOption) (*v1.GetFileResponse, error) {
	fake.getFileMutex.Lock()
	ret, specificReturn := fake.getFileReturnsOnCall[len(fake.getFileArgsForCall)]
	fake.getFileArgsForCall = append(fake.getFileArgsForCall, struct {
		arg1 context.Context
		arg2 *v1.GetFileRequest
		arg3 []grpc.CallOption
	}{arg1, arg2, arg3})
	stub := fake.GetFileStub
	fakeReturns := fake.getFileReturns
	fake.recordInvocation("GetFile", []interface{}{arg1, arg2, arg3})
	fake.getFileMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3...)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeFileServiceClient) GetFileCallCount() int {
	fake.getFileMutex.RLock()
	defer fake.getFileMutex.RUnlock()
	return len(fake.getFileArgsForCall)
}

func (fake *FakeFileServiceClient) GetFileCalls(stub func(context.Context, *v1.GetFileRequest, ...grpc.CallOption) (*v1.GetFileResponse, error)) {
	fake.getFileMutex.Lock()
	defer fake.getFileMutex.Unlock()
	fake.GetFileStub = stub
}

func (fake *FakeFileServiceClient) GetFileArgsForCall(i int) (context.Context, *v1.GetFileRequest, []grpc.CallOption) {
	fake.getFileMutex.RLock()
	defer fake.getFileMutex.RUnlock()
	argsForCall := fake.getFileArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeFileServiceClient) GetFileReturns(result1 *v1.GetFileResponse, result2 error) {
	fake.getFileMutex.Lock()
	defer fake.getFileMutex.Unlock()
	fake.GetFileStub = nil
	fake.getFileReturns = struct {
		result1 *v1.GetFileResponse
		result2 error
	}{result1, result2}
}

func (fake *FakeFileServiceClient) GetFileReturnsOnCall(i int, result1 *v1.GetFileResponse, result2 error) {
	fake.getFileMutex.Lock()
	defer fake.getFileMutex.Unlock()
	fake.GetFileStub = nil
	if fake.getFileReturnsOnCall == nil {
		fake.getFileReturnsOnCall = make(map[int]struct {
			result1 *v1.GetFileResponse
			result2 error
		})
	}
	fake.getFileReturnsOnCall[i] = struct {
		result1 *v1.GetFileResponse
		result2 error
	}{result1, result2}
}

func (fake *FakeFileServiceClient) GetOverview(arg1 context.Context, arg2 *v1.GetOverviewRequest, arg3 ...grpc.CallOption) (*v1.GetOverviewResponse, error) {
	fake.getOverviewMutex.Lock()
	ret, specificReturn := fake.getOverviewReturnsOnCall[len(fake.getOverviewArgsForCall)]
	fake.getOverviewArgsForCall = append(fake.getOverviewArgsForCall, struct {
		arg1 context.Context
		arg2 *v1.GetOverviewRequest
		arg3 []grpc.CallOption
	}{arg1, arg2, arg3})
	stub := fake.GetOverviewStub
	fakeReturns := fake.getOverviewReturns
	fake.recordInvocation("GetOverview", []interface{}{arg1, arg2, arg3})
	fake.getOverviewMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3...)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeFileServiceClient) GetOverviewCallCount() int {
	fake.getOverviewMutex.RLock()
	defer fake.getOverviewMutex.RUnlock()
	return len(fake.getOverviewArgsForCall)
}

func (fake *FakeFileServiceClient) GetOverviewCalls(stub func(context.Context, *v1.GetOverviewRequest, ...grpc.CallOption) (*v1.GetOverviewResponse, error)) {
	fake.getOverviewMutex.Lock()
	defer fake.getOverviewMutex.Unlock()
	fake.GetOverviewStub = stub
}

func (fake *FakeFileServiceClient) GetOverviewArgsForCall(i int) (context.Context, *v1.GetOverviewRequest, []grpc.CallOption) {
	fake.getOverviewMutex.RLock()
	defer fake.getOverviewMutex.RUnlock()
	argsForCall := fake.getOverviewArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeFileServiceClient) GetOverviewReturns(result1 *v1.GetOverviewResponse, result2 error) {
	fake.getOverviewMutex.Lock()
	defer fake.getOverviewMutex.Unlock()
	fake.GetOverviewStub = nil
	fake.getOverviewReturns = struct {
		result1 *v1.GetOverviewResponse
		result2 error
	}{result1, result2}
}

func (fake *FakeFileServiceClient) GetOverviewReturnsOnCall(i int, result1 *v1.GetOverviewResponse, result2 error) {
	fake.getOverviewMutex.Lock()
	defer fake.getOverviewMutex.Unlock()
	fake.GetOverviewStub = nil
	if fake.getOverviewReturnsOnCall == nil {
		fake.getOverviewReturnsOnCall = make(map[int]struct {
			result1 *v1.GetOverviewResponse
			result2 error
		})
	}
	fake.getOverviewReturnsOnCall[i] = struct {
		result1 *v1.GetOverviewResponse
		result2 error
	}{result1, result2}
}

func (fake *FakeFileServiceClient) UpdateFile(arg1 context.Context, arg2 *v1.UpdateFileRequest, arg3 ...grpc.CallOption) (*v1.UpdateFileResponse, error) {
	fake.updateFileMutex.Lock()
	ret, specificReturn := fake.updateFileReturnsOnCall[len(fake.updateFileArgsForCall)]
	fake.updateFileArgsForCall = append(fake.updateFileArgsForCall, struct {
		arg1 context.Context
		arg2 *v1.UpdateFileRequest
		arg3 []grpc.CallOption
	}{arg1, arg2, arg3})
	stub := fake.UpdateFileStub
	fakeReturns := fake.updateFileReturns
	fake.recordInvocation("UpdateFile", []interface{}{arg1, arg2, arg3})
	fake.updateFileMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3...)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeFileServiceClient) UpdateFileCallCount() int {
	fake.updateFileMutex.RLock()
	defer fake.updateFileMutex.RUnlock()
	return len(fake.updateFileArgsForCall)
}

func (fake *FakeFileServiceClient) UpdateFileCalls(stub func(context.Context, *v1.UpdateFileRequest, ...grpc.CallOption) (*v1.UpdateFileResponse, error)) {
	fake.updateFileMutex.Lock()
	defer fake.updateFileMutex.Unlock()
	fake.UpdateFileStub = stub
}

func (fake *FakeFileServiceClient) UpdateFileArgsForCall(i int) (context.Context, *v1.UpdateFileRequest, []grpc.CallOption) {
	fake.updateFileMutex.RLock()
	defer fake.updateFileMutex.RUnlock()
	argsForCall := fake.updateFileArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeFileServiceClient) UpdateFileReturns(result1 *v1.UpdateFileResponse, result2 error) {
	fake.updateFileMutex.Lock()
	defer fake.updateFileMutex.Unlock()
	fake.UpdateFileStub = nil
	fake.updateFileReturns = struct {
		result1 *v1.UpdateFileResponse
		result2 error
	}{result1, result2}
}

func (fake *FakeFileServiceClient) UpdateFileReturnsOnCall(i int, result1 *v1.UpdateFileResponse, result2 error) {
	fake.updateFileMutex.Lock()
	defer fake.updateFileMutex.Unlock()
	fake.UpdateFileStub = nil
	if fake.updateFileReturnsOnCall == nil {
		fake.updateFileReturnsOnCall = make(map[int]struct {
			result1 *v1.UpdateFileResponse
			result2 error
		})
	}
	fake.updateFileReturnsOnCall[i] = struct {
		result1 *v1.UpdateFileResponse
		result2 error
	}{result1, result2}
}

func (fake *FakeFileServiceClient) UpdateOverview(arg1 context.Context, arg2 *v1.UpdateOverviewRequest, arg3 ...grpc.CallOption) (*v1.UpdateOverviewResponse, error) {
	fake.updateOverviewMutex.Lock()
	ret, specificReturn := fake.updateOverviewReturnsOnCall[len(fake.updateOverviewArgsForCall)]
	fake.updateOverviewArgsForCall = append(fake.updateOverviewArgsForCall, struct {
		arg1 context.Context
		arg2 *v1.UpdateOverviewRequest
		arg3 []grpc.CallOption
	}{arg1, arg2, arg3})
	stub := fake.UpdateOverviewStub
	fakeReturns := fake.updateOverviewReturns
	fake.recordInvocation("UpdateOverview", []interface{}{arg1, arg2, arg3})
	fake.updateOverviewMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3...)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeFileServiceClient) UpdateOverviewCallCount() int {
	fake.updateOverviewMutex.RLock()
	defer fake.updateOverviewMutex.RUnlock()
	return len(fake.updateOverviewArgsForCall)
}

func (fake *FakeFileServiceClient) UpdateOverviewCalls(stub func(context.Context, *v1.UpdateOverviewRequest, ...grpc.CallOption) (*v1.UpdateOverviewResponse, error)) {
	fake.updateOverviewMutex.Lock()
	defer fake.updateOverviewMutex.Unlock()
	fake.UpdateOverviewStub = stub
}

func (fake *FakeFileServiceClient) UpdateOverviewArgsForCall(i int) (context.Context, *v1.UpdateOverviewRequest, []grpc.CallOption) {
	fake.updateOverviewMutex.RLock()
	defer fake.updateOverviewMutex.RUnlock()
	argsForCall := fake.updateOverviewArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeFileServiceClient) UpdateOverviewReturns(result1 *v1.UpdateOverviewResponse, result2 error) {
	fake.updateOverviewMutex.Lock()
	defer fake.updateOverviewMutex.Unlock()
	fake.UpdateOverviewStub = nil
	fake.updateOverviewReturns = struct {
		result1 *v1.UpdateOverviewResponse
		result2 error
	}{result1, result2}
}

func (fake *FakeFileServiceClient) UpdateOverviewReturnsOnCall(i int, result1 *v1.UpdateOverviewResponse, result2 error) {
	fake.updateOverviewMutex.Lock()
	defer fake.updateOverviewMutex.Unlock()
	fake.UpdateOverviewStub = nil
	if fake.updateOverviewReturnsOnCall == nil {
		fake.updateOverviewReturnsOnCall = make(map[int]struct {
			result1 *v1.UpdateOverviewResponse
			result2 error
		})
	}
	fake.updateOverviewReturnsOnCall[i] = struct {
		result1 *v1.UpdateOverviewResponse
		result2 error
	}{result1, result2}
}

func (fake *FakeFileServiceClient) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.getFileMutex.RLock()
	defer fake.getFileMutex.RUnlock()
	fake.getOverviewMutex.RLock()
	defer fake.getOverviewMutex.RUnlock()
	fake.updateFileMutex.RLock()
	defer fake.updateFileMutex.RUnlock()
	fake.updateOverviewMutex.RLock()
	defer fake.updateOverviewMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakeFileServiceClient) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ v1.FileServiceClient = new(FakeFileServiceClient)
