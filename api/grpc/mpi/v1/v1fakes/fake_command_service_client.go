// Code generated by counterfeiter. DO NOT EDIT.
package v1fakes

import (
	"context"
	"sync"

	v1 "github.com/nginx/agent/v3/api/grpc/mpi/v1"
	"google.golang.org/grpc"
)

type FakeCommandServiceClient struct {
	CreateConnectionStub        func(context.Context, *v1.CreateConnectionRequest, ...grpc.CallOption) (*v1.CreateConnectionResponse, error)
	createConnectionMutex       sync.RWMutex
	createConnectionArgsForCall []struct {
		arg1 context.Context
		arg2 *v1.CreateConnectionRequest
		arg3 []grpc.CallOption
	}
	createConnectionReturns struct {
		result1 *v1.CreateConnectionResponse
		result2 error
	}
	createConnectionReturnsOnCall map[int]struct {
		result1 *v1.CreateConnectionResponse
		result2 error
	}
	SubscribeStub        func(context.Context, ...grpc.CallOption) (grpc.BidiStreamingClient[v1.DataPlaneResponse, v1.ManagementPlaneRequest], error)
	subscribeMutex       sync.RWMutex
	subscribeArgsForCall []struct {
		arg1 context.Context
		arg2 []grpc.CallOption
	}
	subscribeReturns struct {
		result1 grpc.BidiStreamingClient[v1.DataPlaneResponse, v1.ManagementPlaneRequest]
		result2 error
	}
	subscribeReturnsOnCall map[int]struct {
		result1 grpc.BidiStreamingClient[v1.DataPlaneResponse, v1.ManagementPlaneRequest]
		result2 error
	}
	UpdateDataPlaneHealthStub        func(context.Context, *v1.UpdateDataPlaneHealthRequest, ...grpc.CallOption) (*v1.UpdateDataPlaneHealthResponse, error)
	updateDataPlaneHealthMutex       sync.RWMutex
	updateDataPlaneHealthArgsForCall []struct {
		arg1 context.Context
		arg2 *v1.UpdateDataPlaneHealthRequest
		arg3 []grpc.CallOption
	}
	updateDataPlaneHealthReturns struct {
		result1 *v1.UpdateDataPlaneHealthResponse
		result2 error
	}
	updateDataPlaneHealthReturnsOnCall map[int]struct {
		result1 *v1.UpdateDataPlaneHealthResponse
		result2 error
	}
	UpdateDataPlaneStatusStub        func(context.Context, *v1.UpdateDataPlaneStatusRequest, ...grpc.CallOption) (*v1.UpdateDataPlaneStatusResponse, error)
	updateDataPlaneStatusMutex       sync.RWMutex
	updateDataPlaneStatusArgsForCall []struct {
		arg1 context.Context
		arg2 *v1.UpdateDataPlaneStatusRequest
		arg3 []grpc.CallOption
	}
	updateDataPlaneStatusReturns struct {
		result1 *v1.UpdateDataPlaneStatusResponse
		result2 error
	}
	updateDataPlaneStatusReturnsOnCall map[int]struct {
		result1 *v1.UpdateDataPlaneStatusResponse
		result2 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeCommandServiceClient) CreateConnection(arg1 context.Context, arg2 *v1.CreateConnectionRequest, arg3 ...grpc.CallOption) (*v1.CreateConnectionResponse, error) {
	fake.createConnectionMutex.Lock()
	ret, specificReturn := fake.createConnectionReturnsOnCall[len(fake.createConnectionArgsForCall)]
	fake.createConnectionArgsForCall = append(fake.createConnectionArgsForCall, struct {
		arg1 context.Context
		arg2 *v1.CreateConnectionRequest
		arg3 []grpc.CallOption
	}{arg1, arg2, arg3})
	stub := fake.CreateConnectionStub
	fakeReturns := fake.createConnectionReturns
	fake.recordInvocation("CreateConnection", []interface{}{arg1, arg2, arg3})
	fake.createConnectionMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3...)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeCommandServiceClient) CreateConnectionCallCount() int {
	fake.createConnectionMutex.RLock()
	defer fake.createConnectionMutex.RUnlock()
	return len(fake.createConnectionArgsForCall)
}

func (fake *FakeCommandServiceClient) CreateConnectionCalls(stub func(context.Context, *v1.CreateConnectionRequest, ...grpc.CallOption) (*v1.CreateConnectionResponse, error)) {
	fake.createConnectionMutex.Lock()
	defer fake.createConnectionMutex.Unlock()
	fake.CreateConnectionStub = stub
}

func (fake *FakeCommandServiceClient) CreateConnectionArgsForCall(i int) (context.Context, *v1.CreateConnectionRequest, []grpc.CallOption) {
	fake.createConnectionMutex.RLock()
	defer fake.createConnectionMutex.RUnlock()
	argsForCall := fake.createConnectionArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeCommandServiceClient) CreateConnectionReturns(result1 *v1.CreateConnectionResponse, result2 error) {
	fake.createConnectionMutex.Lock()
	defer fake.createConnectionMutex.Unlock()
	fake.CreateConnectionStub = nil
	fake.createConnectionReturns = struct {
		result1 *v1.CreateConnectionResponse
		result2 error
	}{result1, result2}
}

func (fake *FakeCommandServiceClient) CreateConnectionReturnsOnCall(i int, result1 *v1.CreateConnectionResponse, result2 error) {
	fake.createConnectionMutex.Lock()
	defer fake.createConnectionMutex.Unlock()
	fake.CreateConnectionStub = nil
	if fake.createConnectionReturnsOnCall == nil {
		fake.createConnectionReturnsOnCall = make(map[int]struct {
			result1 *v1.CreateConnectionResponse
			result2 error
		})
	}
	fake.createConnectionReturnsOnCall[i] = struct {
		result1 *v1.CreateConnectionResponse
		result2 error
	}{result1, result2}
}

func (fake *FakeCommandServiceClient) Subscribe(arg1 context.Context, arg2 ...grpc.CallOption) (grpc.BidiStreamingClient[v1.DataPlaneResponse, v1.ManagementPlaneRequest], error) {
	fake.subscribeMutex.Lock()
	ret, specificReturn := fake.subscribeReturnsOnCall[len(fake.subscribeArgsForCall)]
	fake.subscribeArgsForCall = append(fake.subscribeArgsForCall, struct {
		arg1 context.Context
		arg2 []grpc.CallOption
	}{arg1, arg2})
	stub := fake.SubscribeStub
	fakeReturns := fake.subscribeReturns
	fake.recordInvocation("Subscribe", []interface{}{arg1, arg2})
	fake.subscribeMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2...)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeCommandServiceClient) SubscribeCallCount() int {
	fake.subscribeMutex.RLock()
	defer fake.subscribeMutex.RUnlock()
	return len(fake.subscribeArgsForCall)
}

func (fake *FakeCommandServiceClient) SubscribeCalls(stub func(context.Context, ...grpc.CallOption) (grpc.BidiStreamingClient[v1.DataPlaneResponse, v1.ManagementPlaneRequest], error)) {
	fake.subscribeMutex.Lock()
	defer fake.subscribeMutex.Unlock()
	fake.SubscribeStub = stub
}

func (fake *FakeCommandServiceClient) SubscribeArgsForCall(i int) (context.Context, []grpc.CallOption) {
	fake.subscribeMutex.RLock()
	defer fake.subscribeMutex.RUnlock()
	argsForCall := fake.subscribeArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2
}

func (fake *FakeCommandServiceClient) SubscribeReturns(result1 grpc.BidiStreamingClient[v1.DataPlaneResponse, v1.ManagementPlaneRequest], result2 error) {
	fake.subscribeMutex.Lock()
	defer fake.subscribeMutex.Unlock()
	fake.SubscribeStub = nil
	fake.subscribeReturns = struct {
		result1 grpc.BidiStreamingClient[v1.DataPlaneResponse, v1.ManagementPlaneRequest]
		result2 error
	}{result1, result2}
}

func (fake *FakeCommandServiceClient) SubscribeReturnsOnCall(i int, result1 grpc.BidiStreamingClient[v1.DataPlaneResponse, v1.ManagementPlaneRequest], result2 error) {
	fake.subscribeMutex.Lock()
	defer fake.subscribeMutex.Unlock()
	fake.SubscribeStub = nil
	if fake.subscribeReturnsOnCall == nil {
		fake.subscribeReturnsOnCall = make(map[int]struct {
			result1 grpc.BidiStreamingClient[v1.DataPlaneResponse, v1.ManagementPlaneRequest]
			result2 error
		})
	}
	fake.subscribeReturnsOnCall[i] = struct {
		result1 grpc.BidiStreamingClient[v1.DataPlaneResponse, v1.ManagementPlaneRequest]
		result2 error
	}{result1, result2}
}

func (fake *FakeCommandServiceClient) UpdateDataPlaneHealth(arg1 context.Context, arg2 *v1.UpdateDataPlaneHealthRequest, arg3 ...grpc.CallOption) (*v1.UpdateDataPlaneHealthResponse, error) {
	fake.updateDataPlaneHealthMutex.Lock()
	ret, specificReturn := fake.updateDataPlaneHealthReturnsOnCall[len(fake.updateDataPlaneHealthArgsForCall)]
	fake.updateDataPlaneHealthArgsForCall = append(fake.updateDataPlaneHealthArgsForCall, struct {
		arg1 context.Context
		arg2 *v1.UpdateDataPlaneHealthRequest
		arg3 []grpc.CallOption
	}{arg1, arg2, arg3})
	stub := fake.UpdateDataPlaneHealthStub
	fakeReturns := fake.updateDataPlaneHealthReturns
	fake.recordInvocation("UpdateDataPlaneHealth", []interface{}{arg1, arg2, arg3})
	fake.updateDataPlaneHealthMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3...)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeCommandServiceClient) UpdateDataPlaneHealthCallCount() int {
	fake.updateDataPlaneHealthMutex.RLock()
	defer fake.updateDataPlaneHealthMutex.RUnlock()
	return len(fake.updateDataPlaneHealthArgsForCall)
}

func (fake *FakeCommandServiceClient) UpdateDataPlaneHealthCalls(stub func(context.Context, *v1.UpdateDataPlaneHealthRequest, ...grpc.CallOption) (*v1.UpdateDataPlaneHealthResponse, error)) {
	fake.updateDataPlaneHealthMutex.Lock()
	defer fake.updateDataPlaneHealthMutex.Unlock()
	fake.UpdateDataPlaneHealthStub = stub
}

func (fake *FakeCommandServiceClient) UpdateDataPlaneHealthArgsForCall(i int) (context.Context, *v1.UpdateDataPlaneHealthRequest, []grpc.CallOption) {
	fake.updateDataPlaneHealthMutex.RLock()
	defer fake.updateDataPlaneHealthMutex.RUnlock()
	argsForCall := fake.updateDataPlaneHealthArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeCommandServiceClient) UpdateDataPlaneHealthReturns(result1 *v1.UpdateDataPlaneHealthResponse, result2 error) {
	fake.updateDataPlaneHealthMutex.Lock()
	defer fake.updateDataPlaneHealthMutex.Unlock()
	fake.UpdateDataPlaneHealthStub = nil
	fake.updateDataPlaneHealthReturns = struct {
		result1 *v1.UpdateDataPlaneHealthResponse
		result2 error
	}{result1, result2}
}

func (fake *FakeCommandServiceClient) UpdateDataPlaneHealthReturnsOnCall(i int, result1 *v1.UpdateDataPlaneHealthResponse, result2 error) {
	fake.updateDataPlaneHealthMutex.Lock()
	defer fake.updateDataPlaneHealthMutex.Unlock()
	fake.UpdateDataPlaneHealthStub = nil
	if fake.updateDataPlaneHealthReturnsOnCall == nil {
		fake.updateDataPlaneHealthReturnsOnCall = make(map[int]struct {
			result1 *v1.UpdateDataPlaneHealthResponse
			result2 error
		})
	}
	fake.updateDataPlaneHealthReturnsOnCall[i] = struct {
		result1 *v1.UpdateDataPlaneHealthResponse
		result2 error
	}{result1, result2}
}

func (fake *FakeCommandServiceClient) UpdateDataPlaneStatus(arg1 context.Context, arg2 *v1.UpdateDataPlaneStatusRequest, arg3 ...grpc.CallOption) (*v1.UpdateDataPlaneStatusResponse, error) {
	fake.updateDataPlaneStatusMutex.Lock()
	ret, specificReturn := fake.updateDataPlaneStatusReturnsOnCall[len(fake.updateDataPlaneStatusArgsForCall)]
	fake.updateDataPlaneStatusArgsForCall = append(fake.updateDataPlaneStatusArgsForCall, struct {
		arg1 context.Context
		arg2 *v1.UpdateDataPlaneStatusRequest
		arg3 []grpc.CallOption
	}{arg1, arg2, arg3})
	stub := fake.UpdateDataPlaneStatusStub
	fakeReturns := fake.updateDataPlaneStatusReturns
	fake.recordInvocation("UpdateDataPlaneStatus", []interface{}{arg1, arg2, arg3})
	fake.updateDataPlaneStatusMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3...)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeCommandServiceClient) UpdateDataPlaneStatusCallCount() int {
	fake.updateDataPlaneStatusMutex.RLock()
	defer fake.updateDataPlaneStatusMutex.RUnlock()
	return len(fake.updateDataPlaneStatusArgsForCall)
}

func (fake *FakeCommandServiceClient) UpdateDataPlaneStatusCalls(stub func(context.Context, *v1.UpdateDataPlaneStatusRequest, ...grpc.CallOption) (*v1.UpdateDataPlaneStatusResponse, error)) {
	fake.updateDataPlaneStatusMutex.Lock()
	defer fake.updateDataPlaneStatusMutex.Unlock()
	fake.UpdateDataPlaneStatusStub = stub
}

func (fake *FakeCommandServiceClient) UpdateDataPlaneStatusArgsForCall(i int) (context.Context, *v1.UpdateDataPlaneStatusRequest, []grpc.CallOption) {
	fake.updateDataPlaneStatusMutex.RLock()
	defer fake.updateDataPlaneStatusMutex.RUnlock()
	argsForCall := fake.updateDataPlaneStatusArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeCommandServiceClient) UpdateDataPlaneStatusReturns(result1 *v1.UpdateDataPlaneStatusResponse, result2 error) {
	fake.updateDataPlaneStatusMutex.Lock()
	defer fake.updateDataPlaneStatusMutex.Unlock()
	fake.UpdateDataPlaneStatusStub = nil
	fake.updateDataPlaneStatusReturns = struct {
		result1 *v1.UpdateDataPlaneStatusResponse
		result2 error
	}{result1, result2}
}

func (fake *FakeCommandServiceClient) UpdateDataPlaneStatusReturnsOnCall(i int, result1 *v1.UpdateDataPlaneStatusResponse, result2 error) {
	fake.updateDataPlaneStatusMutex.Lock()
	defer fake.updateDataPlaneStatusMutex.Unlock()
	fake.UpdateDataPlaneStatusStub = nil
	if fake.updateDataPlaneStatusReturnsOnCall == nil {
		fake.updateDataPlaneStatusReturnsOnCall = make(map[int]struct {
			result1 *v1.UpdateDataPlaneStatusResponse
			result2 error
		})
	}
	fake.updateDataPlaneStatusReturnsOnCall[i] = struct {
		result1 *v1.UpdateDataPlaneStatusResponse
		result2 error
	}{result1, result2}
}

func (fake *FakeCommandServiceClient) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.createConnectionMutex.RLock()
	defer fake.createConnectionMutex.RUnlock()
	fake.subscribeMutex.RLock()
	defer fake.subscribeMutex.RUnlock()
	fake.updateDataPlaneHealthMutex.RLock()
	defer fake.updateDataPlaneHealthMutex.RUnlock()
	fake.updateDataPlaneStatusMutex.RLock()
	defer fake.updateDataPlaneStatusMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakeCommandServiceClient) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ v1.CommandServiceClient = new(FakeCommandServiceClient)
