// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: ingest_svc.proto

package proto

import (
	context "context"
	fmt "fmt"
	proto "github.com/gogo/protobuf/proto"
	types "github.com/gogo/protobuf/types"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

func init() { proto.RegisterFile("ingest_svc.proto", fileDescriptor_e87a1d7991134362) }

var fileDescriptor_e87a1d7991134362 = []byte{
	// 197 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0x12, 0xc8, 0xcc, 0x4b, 0x4f,
	0x2d, 0x2e, 0x89, 0x2f, 0x2e, 0x4b, 0xd6, 0x2b, 0x28, 0xca, 0x2f, 0xc9, 0x17, 0x12, 0x4a, 0x33,
	0xd5, 0xcb, 0x4b, 0xcf, 0xcc, 0xab, 0xd0, 0x4b, 0x4c, 0x4f, 0xcd, 0x2b, 0xd1, 0x2b, 0x4e, 0xc9,
	0x96, 0x92, 0x4e, 0xcf, 0xcf, 0x4f, 0xcf, 0x49, 0xd5, 0x07, 0xab, 0x48, 0x2a, 0x4d, 0xd3, 0x4f,
	0xcd, 0x2d, 0x28, 0xa9, 0x84, 0x68, 0x90, 0xe2, 0xcd, 0x4d, 0x2d, 0x29, 0xca, 0x4c, 0x2e, 0x86,
	0x70, 0x8d, 0x12, 0xb8, 0x38, 0x3c, 0xc1, 0x66, 0xa6, 0x16, 0x09, 0x85, 0x70, 0x09, 0x07, 0x97,
	0x14, 0xa5, 0x26, 0xe6, 0xfa, 0x42, 0x94, 0x04, 0xa5, 0x16, 0xe4, 0x17, 0x95, 0x08, 0x29, 0xea,
	0x61, 0xda, 0xa1, 0x87, 0xa2, 0x44, 0x4a, 0x4c, 0x0f, 0x62, 0xa5, 0x1e, 0xcc, 0x4a, 0x3d, 0x57,
	0x90, 0x95, 0x4a, 0x0c, 0x1a, 0x8c, 0x4e, 0xe6, 0x27, 0x1e, 0xc9, 0x31, 0x5e, 0x78, 0x24, 0xc7,
	0xf8, 0xe0, 0x91, 0x1c, 0x63, 0x94, 0x66, 0x7a, 0x66, 0x49, 0x46, 0x69, 0x92, 0x5e, 0x72, 0x7e,
	0xae, 0x3e, 0xd8, 0x4c, 0x7d, 0xb0, 0x99, 0xfa, 0xc5, 0x29, 0xd9, 0xfa, 0x65, 0x46, 0x10, 0x27,
	0x5b, 0x43, 0x4c, 0x61, 0x03, 0x53, 0xc6, 0x80, 0x00, 0x00, 0x00, 0xff, 0xff, 0xf2, 0x51, 0xc4,
	0x57, 0xf5, 0x00, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// IngesterClient is the client API for Ingester service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type IngesterClient interface {
	// A client-to-server streaming RPC to deliver high volume metrics reports.
	StreamMetricsReport(ctx context.Context, opts ...grpc.CallOption) (Ingester_StreamMetricsReportClient, error)
}

type ingesterClient struct {
	cc *grpc.ClientConn
}

func NewIngesterClient(cc *grpc.ClientConn) IngesterClient {
	return &ingesterClient{cc}
}

func (c *ingesterClient) StreamMetricsReport(ctx context.Context, opts ...grpc.CallOption) (Ingester_StreamMetricsReportClient, error) {
	stream, err := c.cc.NewStream(ctx, &_Ingester_serviceDesc.Streams[0], "/f5.nginx.agent.sdk.Ingester/StreamMetricsReport", opts...)
	if err != nil {
		return nil, err
	}
	x := &ingesterStreamMetricsReportClient{stream}
	return x, nil
}

type Ingester_StreamMetricsReportClient interface {
	Send(*MetricsReport) error
	CloseAndRecv() (*types.Empty, error)
	grpc.ClientStream
}

type ingesterStreamMetricsReportClient struct {
	grpc.ClientStream
}

func (x *ingesterStreamMetricsReportClient) Send(m *MetricsReport) error {
	return x.ClientStream.SendMsg(m)
}

func (x *ingesterStreamMetricsReportClient) CloseAndRecv() (*types.Empty, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(types.Empty)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// IngesterServer is the server API for Ingester service.
type IngesterServer interface {
	// A client-to-server streaming RPC to deliver high volume metrics reports.
	StreamMetricsReport(Ingester_StreamMetricsReportServer) error
}

// UnimplementedIngesterServer can be embedded to have forward compatible implementations.
type UnimplementedIngesterServer struct {
}

func (*UnimplementedIngesterServer) StreamMetricsReport(srv Ingester_StreamMetricsReportServer) error {
	return status.Errorf(codes.Unimplemented, "method StreamMetricsReport not implemented")
}

func RegisterIngesterServer(s *grpc.Server, srv IngesterServer) {
	s.RegisterService(&_Ingester_serviceDesc, srv)
}

func _Ingester_StreamMetricsReport_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(IngesterServer).StreamMetricsReport(&ingesterStreamMetricsReportServer{stream})
}

type Ingester_StreamMetricsReportServer interface {
	SendAndClose(*types.Empty) error
	Recv() (*MetricsReport, error)
	grpc.ServerStream
}

type ingesterStreamMetricsReportServer struct {
	grpc.ServerStream
}

func (x *ingesterStreamMetricsReportServer) SendAndClose(m *types.Empty) error {
	return x.ServerStream.SendMsg(m)
}

func (x *ingesterStreamMetricsReportServer) Recv() (*MetricsReport, error) {
	m := new(MetricsReport)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

var _Ingester_serviceDesc = grpc.ServiceDesc{
	ServiceName: "f5.nginx.agent.sdk.Ingester",
	HandlerType: (*IngesterServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "StreamMetricsReport",
			Handler:       _Ingester_StreamMetricsReport_Handler,
			ClientStreams: true,
		},
	},
	Metadata: "ingest_svc.proto",
}
