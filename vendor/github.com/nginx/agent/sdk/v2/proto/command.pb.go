// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: command.proto

package proto

import (
	fmt "fmt"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	events "github.com/nginx/agent/sdk/v2/proto/events"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type Command_CommandType int32

const (
	Command_NORMAL   Command_CommandType = 0
	Command_DOWNLOAD Command_CommandType = 1
	Command_UPLOAD   Command_CommandType = 2
)

var Command_CommandType_name = map[int32]string{
	0: "NORMAL",
	1: "DOWNLOAD",
	2: "UPLOAD",
}

var Command_CommandType_value = map[string]int32{
	"NORMAL":   0,
	"DOWNLOAD": 1,
	"UPLOAD":   2,
}

func (x Command_CommandType) String() string {
	return proto.EnumName(Command_CommandType_name, int32(x))
}

func (Command_CommandType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_213c0bb044472049, []int{0, 0}
}

type CommandStatusResponse_CommandStatus int32

const (
	CommandStatusResponse_CMD_UNKNOWN CommandStatusResponse_CommandStatus = 0
	CommandStatusResponse_CMD_OK      CommandStatusResponse_CommandStatus = 1
	CommandStatusResponse_CMD_ERROR   CommandStatusResponse_CommandStatus = 2
)

var CommandStatusResponse_CommandStatus_name = map[int32]string{
	0: "CMD_UNKNOWN",
	1: "CMD_OK",
	2: "CMD_ERROR",
}

var CommandStatusResponse_CommandStatus_value = map[string]int32{
	"CMD_UNKNOWN": 0,
	"CMD_OK":      1,
	"CMD_ERROR":   2,
}

func (x CommandStatusResponse_CommandStatus) String() string {
	return proto.EnumName(CommandStatusResponse_CommandStatus_name, int32(x))
}

func (CommandStatusResponse_CommandStatus) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_213c0bb044472049, []int{1, 0}
}

type CommandStatusResponse_CommandErrorCode int32

const (
	CommandStatusResponse_ERR_OK      CommandStatusResponse_CommandErrorCode = 0
	CommandStatusResponse_ERR_UNKNOWN CommandStatusResponse_CommandErrorCode = 1
)

var CommandStatusResponse_CommandErrorCode_name = map[int32]string{
	0: "ERR_OK",
	1: "ERR_UNKNOWN",
}

var CommandStatusResponse_CommandErrorCode_value = map[string]int32{
	"ERR_OK":      0,
	"ERR_UNKNOWN": 1,
}

func (x CommandStatusResponse_CommandErrorCode) String() string {
	return proto.EnumName(CommandStatusResponse_CommandErrorCode_name, int32(x))
}

func (CommandStatusResponse_CommandErrorCode) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_213c0bb044472049, []int{1, 1}
}

type NginxConfigStatus_Status int32

const (
	NginxConfigStatus_PENDING NginxConfigStatus_Status = 0
	NginxConfigStatus_OK      NginxConfigStatus_Status = 1
	NginxConfigStatus_ERROR   NginxConfigStatus_Status = 2
)

var NginxConfigStatus_Status_name = map[int32]string{
	0: "PENDING",
	1: "OK",
	2: "ERROR",
}

var NginxConfigStatus_Status_value = map[string]int32{
	"PENDING": 0,
	"OK":      1,
	"ERROR":   2,
}

func (x NginxConfigStatus_Status) String() string {
	return proto.EnumName(NginxConfigStatus_Status_name, int32(x))
}

func (NginxConfigStatus_Status) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_213c0bb044472049, []int{4, 0}
}

type UploadStatus_TransferStatus int32

const (
	UploadStatus_UNKNOWN UploadStatus_TransferStatus = 0
	UploadStatus_OK      UploadStatus_TransferStatus = 1
	UploadStatus_FAILED  UploadStatus_TransferStatus = 2
)

var UploadStatus_TransferStatus_name = map[int32]string{
	0: "UNKNOWN",
	1: "OK",
	2: "FAILED",
}

var UploadStatus_TransferStatus_value = map[string]int32{
	"UNKNOWN": 0,
	"OK":      1,
	"FAILED":  2,
}

func (x UploadStatus_TransferStatus) String() string {
	return proto.EnumName(UploadStatus_TransferStatus_name, int32(x))
}

func (UploadStatus_TransferStatus) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_213c0bb044472049, []int{9, 0}
}

// Command is the envelope sent between the management plane and the data plane, requesting some action or reporting a response
type Command struct {
	Meta *Metadata `protobuf:"bytes,1,opt,name=meta,proto3" json:"meta"`
	// used as a dispatch flag to quickly send the command to the correct base processor that will then further sort
	// based on the actual data type
	Type Command_CommandType `protobuf:"varint,2,opt,name=type,proto3,enum=f5.nginx.agent.sdk.Command_CommandType" json:"type"`
	// Types that are valid to be assigned to Data:
	//	*Command_CmdStatus
	//	*Command_NginxConfig
	//	*Command_NginxConfigResponse
	//	*Command_AgentConnectRequest
	//	*Command_AgentConnectResponse
	//	*Command_AgentConfigRequest
	//	*Command_AgentConfig
	//	*Command_DataplaneStatus
	//	*Command_EventReport
	//	*Command_DataplaneSoftwareDetails
	//	*Command_DataplaneUpdate
	Data                 isCommand_Data `protobuf_oneof:"data"`
	XXX_NoUnkeyedLiteral struct{}       `json:"-"`
	XXX_unrecognized     []byte         `json:"-"`
	XXX_sizecache        int32          `json:"-"`
}

func (m *Command) Reset()         { *m = Command{} }
func (m *Command) String() string { return proto.CompactTextString(m) }
func (*Command) ProtoMessage()    {}
func (*Command) Descriptor() ([]byte, []int) {
	return fileDescriptor_213c0bb044472049, []int{0}
}
func (m *Command) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Command) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Command.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Command) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Command.Merge(m, src)
}
func (m *Command) XXX_Size() int {
	return m.Size()
}
func (m *Command) XXX_DiscardUnknown() {
	xxx_messageInfo_Command.DiscardUnknown(m)
}

var xxx_messageInfo_Command proto.InternalMessageInfo

type isCommand_Data interface {
	isCommand_Data()
	MarshalTo([]byte) (int, error)
	Size() int
}

type Command_CmdStatus struct {
	CmdStatus *CommandStatusResponse `protobuf:"bytes,3,opt,name=cmd_status,json=cmdStatus,proto3,oneof" json:"cmd_status"`
}
type Command_NginxConfig struct {
	NginxConfig *NginxConfig `protobuf:"bytes,4,opt,name=nginx_config,json=nginxConfig,proto3,oneof" json:"nginx_config"`
}
type Command_NginxConfigResponse struct {
	NginxConfigResponse *NginxConfigResponse `protobuf:"bytes,5,opt,name=nginx_config_response,json=nginxConfigResponse,proto3,oneof" json:"nginx_config_response"`
}
type Command_AgentConnectRequest struct {
	AgentConnectRequest *AgentConnectRequest `protobuf:"bytes,6,opt,name=agent_connect_request,json=agentConnectRequest,proto3,oneof" json:"agent_connect_request"`
}
type Command_AgentConnectResponse struct {
	AgentConnectResponse *AgentConnectResponse `protobuf:"bytes,7,opt,name=agent_connect_response,json=agentConnectResponse,proto3,oneof" json:"agent_connect_response"`
}
type Command_AgentConfigRequest struct {
	AgentConfigRequest *AgentConfigRequest `protobuf:"bytes,8,opt,name=agent_config_request,json=agentConfigRequest,proto3,oneof" json:"agent_config_request"`
}
type Command_AgentConfig struct {
	AgentConfig *AgentConfig `protobuf:"bytes,9,opt,name=agent_config,json=agentConfig,proto3,oneof" json:"agent_config"`
}
type Command_DataplaneStatus struct {
	DataplaneStatus *DataplaneStatus `protobuf:"bytes,11,opt,name=dataplane_status,json=dataplaneStatus,proto3,oneof" json:"dataplane_status"`
}
type Command_EventReport struct {
	EventReport *events.EventReport `protobuf:"bytes,12,opt,name=event_report,json=eventReport,proto3,oneof" json:"event_report"`
}
type Command_DataplaneSoftwareDetails struct {
	DataplaneSoftwareDetails *DataplaneSoftwareDetails `protobuf:"bytes,13,opt,name=dataplane_software_details,json=dataplaneSoftwareDetails,proto3,oneof" json:"dataplane_software_details"`
}
type Command_DataplaneUpdate struct {
	DataplaneUpdate *DataplaneUpdate `protobuf:"bytes,14,opt,name=dataplane_update,json=dataplaneUpdate,proto3,oneof" json:"dataplane_update"`
}

func (*Command_CmdStatus) isCommand_Data()                {}
func (*Command_NginxConfig) isCommand_Data()              {}
func (*Command_NginxConfigResponse) isCommand_Data()      {}
func (*Command_AgentConnectRequest) isCommand_Data()      {}
func (*Command_AgentConnectResponse) isCommand_Data()     {}
func (*Command_AgentConfigRequest) isCommand_Data()       {}
func (*Command_AgentConfig) isCommand_Data()              {}
func (*Command_DataplaneStatus) isCommand_Data()          {}
func (*Command_EventReport) isCommand_Data()              {}
func (*Command_DataplaneSoftwareDetails) isCommand_Data() {}
func (*Command_DataplaneUpdate) isCommand_Data()          {}

func (m *Command) GetData() isCommand_Data {
	if m != nil {
		return m.Data
	}
	return nil
}

func (m *Command) GetMeta() *Metadata {
	if m != nil {
		return m.Meta
	}
	return nil
}

func (m *Command) GetType() Command_CommandType {
	if m != nil {
		return m.Type
	}
	return Command_NORMAL
}

func (m *Command) GetCmdStatus() *CommandStatusResponse {
	if x, ok := m.GetData().(*Command_CmdStatus); ok {
		return x.CmdStatus
	}
	return nil
}

func (m *Command) GetNginxConfig() *NginxConfig {
	if x, ok := m.GetData().(*Command_NginxConfig); ok {
		return x.NginxConfig
	}
	return nil
}

func (m *Command) GetNginxConfigResponse() *NginxConfigResponse {
	if x, ok := m.GetData().(*Command_NginxConfigResponse); ok {
		return x.NginxConfigResponse
	}
	return nil
}

func (m *Command) GetAgentConnectRequest() *AgentConnectRequest {
	if x, ok := m.GetData().(*Command_AgentConnectRequest); ok {
		return x.AgentConnectRequest
	}
	return nil
}

func (m *Command) GetAgentConnectResponse() *AgentConnectResponse {
	if x, ok := m.GetData().(*Command_AgentConnectResponse); ok {
		return x.AgentConnectResponse
	}
	return nil
}

func (m *Command) GetAgentConfigRequest() *AgentConfigRequest {
	if x, ok := m.GetData().(*Command_AgentConfigRequest); ok {
		return x.AgentConfigRequest
	}
	return nil
}

func (m *Command) GetAgentConfig() *AgentConfig {
	if x, ok := m.GetData().(*Command_AgentConfig); ok {
		return x.AgentConfig
	}
	return nil
}

func (m *Command) GetDataplaneStatus() *DataplaneStatus {
	if x, ok := m.GetData().(*Command_DataplaneStatus); ok {
		return x.DataplaneStatus
	}
	return nil
}

func (m *Command) GetEventReport() *events.EventReport {
	if x, ok := m.GetData().(*Command_EventReport); ok {
		return x.EventReport
	}
	return nil
}

func (m *Command) GetDataplaneSoftwareDetails() *DataplaneSoftwareDetails {
	if x, ok := m.GetData().(*Command_DataplaneSoftwareDetails); ok {
		return x.DataplaneSoftwareDetails
	}
	return nil
}

func (m *Command) GetDataplaneUpdate() *DataplaneUpdate {
	if x, ok := m.GetData().(*Command_DataplaneUpdate); ok {
		return x.DataplaneUpdate
	}
	return nil
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*Command) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*Command_CmdStatus)(nil),
		(*Command_NginxConfig)(nil),
		(*Command_NginxConfigResponse)(nil),
		(*Command_AgentConnectRequest)(nil),
		(*Command_AgentConnectResponse)(nil),
		(*Command_AgentConfigRequest)(nil),
		(*Command_AgentConfig)(nil),
		(*Command_DataplaneStatus)(nil),
		(*Command_EventReport)(nil),
		(*Command_DataplaneSoftwareDetails)(nil),
		(*Command_DataplaneUpdate)(nil),
	}
}

type CommandStatusResponse struct {
	Status               CommandStatusResponse_CommandStatus    `protobuf:"varint,1,opt,name=status,proto3,enum=f5.nginx.agent.sdk.CommandStatusResponse_CommandStatus" json:"status"`
	ErrorCode            CommandStatusResponse_CommandErrorCode `protobuf:"varint,2,opt,name=error_code,json=errorCode,proto3,enum=f5.nginx.agent.sdk.CommandStatusResponse_CommandErrorCode" json:"error_code"`
	Message              string                                 `protobuf:"bytes,3,opt,name=message,proto3" json:"message"`
	Error                string                                 `protobuf:"bytes,4,opt,name=error,proto3" json:"error"`
	XXX_NoUnkeyedLiteral struct{}                               `json:"-"`
	XXX_unrecognized     []byte                                 `json:"-"`
	XXX_sizecache        int32                                  `json:"-"`
}

func (m *CommandStatusResponse) Reset()         { *m = CommandStatusResponse{} }
func (m *CommandStatusResponse) String() string { return proto.CompactTextString(m) }
func (*CommandStatusResponse) ProtoMessage()    {}
func (*CommandStatusResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_213c0bb044472049, []int{1}
}
func (m *CommandStatusResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CommandStatusResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CommandStatusResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CommandStatusResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CommandStatusResponse.Merge(m, src)
}
func (m *CommandStatusResponse) XXX_Size() int {
	return m.Size()
}
func (m *CommandStatusResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_CommandStatusResponse.DiscardUnknown(m)
}

var xxx_messageInfo_CommandStatusResponse proto.InternalMessageInfo

func (m *CommandStatusResponse) GetStatus() CommandStatusResponse_CommandStatus {
	if m != nil {
		return m.Status
	}
	return CommandStatusResponse_CMD_UNKNOWN
}

func (m *CommandStatusResponse) GetErrorCode() CommandStatusResponse_CommandErrorCode {
	if m != nil {
		return m.ErrorCode
	}
	return CommandStatusResponse_ERR_OK
}

func (m *CommandStatusResponse) GetMessage() string {
	if m != nil {
		return m.Message
	}
	return ""
}

func (m *CommandStatusResponse) GetError() string {
	if m != nil {
		return m.Error
	}
	return ""
}

// DataplaneStatus reports Dataplane metrics the Agent is aware of
type DataplaneStatus struct {
	SystemId                 string                      `protobuf:"bytes,1,opt,name=system_id,json=systemId,proto3" json:"system_id"`
	Details                  []*NginxDetails             `protobuf:"bytes,2,rep,name=details,proto3" json:"details"`
	Host                     *HostInfo                   `protobuf:"bytes,3,opt,name=host,proto3" json:"host"`
	Healths                  []*NginxHealth              `protobuf:"bytes,5,rep,name=healths,proto3" json:"healths"`
	DataplaneSoftwareDetails []*DataplaneSoftwareDetails `protobuf:"bytes,6,rep,name=dataplane_software_details,json=dataplaneSoftwareDetails,proto3" json:"dataplane_software_details"`
	DataplaneSoftwareHealths []*DataplaneSoftwareHealth  `protobuf:"bytes,7,rep,name=dataplane_software_healths,json=dataplaneSoftwareHealths,proto3" json:"dataplane_software_healths"`
	AgentActivityStatus      []*AgentActivityStatus      `protobuf:"bytes,8,rep,name=agent_activity_status,json=agentActivityStatus,proto3" json:"agent_activity_status"`
	XXX_NoUnkeyedLiteral     struct{}                    `json:"-"`
	XXX_unrecognized         []byte                      `json:"-"`
	XXX_sizecache            int32                       `json:"-"`
}

func (m *DataplaneStatus) Reset()         { *m = DataplaneStatus{} }
func (m *DataplaneStatus) String() string { return proto.CompactTextString(m) }
func (*DataplaneStatus) ProtoMessage()    {}
func (*DataplaneStatus) Descriptor() ([]byte, []int) {
	return fileDescriptor_213c0bb044472049, []int{2}
}
func (m *DataplaneStatus) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DataplaneStatus) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_DataplaneStatus.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *DataplaneStatus) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DataplaneStatus.Merge(m, src)
}
func (m *DataplaneStatus) XXX_Size() int {
	return m.Size()
}
func (m *DataplaneStatus) XXX_DiscardUnknown() {
	xxx_messageInfo_DataplaneStatus.DiscardUnknown(m)
}

var xxx_messageInfo_DataplaneStatus proto.InternalMessageInfo

func (m *DataplaneStatus) GetSystemId() string {
	if m != nil {
		return m.SystemId
	}
	return ""
}

func (m *DataplaneStatus) GetDetails() []*NginxDetails {
	if m != nil {
		return m.Details
	}
	return nil
}

func (m *DataplaneStatus) GetHost() *HostInfo {
	if m != nil {
		return m.Host
	}
	return nil
}

func (m *DataplaneStatus) GetHealths() []*NginxHealth {
	if m != nil {
		return m.Healths
	}
	return nil
}

func (m *DataplaneStatus) GetDataplaneSoftwareDetails() []*DataplaneSoftwareDetails {
	if m != nil {
		return m.DataplaneSoftwareDetails
	}
	return nil
}

func (m *DataplaneStatus) GetDataplaneSoftwareHealths() []*DataplaneSoftwareHealth {
	if m != nil {
		return m.DataplaneSoftwareHealths
	}
	return nil
}

func (m *DataplaneStatus) GetAgentActivityStatus() []*AgentActivityStatus {
	if m != nil {
		return m.AgentActivityStatus
	}
	return nil
}

type AgentActivityStatus struct {
	// Types that are valid to be assigned to Status:
	//	*AgentActivityStatus_NginxConfigStatus
	Status               isAgentActivityStatus_Status `protobuf_oneof:"Status"`
	XXX_NoUnkeyedLiteral struct{}                     `json:"-"`
	XXX_unrecognized     []byte                       `json:"-"`
	XXX_sizecache        int32                        `json:"-"`
}

func (m *AgentActivityStatus) Reset()         { *m = AgentActivityStatus{} }
func (m *AgentActivityStatus) String() string { return proto.CompactTextString(m) }
func (*AgentActivityStatus) ProtoMessage()    {}
func (*AgentActivityStatus) Descriptor() ([]byte, []int) {
	return fileDescriptor_213c0bb044472049, []int{3}
}
func (m *AgentActivityStatus) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *AgentActivityStatus) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_AgentActivityStatus.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *AgentActivityStatus) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AgentActivityStatus.Merge(m, src)
}
func (m *AgentActivityStatus) XXX_Size() int {
	return m.Size()
}
func (m *AgentActivityStatus) XXX_DiscardUnknown() {
	xxx_messageInfo_AgentActivityStatus.DiscardUnknown(m)
}

var xxx_messageInfo_AgentActivityStatus proto.InternalMessageInfo

type isAgentActivityStatus_Status interface {
	isAgentActivityStatus_Status()
	MarshalTo([]byte) (int, error)
	Size() int
}

type AgentActivityStatus_NginxConfigStatus struct {
	NginxConfigStatus *NginxConfigStatus `protobuf:"bytes,1,opt,name=nginx_config_status,json=nginxConfigStatus,proto3,oneof" json:"nginx_config_status"`
}

func (*AgentActivityStatus_NginxConfigStatus) isAgentActivityStatus_Status() {}

func (m *AgentActivityStatus) GetStatus() isAgentActivityStatus_Status {
	if m != nil {
		return m.Status
	}
	return nil
}

func (m *AgentActivityStatus) GetNginxConfigStatus() *NginxConfigStatus {
	if x, ok := m.GetStatus().(*AgentActivityStatus_NginxConfigStatus); ok {
		return x.NginxConfigStatus
	}
	return nil
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*AgentActivityStatus) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*AgentActivityStatus_NginxConfigStatus)(nil),
	}
}

type NginxConfigStatus struct {
	CorrelationId        string                   `protobuf:"bytes,1,opt,name=correlation_id,json=correlationId,proto3" json:"correlation_id"`
	Status               NginxConfigStatus_Status `protobuf:"varint,2,opt,name=status,proto3,enum=f5.nginx.agent.sdk.NginxConfigStatus_Status" json:"status"`
	Message              string                   `protobuf:"bytes,3,opt,name=message,proto3" json:"message"`
	NginxId              string                   `protobuf:"bytes,4,opt,name=nginx_id,json=nginxId,proto3" json:"nginx_id"`
	XXX_NoUnkeyedLiteral struct{}                 `json:"-"`
	XXX_unrecognized     []byte                   `json:"-"`
	XXX_sizecache        int32                    `json:"-"`
}

func (m *NginxConfigStatus) Reset()         { *m = NginxConfigStatus{} }
func (m *NginxConfigStatus) String() string { return proto.CompactTextString(m) }
func (*NginxConfigStatus) ProtoMessage()    {}
func (*NginxConfigStatus) Descriptor() ([]byte, []int) {
	return fileDescriptor_213c0bb044472049, []int{4}
}
func (m *NginxConfigStatus) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *NginxConfigStatus) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_NginxConfigStatus.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *NginxConfigStatus) XXX_Merge(src proto.Message) {
	xxx_messageInfo_NginxConfigStatus.Merge(m, src)
}
func (m *NginxConfigStatus) XXX_Size() int {
	return m.Size()
}
func (m *NginxConfigStatus) XXX_DiscardUnknown() {
	xxx_messageInfo_NginxConfigStatus.DiscardUnknown(m)
}

var xxx_messageInfo_NginxConfigStatus proto.InternalMessageInfo

func (m *NginxConfigStatus) GetCorrelationId() string {
	if m != nil {
		return m.CorrelationId
	}
	return ""
}

func (m *NginxConfigStatus) GetStatus() NginxConfigStatus_Status {
	if m != nil {
		return m.Status
	}
	return NginxConfigStatus_PENDING
}

func (m *NginxConfigStatus) GetMessage() string {
	if m != nil {
		return m.Message
	}
	return ""
}

func (m *NginxConfigStatus) GetNginxId() string {
	if m != nil {
		return m.NginxId
	}
	return ""
}

type DataplaneSoftwareHealth struct {
	// Types that are valid to be assigned to Health:
	//	*DataplaneSoftwareHealth_NginxHealth
	//	*DataplaneSoftwareHealth_AppProtectWafHealth
	Health               isDataplaneSoftwareHealth_Health `protobuf_oneof:"health"`
	XXX_NoUnkeyedLiteral struct{}                         `json:"-"`
	XXX_unrecognized     []byte                           `json:"-"`
	XXX_sizecache        int32                            `json:"-"`
}

func (m *DataplaneSoftwareHealth) Reset()         { *m = DataplaneSoftwareHealth{} }
func (m *DataplaneSoftwareHealth) String() string { return proto.CompactTextString(m) }
func (*DataplaneSoftwareHealth) ProtoMessage()    {}
func (*DataplaneSoftwareHealth) Descriptor() ([]byte, []int) {
	return fileDescriptor_213c0bb044472049, []int{5}
}
func (m *DataplaneSoftwareHealth) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DataplaneSoftwareHealth) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_DataplaneSoftwareHealth.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *DataplaneSoftwareHealth) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DataplaneSoftwareHealth.Merge(m, src)
}
func (m *DataplaneSoftwareHealth) XXX_Size() int {
	return m.Size()
}
func (m *DataplaneSoftwareHealth) XXX_DiscardUnknown() {
	xxx_messageInfo_DataplaneSoftwareHealth.DiscardUnknown(m)
}

var xxx_messageInfo_DataplaneSoftwareHealth proto.InternalMessageInfo

type isDataplaneSoftwareHealth_Health interface {
	isDataplaneSoftwareHealth_Health()
	MarshalTo([]byte) (int, error)
	Size() int
}

type DataplaneSoftwareHealth_NginxHealth struct {
	NginxHealth *NginxHealth `protobuf:"bytes,1,opt,name=nginx_health,json=nginxHealth,proto3,oneof" json:"nginx_health"`
}
type DataplaneSoftwareHealth_AppProtectWafHealth struct {
	AppProtectWafHealth *AppProtectWAFHealth `protobuf:"bytes,2,opt,name=app_protect_waf_health,json=appProtectWafHealth,proto3,oneof" json:"app_protect_waf_health"`
}

func (*DataplaneSoftwareHealth_NginxHealth) isDataplaneSoftwareHealth_Health()         {}
func (*DataplaneSoftwareHealth_AppProtectWafHealth) isDataplaneSoftwareHealth_Health() {}

func (m *DataplaneSoftwareHealth) GetHealth() isDataplaneSoftwareHealth_Health {
	if m != nil {
		return m.Health
	}
	return nil
}

func (m *DataplaneSoftwareHealth) GetNginxHealth() *NginxHealth {
	if x, ok := m.GetHealth().(*DataplaneSoftwareHealth_NginxHealth); ok {
		return x.NginxHealth
	}
	return nil
}

func (m *DataplaneSoftwareHealth) GetAppProtectWafHealth() *AppProtectWAFHealth {
	if x, ok := m.GetHealth().(*DataplaneSoftwareHealth_AppProtectWafHealth); ok {
		return x.AppProtectWafHealth
	}
	return nil
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*DataplaneSoftwareHealth) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*DataplaneSoftwareHealth_NginxHealth)(nil),
		(*DataplaneSoftwareHealth_AppProtectWafHealth)(nil),
	}
}

type DataplaneUpdate struct {
	Host                     *HostInfo                   `protobuf:"bytes,1,opt,name=host,proto3" json:"host"`
	DataplaneSoftwareDetails []*DataplaneSoftwareDetails `protobuf:"bytes,2,rep,name=dataplane_software_details,json=dataplaneSoftwareDetails,proto3" json:"dataplane_software_details"`
	XXX_NoUnkeyedLiteral     struct{}                    `json:"-"`
	XXX_unrecognized         []byte                      `json:"-"`
	XXX_sizecache            int32                       `json:"-"`
}

func (m *DataplaneUpdate) Reset()         { *m = DataplaneUpdate{} }
func (m *DataplaneUpdate) String() string { return proto.CompactTextString(m) }
func (*DataplaneUpdate) ProtoMessage()    {}
func (*DataplaneUpdate) Descriptor() ([]byte, []int) {
	return fileDescriptor_213c0bb044472049, []int{6}
}
func (m *DataplaneUpdate) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DataplaneUpdate) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_DataplaneUpdate.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *DataplaneUpdate) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DataplaneUpdate.Merge(m, src)
}
func (m *DataplaneUpdate) XXX_Size() int {
	return m.Size()
}
func (m *DataplaneUpdate) XXX_DiscardUnknown() {
	xxx_messageInfo_DataplaneUpdate.DiscardUnknown(m)
}

var xxx_messageInfo_DataplaneUpdate proto.InternalMessageInfo

func (m *DataplaneUpdate) GetHost() *HostInfo {
	if m != nil {
		return m.Host
	}
	return nil
}

func (m *DataplaneUpdate) GetDataplaneSoftwareDetails() []*DataplaneSoftwareDetails {
	if m != nil {
		return m.DataplaneSoftwareDetails
	}
	return nil
}

type DownloadRequest struct {
	Meta                 *Metadata `protobuf:"bytes,1,opt,name=meta,proto3" json:"meta"`
	XXX_NoUnkeyedLiteral struct{}  `json:"-"`
	XXX_unrecognized     []byte    `json:"-"`
	XXX_sizecache        int32     `json:"-"`
}

func (m *DownloadRequest) Reset()         { *m = DownloadRequest{} }
func (m *DownloadRequest) String() string { return proto.CompactTextString(m) }
func (*DownloadRequest) ProtoMessage()    {}
func (*DownloadRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_213c0bb044472049, []int{7}
}
func (m *DownloadRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DownloadRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_DownloadRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *DownloadRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DownloadRequest.Merge(m, src)
}
func (m *DownloadRequest) XXX_Size() int {
	return m.Size()
}
func (m *DownloadRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_DownloadRequest.DiscardUnknown(m)
}

var xxx_messageInfo_DownloadRequest proto.InternalMessageInfo

func (m *DownloadRequest) GetMeta() *Metadata {
	if m != nil {
		return m.Meta
	}
	return nil
}

type NginxConfigResponse struct {
	Status               *CommandStatusResponse `protobuf:"bytes,1,opt,name=status,proto3" json:"status"`
	Action               NginxConfigAction      `protobuf:"varint,2,opt,name=action,proto3,enum=f5.nginx.agent.sdk.NginxConfigAction" json:"action"`
	ConfigData           *ConfigDescriptor      `protobuf:"bytes,3,opt,name=config_data,json=configData,proto3" json:"config_data"`
	XXX_NoUnkeyedLiteral struct{}               `json:"-"`
	XXX_unrecognized     []byte                 `json:"-"`
	XXX_sizecache        int32                  `json:"-"`
}

func (m *NginxConfigResponse) Reset()         { *m = NginxConfigResponse{} }
func (m *NginxConfigResponse) String() string { return proto.CompactTextString(m) }
func (*NginxConfigResponse) ProtoMessage()    {}
func (*NginxConfigResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_213c0bb044472049, []int{8}
}
func (m *NginxConfigResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *NginxConfigResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_NginxConfigResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *NginxConfigResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_NginxConfigResponse.Merge(m, src)
}
func (m *NginxConfigResponse) XXX_Size() int {
	return m.Size()
}
func (m *NginxConfigResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_NginxConfigResponse.DiscardUnknown(m)
}

var xxx_messageInfo_NginxConfigResponse proto.InternalMessageInfo

func (m *NginxConfigResponse) GetStatus() *CommandStatusResponse {
	if m != nil {
		return m.Status
	}
	return nil
}

func (m *NginxConfigResponse) GetAction() NginxConfigAction {
	if m != nil {
		return m.Action
	}
	return NginxConfigAction_UNKNOWN
}

func (m *NginxConfigResponse) GetConfigData() *ConfigDescriptor {
	if m != nil {
		return m.ConfigData
	}
	return nil
}

type UploadStatus struct {
	Meta                 *Metadata                   `protobuf:"bytes,1,opt,name=meta,proto3" json:"meta"`
	Status               UploadStatus_TransferStatus `protobuf:"varint,2,opt,name=status,proto3,enum=f5.nginx.agent.sdk.UploadStatus_TransferStatus" json:"status"`
	Reason               string                      `protobuf:"bytes,3,opt,name=reason,proto3" json:"reason"`
	XXX_NoUnkeyedLiteral struct{}                    `json:"-"`
	XXX_unrecognized     []byte                      `json:"-"`
	XXX_sizecache        int32                       `json:"-"`
}

func (m *UploadStatus) Reset()         { *m = UploadStatus{} }
func (m *UploadStatus) String() string { return proto.CompactTextString(m) }
func (*UploadStatus) ProtoMessage()    {}
func (*UploadStatus) Descriptor() ([]byte, []int) {
	return fileDescriptor_213c0bb044472049, []int{9}
}
func (m *UploadStatus) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *UploadStatus) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_UploadStatus.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *UploadStatus) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UploadStatus.Merge(m, src)
}
func (m *UploadStatus) XXX_Size() int {
	return m.Size()
}
func (m *UploadStatus) XXX_DiscardUnknown() {
	xxx_messageInfo_UploadStatus.DiscardUnknown(m)
}

var xxx_messageInfo_UploadStatus proto.InternalMessageInfo

func (m *UploadStatus) GetMeta() *Metadata {
	if m != nil {
		return m.Meta
	}
	return nil
}

func (m *UploadStatus) GetStatus() UploadStatus_TransferStatus {
	if m != nil {
		return m.Status
	}
	return UploadStatus_UNKNOWN
}

func (m *UploadStatus) GetReason() string {
	if m != nil {
		return m.Reason
	}
	return ""
}

type DataChunk struct {
	// Types that are valid to be assigned to Chunk:
	//	*DataChunk_Header
	//	*DataChunk_Data
	Chunk                isDataChunk_Chunk `protobuf_oneof:"chunk"`
	XXX_NoUnkeyedLiteral struct{}          `json:"-"`
	XXX_unrecognized     []byte            `json:"-"`
	XXX_sizecache        int32             `json:"-"`
}

func (m *DataChunk) Reset()         { *m = DataChunk{} }
func (m *DataChunk) String() string { return proto.CompactTextString(m) }
func (*DataChunk) ProtoMessage()    {}
func (*DataChunk) Descriptor() ([]byte, []int) {
	return fileDescriptor_213c0bb044472049, []int{10}
}
func (m *DataChunk) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DataChunk) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_DataChunk.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *DataChunk) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DataChunk.Merge(m, src)
}
func (m *DataChunk) XXX_Size() int {
	return m.Size()
}
func (m *DataChunk) XXX_DiscardUnknown() {
	xxx_messageInfo_DataChunk.DiscardUnknown(m)
}

var xxx_messageInfo_DataChunk proto.InternalMessageInfo

type isDataChunk_Chunk interface {
	isDataChunk_Chunk()
	MarshalTo([]byte) (int, error)
	Size() int
}

type DataChunk_Header struct {
	Header *ChunkedResourceHeader `protobuf:"bytes,1,opt,name=header,proto3,oneof" json:"header"`
}
type DataChunk_Data struct {
	Data *ChunkedResourceChunk `protobuf:"bytes,2,opt,name=data,proto3,oneof" json:"data"`
}

func (*DataChunk_Header) isDataChunk_Chunk() {}
func (*DataChunk_Data) isDataChunk_Chunk()   {}

func (m *DataChunk) GetChunk() isDataChunk_Chunk {
	if m != nil {
		return m.Chunk
	}
	return nil
}

func (m *DataChunk) GetHeader() *ChunkedResourceHeader {
	if x, ok := m.GetChunk().(*DataChunk_Header); ok {
		return x.Header
	}
	return nil
}

func (m *DataChunk) GetData() *ChunkedResourceChunk {
	if x, ok := m.GetChunk().(*DataChunk_Data); ok {
		return x.Data
	}
	return nil
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*DataChunk) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*DataChunk_Header)(nil),
		(*DataChunk_Data)(nil),
	}
}

type ChunkedResourceHeader struct {
	Meta *Metadata `protobuf:"bytes,1,opt,name=meta,proto3" json:"meta"`
	// number of chunks expected in this transfer
	Chunks               int32    `protobuf:"varint,2,opt,name=chunks,proto3" json:"chunks"`
	Checksum             string   `protobuf:"bytes,3,opt,name=checksum,proto3" json:"checksum"`
	ChunkSize            int32    `protobuf:"varint,4,opt,name=chunk_size,json=chunkSize,proto3" json:"chunk_size"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ChunkedResourceHeader) Reset()         { *m = ChunkedResourceHeader{} }
func (m *ChunkedResourceHeader) String() string { return proto.CompactTextString(m) }
func (*ChunkedResourceHeader) ProtoMessage()    {}
func (*ChunkedResourceHeader) Descriptor() ([]byte, []int) {
	return fileDescriptor_213c0bb044472049, []int{11}
}
func (m *ChunkedResourceHeader) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ChunkedResourceHeader) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ChunkedResourceHeader.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ChunkedResourceHeader) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ChunkedResourceHeader.Merge(m, src)
}
func (m *ChunkedResourceHeader) XXX_Size() int {
	return m.Size()
}
func (m *ChunkedResourceHeader) XXX_DiscardUnknown() {
	xxx_messageInfo_ChunkedResourceHeader.DiscardUnknown(m)
}

var xxx_messageInfo_ChunkedResourceHeader proto.InternalMessageInfo

func (m *ChunkedResourceHeader) GetMeta() *Metadata {
	if m != nil {
		return m.Meta
	}
	return nil
}

func (m *ChunkedResourceHeader) GetChunks() int32 {
	if m != nil {
		return m.Chunks
	}
	return 0
}

func (m *ChunkedResourceHeader) GetChecksum() string {
	if m != nil {
		return m.Checksum
	}
	return ""
}

func (m *ChunkedResourceHeader) GetChunkSize() int32 {
	if m != nil {
		return m.ChunkSize
	}
	return 0
}

type ChunkedResourceChunk struct {
	Meta                 *Metadata `protobuf:"bytes,1,opt,name=meta,proto3" json:"meta"`
	ChunkId              int32     `protobuf:"varint,2,opt,name=chunk_id,json=chunkId,proto3" json:"chunk_id"`
	Data                 []byte    `protobuf:"bytes,3,opt,name=data,proto3" json:"data"`
	XXX_NoUnkeyedLiteral struct{}  `json:"-"`
	XXX_unrecognized     []byte    `json:"-"`
	XXX_sizecache        int32     `json:"-"`
}

func (m *ChunkedResourceChunk) Reset()         { *m = ChunkedResourceChunk{} }
func (m *ChunkedResourceChunk) String() string { return proto.CompactTextString(m) }
func (*ChunkedResourceChunk) ProtoMessage()    {}
func (*ChunkedResourceChunk) Descriptor() ([]byte, []int) {
	return fileDescriptor_213c0bb044472049, []int{12}
}
func (m *ChunkedResourceChunk) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ChunkedResourceChunk) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ChunkedResourceChunk.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ChunkedResourceChunk) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ChunkedResourceChunk.Merge(m, src)
}
func (m *ChunkedResourceChunk) XXX_Size() int {
	return m.Size()
}
func (m *ChunkedResourceChunk) XXX_DiscardUnknown() {
	xxx_messageInfo_ChunkedResourceChunk.DiscardUnknown(m)
}

var xxx_messageInfo_ChunkedResourceChunk proto.InternalMessageInfo

func (m *ChunkedResourceChunk) GetMeta() *Metadata {
	if m != nil {
		return m.Meta
	}
	return nil
}

func (m *ChunkedResourceChunk) GetChunkId() int32 {
	if m != nil {
		return m.ChunkId
	}
	return 0
}

func (m *ChunkedResourceChunk) GetData() []byte {
	if m != nil {
		return m.Data
	}
	return nil
}

func init() {
	proto.RegisterEnum("f5.nginx.agent.sdk.Command_CommandType", Command_CommandType_name, Command_CommandType_value)
	proto.RegisterEnum("f5.nginx.agent.sdk.CommandStatusResponse_CommandStatus", CommandStatusResponse_CommandStatus_name, CommandStatusResponse_CommandStatus_value)
	proto.RegisterEnum("f5.nginx.agent.sdk.CommandStatusResponse_CommandErrorCode", CommandStatusResponse_CommandErrorCode_name, CommandStatusResponse_CommandErrorCode_value)
	proto.RegisterEnum("f5.nginx.agent.sdk.NginxConfigStatus_Status", NginxConfigStatus_Status_name, NginxConfigStatus_Status_value)
	proto.RegisterEnum("f5.nginx.agent.sdk.UploadStatus_TransferStatus", UploadStatus_TransferStatus_name, UploadStatus_TransferStatus_value)
	proto.RegisterType((*Command)(nil), "f5.nginx.agent.sdk.Command")
	proto.RegisterType((*CommandStatusResponse)(nil), "f5.nginx.agent.sdk.CommandStatusResponse")
	proto.RegisterType((*DataplaneStatus)(nil), "f5.nginx.agent.sdk.DataplaneStatus")
	proto.RegisterType((*AgentActivityStatus)(nil), "f5.nginx.agent.sdk.AgentActivityStatus")
	proto.RegisterType((*NginxConfigStatus)(nil), "f5.nginx.agent.sdk.NginxConfigStatus")
	proto.RegisterType((*DataplaneSoftwareHealth)(nil), "f5.nginx.agent.sdk.DataplaneSoftwareHealth")
	proto.RegisterType((*DataplaneUpdate)(nil), "f5.nginx.agent.sdk.DataplaneUpdate")
	proto.RegisterType((*DownloadRequest)(nil), "f5.nginx.agent.sdk.DownloadRequest")
	proto.RegisterType((*NginxConfigResponse)(nil), "f5.nginx.agent.sdk.NginxConfigResponse")
	proto.RegisterType((*UploadStatus)(nil), "f5.nginx.agent.sdk.UploadStatus")
	proto.RegisterType((*DataChunk)(nil), "f5.nginx.agent.sdk.DataChunk")
	proto.RegisterType((*ChunkedResourceHeader)(nil), "f5.nginx.agent.sdk.ChunkedResourceHeader")
	proto.RegisterType((*ChunkedResourceChunk)(nil), "f5.nginx.agent.sdk.ChunkedResourceChunk")
}

func init() { proto.RegisterFile("command.proto", fileDescriptor_213c0bb044472049) }

var fileDescriptor_213c0bb044472049 = []byte{
	// 1535 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xbc, 0x58, 0xcb, 0x6e, 0xdb, 0x46,
	0x17, 0x26, 0x15, 0xeb, 0x76, 0x24, 0xdb, 0xca, 0xd8, 0x49, 0x14, 0x23, 0x30, 0x0d, 0xfe, 0x7f,
	0x6a, 0xa7, 0x4d, 0x25, 0xd4, 0x41, 0x11, 0x34, 0x59, 0x59, 0x96, 0x13, 0x0a, 0x89, 0x65, 0x63,
	0x12, 0x27, 0x40, 0x8a, 0x42, 0x60, 0xc4, 0x91, 0x4c, 0xd8, 0x22, 0x59, 0x92, 0x72, 0xe2, 0xa0,
	0xfb, 0xa2, 0x45, 0x37, 0x5d, 0x74, 0xd1, 0xf6, 0x21, 0xfa, 0x1a, 0x5d, 0x66, 0xdd, 0x05, 0x51,
	0x64, 0xc9, 0x07, 0x68, 0x17, 0xdd, 0x14, 0x73, 0xa1, 0x44, 0x49, 0x94, 0xec, 0xd4, 0x45, 0x37,
	0x9a, 0xe1, 0xf0, 0x3b, 0xdf, 0xb9, 0xcc, 0xcc, 0x37, 0x43, 0xc1, 0x7c, 0xdb, 0xee, 0xf5, 0x74,
	0xcb, 0xa8, 0x38, 0xae, 0xed, 0xdb, 0x08, 0x75, 0x3e, 0xad, 0x58, 0x5d, 0xd3, 0x7a, 0x5d, 0xd1,
	0xbb, 0xc4, 0xf2, 0x2b, 0x9e, 0x71, 0xb4, 0x02, 0x5d, 0xbb, 0x6b, 0xf3, 0xf7, 0x2b, 0x45, 0x0a,
	0xb7, 0x2d, 0xf1, 0x54, 0xe0, 0x20, 0xfe, 0x00, 0x87, 0xb6, 0x17, 0xf5, 0x0b, 0x9c, 0x63, 0x60,
	0x63, 0x75, 0xcc, 0xae, 0x78, 0x42, 0xe4, 0x84, 0x58, 0xbe, 0x57, 0x65, 0x8d, 0x18, 0xbb, 0x6e,
	0x38, 0x2d, 0xcf, 0xee, 0xf8, 0xaf, 0x74, 0x97, 0xb4, 0x0c, 0xe2, 0xeb, 0xe6, 0xb1, 0x27, 0x5e,
	0xe5, 0x2d, 0xdd, 0xe1, 0x5d, 0xf5, 0x2f, 0x80, 0xec, 0x36, 0x8f, 0x16, 0xdd, 0x83, 0xb9, 0x1e,
	0xf1, 0xf5, 0xb2, 0xbc, 0x26, 0x6f, 0x14, 0x36, 0x6f, 0x54, 0x26, 0xc3, 0xae, 0xec, 0x12, 0x5f,
	0x37, 0x74, 0x5f, 0xaf, 0xe5, 0xc2, 0x40, 0x61, 0x68, 0xcc, 0x7e, 0xd1, 0x0e, 0xcc, 0xf9, 0xa7,
	0x0e, 0x29, 0xa7, 0xd6, 0xe4, 0x8d, 0x85, 0xcd, 0xf5, 0x24, 0x5b, 0xe1, 0x26, 0x6a, 0x9f, 0x9e,
	0x3a, 0x84, 0xd3, 0x50, 0x43, 0xcc, 0x7e, 0xd1, 0x0b, 0x80, 0x76, 0xcf, 0x68, 0x79, 0xbe, 0xee,
	0xf7, 0xbd, 0xf2, 0x25, 0x16, 0xc8, 0xad, 0x19, 0x64, 0x4f, 0x18, 0x10, 0x13, 0xcf, 0xb1, 0x2d,
	0x8f, 0xd4, 0x16, 0xc2, 0x40, 0x89, 0x11, 0x68, 0x12, 0xce, 0xb7, 0x7b, 0x02, 0x84, 0x9e, 0x41,
	0x91, 0xb1, 0xb4, 0x78, 0xe9, 0xca, 0x73, 0x8c, 0x5d, 0x49, 0x62, 0x6f, 0xd2, 0xe7, 0x6d, 0x06,
	0xab, 0x95, 0xc2, 0x40, 0x19, 0x31, 0xd4, 0x24, 0xcc, 0xa7, 0x82, 0x03, 0xd0, 0x6b, 0xb8, 0x12,
	0x7f, 0xdd, 0x72, 0x45, 0x34, 0xe5, 0x34, 0x73, 0xb0, 0x7e, 0x86, 0x83, 0x41, 0xf0, 0xd7, 0xc3,
	0x40, 0x49, 0x66, 0xd2, 0x24, 0xbc, 0x64, 0x4d, 0x5a, 0x50, 0xcf, 0x8c, 0x92, 0xe2, 0x2d, 0xd2,
	0xf6, 0x5b, 0x2e, 0xf9, 0xb2, 0x4f, 0x3c, 0xbf, 0x9c, 0x99, 0xee, 0x79, 0x8b, 0xf6, 0xb6, 0x39,
	0x1e, 0x73, 0x38, 0xf7, 0x9c, 0xc8, 0x44, 0x3d, 0xeb, 0x93, 0x16, 0xe8, 0x2b, 0xb8, 0x3a, 0x8e,
	0x17, 0x49, 0x67, 0x99, 0xeb, 0x8d, 0xb3, 0x5d, 0x8b, 0xac, 0x57, 0xc2, 0x40, 0x99, 0xc2, 0xa5,
	0x49, 0x78, 0x59, 0x4f, 0xb0, 0x41, 0x3e, 0x2c, 0x0f, 0x2c, 0x78, 0x9d, 0x78, 0xda, 0x39, 0xe6,
	0xfb, 0x83, 0x59, 0xbe, 0x59, 0xf9, 0x78, 0xd6, 0xe5, 0x30, 0x50, 0x12, 0x79, 0x34, 0x09, 0x23,
	0x7d, 0x02, 0x4f, 0xd7, 0x4f, 0x1c, 0x5d, 0xce, 0x4f, 0x5f, 0x3f, 0x31, 0x6f, 0x7c, 0xfd, 0xc4,
	0x0d, 0xe9, 0xfa, 0x89, 0xd1, 0xa3, 0x0e, 0x94, 0xe8, 0x96, 0x72, 0x8e, 0x75, 0x8b, 0x44, 0x2b,
	0xbf, 0xc0, 0xb8, 0xff, 0x97, 0xc4, 0x5d, 0x8f, 0xb0, 0x7c, 0x59, 0xd7, 0x96, 0xc3, 0x40, 0x99,
	0x20, 0xd0, 0x24, 0xbc, 0x68, 0x8c, 0x02, 0xd1, 0x17, 0x50, 0x64, 0xfa, 0xd0, 0x72, 0x89, 0x63,
	0xbb, 0x7e, 0xb9, 0x38, 0xbd, 0x5a, 0x5c, 0x4e, 0x2a, 0x3b, 0xb4, 0xc1, 0x0c, 0xcd, 0xd3, 0x88,
	0xdb, 0xd3, 0x34, 0xc8, 0x10, 0x80, 0xbe, 0x93, 0x61, 0x25, 0x16, 0xc6, 0x98, 0xf2, 0x94, 0xe7,
	0x99, 0xb7, 0xdb, 0xb3, 0x33, 0x12, 0x46, 0x75, 0x6e, 0x53, 0x5b, 0x0d, 0x03, 0x65, 0x06, 0xa7,
	0x26, 0xe1, 0xb2, 0x31, 0xc5, 0x76, 0xb4, 0xaa, 0x7d, 0xc7, 0xd0, 0x7d, 0x52, 0x5e, 0x38, 0x47,
	0x55, 0x0f, 0x18, 0x74, 0xbc, 0xaa, 0x9c, 0x60, 0xa4, 0xaa, 0x1c, 0xa8, 0xde, 0x81, 0x42, 0x4c,
	0xd0, 0x10, 0x40, 0xa6, 0xb9, 0x87, 0x77, 0xb7, 0x1e, 0x97, 0x24, 0x54, 0x84, 0x5c, 0x7d, 0xef,
	0x79, 0xf3, 0xf1, 0xde, 0x56, 0xbd, 0x24, 0xd3, 0x37, 0x07, 0xfb, 0xac, 0x9f, 0xaa, 0x65, 0x60,
	0x8e, 0xf2, 0xa8, 0x3f, 0x5c, 0x82, 0x2b, 0x89, 0x4a, 0x86, 0x3e, 0x87, 0x8c, 0x58, 0x0a, 0x32,
	0x53, 0xd4, 0xbb, 0xe7, 0x16, 0xc1, 0xd1, 0xd1, 0x1a, 0x84, 0x81, 0x22, 0xa8, 0xb0, 0x68, 0x91,
	0x09, 0x40, 0x5c, 0xd7, 0x76, 0x5b, 0x6d, 0xdb, 0x88, 0x24, 0xfb, 0xde, 0x7b, 0x3b, 0xd8, 0xa1,
	0x14, 0xdb, 0xb6, 0x21, 0x64, 0x77, 0xc8, 0x88, 0xf3, 0x24, 0x7a, 0x85, 0x6e, 0x42, 0xb6, 0x47,
	0x3c, 0x4f, 0xef, 0x12, 0xa6, 0xe6, 0xf9, 0x5a, 0x21, 0x0c, 0x94, 0x68, 0x08, 0x47, 0x1d, 0xa4,
	0x40, 0x9a, 0xd9, 0x30, 0x51, 0xce, 0xd7, 0xf2, 0x61, 0xa0, 0xf0, 0x01, 0xcc, 0x1b, 0xf5, 0x3e,
	0xcc, 0x8f, 0x04, 0x83, 0x16, 0xa1, 0xb0, 0xbd, 0x5b, 0x6f, 0x1d, 0x34, 0x1f, 0x35, 0xf7, 0x9e,
	0x37, 0x4b, 0x12, 0xad, 0x2f, 0x1d, 0xd8, 0x7b, 0x54, 0x92, 0xd1, 0x3c, 0xe4, 0x69, 0x7f, 0x07,
	0xe3, 0x3d, 0x5c, 0x4a, 0xa9, 0x55, 0x28, 0x8d, 0xc7, 0x4c, 0xe1, 0x3b, 0x18, 0x53, 0xb8, 0x44,
	0xb9, 0x68, 0x3f, 0xe2, 0x92, 0xd5, 0x9f, 0xd3, 0xb0, 0x38, 0xb6, 0xcf, 0xd0, 0x87, 0x90, 0xf7,
	0x4e, 0x3d, 0x9f, 0xf4, 0x5a, 0xa6, 0xc1, 0x26, 0x25, 0x5f, 0x9b, 0x0f, 0x03, 0x65, 0x38, 0x88,
	0x73, 0xbc, 0xdb, 0x30, 0xd0, 0x43, 0xc8, 0x46, 0xeb, 0x3e, 0xb5, 0x76, 0x69, 0xa3, 0xb0, 0xb9,
	0x36, 0xf5, 0x10, 0x88, 0xd6, 0x3a, 0xab, 0x8b, 0x30, 0xc2, 0x51, 0x87, 0x1e, 0xc9, 0xf4, 0x06,
	0x20, 0x4e, 0xc2, 0xc4, 0x23, 0x59, 0xb3, 0x3d, 0xbf, 0x61, 0x75, 0x6c, 0x7e, 0x96, 0x52, 0x34,
	0x66, 0xbf, 0xe8, 0x01, 0x64, 0x0f, 0x89, 0x7e, 0xec, 0x1f, 0x7a, 0xe5, 0x34, 0x0b, 0x62, 0xfa,
	0x51, 0xa7, 0x31, 0x1c, 0x8f, 0x41, 0xd8, 0xe0, 0xa8, 0x83, 0xbe, 0x9d, 0xbd, 0xb1, 0x33, 0x8c,
	0xfb, 0x5f, 0xdd, 0xd8, 0x33, 0xb6, 0xf5, 0x37, 0xc9, 0xc1, 0x44, 0x89, 0x66, 0x59, 0x30, 0x1f,
	0x9d, 0x2b, 0x18, 0x91, 0xf4, 0xb4, 0x58, 0xa2, 0x3a, 0x4c, 0xc6, 0xa2, 0x89, 0xc2, 0x9c, 0x44,
	0xc7, 0xaf, 0xde, 0xf6, 0xcd, 0x13, 0xd3, 0x3f, 0x8d, 0xd4, 0x3b, 0xc7, 0xa2, 0x98, 0x7e, 0xfc,
	0x6e, 0x09, 0xbc, 0xd8, 0xa2, 0xb1, 0xe3, 0x77, 0x8c, 0x49, 0x1c, 0xbe, 0xa3, 0x78, 0xf5, 0x7b,
	0x19, 0x96, 0x12, 0x78, 0x90, 0x03, 0x4b, 0x23, 0xd7, 0x87, 0x98, 0x80, 0x14, 0x36, 0x6f, 0x9e,
	0x71, 0x0d, 0x11, 0xb1, 0x5c, 0x0b, 0x03, 0x25, 0x89, 0x45, 0x93, 0xf0, 0x65, 0x6b, 0x02, 0x9d,
	0x83, 0x8c, 0x88, 0xe9, 0xa7, 0x14, 0x5c, 0x9e, 0x60, 0x43, 0x9f, 0xc1, 0x42, 0xdb, 0x76, 0x5d,
	0x72, 0xac, 0xfb, 0xa6, 0x6d, 0x0d, 0x37, 0x0e, 0x0a, 0x03, 0x65, 0xec, 0x0d, 0x9e, 0x8f, 0x3d,
	0x37, 0x0c, 0xb4, 0x3f, 0x10, 0x40, 0xae, 0x4f, 0xb7, 0xcf, 0x15, 0x7f, 0x65, 0x86, 0xea, 0x9d,
	0x53, 0x8a, 0xd6, 0x21, 0xc7, 0xf3, 0x37, 0x0d, 0xa1, 0x46, 0xc5, 0x30, 0x50, 0x06, 0x63, 0x38,
	0xcb, 0x7a, 0x0d, 0x43, 0xdd, 0x88, 0x92, 0x47, 0x05, 0xc8, 0xee, 0xef, 0x34, 0xeb, 0x8d, 0xe6,
	0xc3, 0x92, 0x84, 0x32, 0x90, 0x62, 0x1a, 0x94, 0x87, 0x74, 0xa4, 0x3f, 0x7f, 0xca, 0x70, 0x6d,
	0xca, 0xf2, 0x1b, 0xde, 0x4a, 0xf9, 0x7a, 0x13, 0xb3, 0x75, 0xe6, 0x56, 0x8d, 0xdd, 0x4a, 0xb9,
	0xe1, 0xe0, 0x56, 0x2a, 0x78, 0xdf, 0xc0, 0x55, 0xdd, 0x71, 0x5a, 0xf4, 0x96, 0x4f, 0xef, 0x54,
	0xaf, 0xf4, 0x4e, 0xe4, 0x21, 0x35, 0xe3, 0x72, 0xe8, 0x38, 0xfb, 0xdc, 0xe0, 0xf9, 0xd6, 0x03,
	0xe1, 0x89, 0x5f, 0xd0, 0x12, 0xa9, 0xd8, 0xed, 0x70, 0x68, 0xa2, 0x77, 0x84, 0x49, 0x0e, 0x32,
	0x1c, 0xa0, 0xfe, 0x26, 0xc7, 0x84, 0x94, 0x9f, 0x98, 0x03, 0x4d, 0x93, 0xff, 0x81, 0xa6, 0x9d,
	0xa1, 0x45, 0xa9, 0xff, 0x52, 0x8b, 0xd4, 0x5d, 0x58, 0xac, 0xdb, 0xaf, 0xac, 0x63, 0x5b, 0x37,
	0xa2, 0x3b, 0xe2, 0x05, 0x3e, 0xa1, 0xd4, 0xaf, 0x53, 0xb0, 0x94, 0xf0, 0x5d, 0x80, 0x76, 0x47,
	0xae, 0x02, 0xef, 0xf5, 0x3d, 0x94, 0xb4, 0x0d, 0x1a, 0x90, 0xa1, 0x2a, 0x63, 0x5b, 0x62, 0x63,
	0x9d, 0x25, 0x0c, 0x5b, 0x0c, 0xcc, 0xa9, 0xb8, 0x21, 0x16, 0x2d, 0x7a, 0x06, 0x05, 0x21, 0x12,
	0x34, 0x21, 0x71, 0x48, 0xfd, 0x3f, 0x39, 0x3c, 0x0a, 0xab, 0x13, 0xaf, 0xed, 0x9a, 0x8e, 0x6f,
	0xbb, 0xb5, 0xc5, 0x30, 0x50, 0xe2, 0xc6, 0x18, 0xf8, 0x03, 0x9d, 0x26, 0xf5, 0x0f, 0x19, 0x8a,
	0x07, 0x0e, 0xad, 0xab, 0xd8, 0x60, 0x17, 0xf9, 0x32, 0x7d, 0x32, 0x26, 0x24, 0xd5, 0x24, 0xeb,
	0xb8, 0xb7, 0xca, 0x53, 0x57, 0xb7, 0xbc, 0x0e, 0x71, 0x67, 0x68, 0x89, 0x0a, 0x19, 0x97, 0xe8,
	0x9e, 0x6d, 0x09, 0x29, 0x61, 0x18, 0x3e, 0x82, 0x45, 0xab, 0x7e, 0x02, 0x0b, 0xa3, 0x4c, 0x54,
	0x27, 0x86, 0xf7, 0x95, 0x48, 0x27, 0x00, 0x32, 0x0f, 0xb6, 0x1a, 0x8f, 0x77, 0xea, 0xa5, 0x94,
	0xfa, 0x8b, 0x0c, 0x79, 0x5a, 0x81, 0xed, 0xc3, 0xbe, 0x75, 0x84, 0xf6, 0xd8, 0x36, 0x32, 0x88,
	0x3b, 0x73, 0xe2, 0x29, 0x94, 0x18, 0x98, 0x78, 0x76, 0xdf, 0x6d, 0x53, 0x55, 0x31, 0x88, 0xcb,
	0xe3, 0xe1, 0xc6, 0x9a, 0x84, 0x45, 0x0f, 0x69, 0xfc, 0xda, 0x29, 0x14, 0x60, 0xe3, 0x1c, 0x74,
	0xec, 0x91, 0x97, 0x94, 0x5a, 0x6a, 0x12, 0x66, 0x6d, 0x2d, 0x0b, 0xe9, 0x36, 0x7d, 0xa5, 0xbe,
	0x95, 0xe1, 0x4a, 0x62, 0x08, 0x17, 0x9a, 0x33, 0x15, 0x32, 0x8c, 0x9e, 0xcf, 0x59, 0x9a, 0xa7,
	0xc3, 0x47, 0xb0, 0x68, 0xd1, 0x06, 0xe4, 0xda, 0x87, 0xa4, 0x7d, 0xe4, 0xf5, 0x7b, 0x62, 0x12,
	0x98, 0x4e, 0x47, 0x63, 0x78, 0xd0, 0x43, 0x1f, 0x03, 0x30, 0x9b, 0x96, 0x67, 0xbe, 0x21, 0x4c,
	0xd3, 0xd3, 0xe2, 0x9f, 0x82, 0xc1, 0x28, 0xce, 0xb3, 0xfe, 0x13, 0xf3, 0x0d, 0x51, 0x7f, 0x94,
	0x61, 0x39, 0xa9, 0x0c, 0x17, 0xca, 0x68, 0x9d, 0x46, 0x4b, 0xbd, 0x99, 0x86, 0xc8, 0x49, 0x44,
	0xcb, 0xc7, 0x70, 0x96, 0xf5, 0x1a, 0x06, 0xba, 0x21, 0xe6, 0x88, 0xa6, 0x54, 0x1c, 0x56, 0x5e,
	0xd4, 0xfd, 0xee, 0xaf, 0xef, 0x56, 0xe5, 0xb7, 0xef, 0x56, 0xe5, 0xdf, 0xdf, 0xad, 0xca, 0x2f,
	0x6e, 0x75, 0x4d, 0xff, 0xb0, 0xff, 0xb2, 0xd2, 0xb6, 0x7b, 0x55, 0x16, 0x49, 0x95, 0x45, 0x52,
	0xf5, 0x8c, 0xa3, 0xea, 0xc9, 0x66, 0x95, 0xfd, 0xc3, 0x73, 0x9f, 0xfd, 0xbe, 0xcc, 0xb0, 0xe6,
	0xce, 0xdf, 0x01, 0x00, 0x00, 0xff, 0xff, 0xc1, 0x1f, 0x57, 0x17, 0x9b, 0x12, 0x00, 0x00,
}

func (m *Command) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Command) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Command) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Data != nil {
		{
			size := m.Data.Size()
			i -= size
			if _, err := m.Data.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	if m.Type != 0 {
		i = encodeVarintCommand(dAtA, i, uint64(m.Type))
		i--
		dAtA[i] = 0x10
	}
	if m.Meta != nil {
		{
			size, err := m.Meta.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintCommand(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *Command_CmdStatus) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Command_CmdStatus) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.CmdStatus != nil {
		{
			size, err := m.CmdStatus.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintCommand(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	return len(dAtA) - i, nil
}
func (m *Command_NginxConfig) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Command_NginxConfig) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.NginxConfig != nil {
		{
			size, err := m.NginxConfig.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintCommand(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x22
	}
	return len(dAtA) - i, nil
}
func (m *Command_NginxConfigResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Command_NginxConfigResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.NginxConfigResponse != nil {
		{
			size, err := m.NginxConfigResponse.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintCommand(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x2a
	}
	return len(dAtA) - i, nil
}
func (m *Command_AgentConnectRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Command_AgentConnectRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.AgentConnectRequest != nil {
		{
			size, err := m.AgentConnectRequest.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintCommand(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x32
	}
	return len(dAtA) - i, nil
}
func (m *Command_AgentConnectResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Command_AgentConnectResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.AgentConnectResponse != nil {
		{
			size, err := m.AgentConnectResponse.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintCommand(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x3a
	}
	return len(dAtA) - i, nil
}
func (m *Command_AgentConfigRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Command_AgentConfigRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.AgentConfigRequest != nil {
		{
			size, err := m.AgentConfigRequest.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintCommand(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x42
	}
	return len(dAtA) - i, nil
}
func (m *Command_AgentConfig) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Command_AgentConfig) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.AgentConfig != nil {
		{
			size, err := m.AgentConfig.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintCommand(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x4a
	}
	return len(dAtA) - i, nil
}
func (m *Command_DataplaneStatus) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Command_DataplaneStatus) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.DataplaneStatus != nil {
		{
			size, err := m.DataplaneStatus.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintCommand(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x5a
	}
	return len(dAtA) - i, nil
}
func (m *Command_EventReport) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Command_EventReport) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.EventReport != nil {
		{
			size, err := m.EventReport.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintCommand(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x62
	}
	return len(dAtA) - i, nil
}
func (m *Command_DataplaneSoftwareDetails) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Command_DataplaneSoftwareDetails) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.DataplaneSoftwareDetails != nil {
		{
			size, err := m.DataplaneSoftwareDetails.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintCommand(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x6a
	}
	return len(dAtA) - i, nil
}
func (m *Command_DataplaneUpdate) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Command_DataplaneUpdate) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.DataplaneUpdate != nil {
		{
			size, err := m.DataplaneUpdate.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintCommand(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x72
	}
	return len(dAtA) - i, nil
}
func (m *CommandStatusResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CommandStatusResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CommandStatusResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Error) > 0 {
		i -= len(m.Error)
		copy(dAtA[i:], m.Error)
		i = encodeVarintCommand(dAtA, i, uint64(len(m.Error)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.Message) > 0 {
		i -= len(m.Message)
		copy(dAtA[i:], m.Message)
		i = encodeVarintCommand(dAtA, i, uint64(len(m.Message)))
		i--
		dAtA[i] = 0x1a
	}
	if m.ErrorCode != 0 {
		i = encodeVarintCommand(dAtA, i, uint64(m.ErrorCode))
		i--
		dAtA[i] = 0x10
	}
	if m.Status != 0 {
		i = encodeVarintCommand(dAtA, i, uint64(m.Status))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *DataplaneStatus) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DataplaneStatus) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *DataplaneStatus) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.AgentActivityStatus) > 0 {
		for iNdEx := len(m.AgentActivityStatus) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.AgentActivityStatus[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintCommand(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x42
		}
	}
	if len(m.DataplaneSoftwareHealths) > 0 {
		for iNdEx := len(m.DataplaneSoftwareHealths) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.DataplaneSoftwareHealths[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintCommand(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x3a
		}
	}
	if len(m.DataplaneSoftwareDetails) > 0 {
		for iNdEx := len(m.DataplaneSoftwareDetails) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.DataplaneSoftwareDetails[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintCommand(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x32
		}
	}
	if len(m.Healths) > 0 {
		for iNdEx := len(m.Healths) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Healths[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintCommand(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x2a
		}
	}
	if m.Host != nil {
		{
			size, err := m.Host.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintCommand(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Details) > 0 {
		for iNdEx := len(m.Details) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Details[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintCommand(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	if len(m.SystemId) > 0 {
		i -= len(m.SystemId)
		copy(dAtA[i:], m.SystemId)
		i = encodeVarintCommand(dAtA, i, uint64(len(m.SystemId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *AgentActivityStatus) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AgentActivityStatus) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *AgentActivityStatus) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Status != nil {
		{
			size := m.Status.Size()
			i -= size
			if _, err := m.Status.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	return len(dAtA) - i, nil
}

func (m *AgentActivityStatus_NginxConfigStatus) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *AgentActivityStatus_NginxConfigStatus) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.NginxConfigStatus != nil {
		{
			size, err := m.NginxConfigStatus.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintCommand(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}
func (m *NginxConfigStatus) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *NginxConfigStatus) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *NginxConfigStatus) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.NginxId) > 0 {
		i -= len(m.NginxId)
		copy(dAtA[i:], m.NginxId)
		i = encodeVarintCommand(dAtA, i, uint64(len(m.NginxId)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.Message) > 0 {
		i -= len(m.Message)
		copy(dAtA[i:], m.Message)
		i = encodeVarintCommand(dAtA, i, uint64(len(m.Message)))
		i--
		dAtA[i] = 0x1a
	}
	if m.Status != 0 {
		i = encodeVarintCommand(dAtA, i, uint64(m.Status))
		i--
		dAtA[i] = 0x10
	}
	if len(m.CorrelationId) > 0 {
		i -= len(m.CorrelationId)
		copy(dAtA[i:], m.CorrelationId)
		i = encodeVarintCommand(dAtA, i, uint64(len(m.CorrelationId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *DataplaneSoftwareHealth) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DataplaneSoftwareHealth) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *DataplaneSoftwareHealth) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Health != nil {
		{
			size := m.Health.Size()
			i -= size
			if _, err := m.Health.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	return len(dAtA) - i, nil
}

func (m *DataplaneSoftwareHealth_NginxHealth) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *DataplaneSoftwareHealth_NginxHealth) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.NginxHealth != nil {
		{
			size, err := m.NginxHealth.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintCommand(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}
func (m *DataplaneSoftwareHealth_AppProtectWafHealth) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *DataplaneSoftwareHealth_AppProtectWafHealth) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.AppProtectWafHealth != nil {
		{
			size, err := m.AppProtectWafHealth.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintCommand(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	return len(dAtA) - i, nil
}
func (m *DataplaneUpdate) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DataplaneUpdate) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *DataplaneUpdate) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.DataplaneSoftwareDetails) > 0 {
		for iNdEx := len(m.DataplaneSoftwareDetails) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.DataplaneSoftwareDetails[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintCommand(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	if m.Host != nil {
		{
			size, err := m.Host.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintCommand(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *DownloadRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DownloadRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *DownloadRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Meta != nil {
		{
			size, err := m.Meta.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintCommand(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *NginxConfigResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *NginxConfigResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *NginxConfigResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.ConfigData != nil {
		{
			size, err := m.ConfigData.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintCommand(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if m.Action != 0 {
		i = encodeVarintCommand(dAtA, i, uint64(m.Action))
		i--
		dAtA[i] = 0x10
	}
	if m.Status != nil {
		{
			size, err := m.Status.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintCommand(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *UploadStatus) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UploadStatus) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *UploadStatus) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Reason) > 0 {
		i -= len(m.Reason)
		copy(dAtA[i:], m.Reason)
		i = encodeVarintCommand(dAtA, i, uint64(len(m.Reason)))
		i--
		dAtA[i] = 0x1a
	}
	if m.Status != 0 {
		i = encodeVarintCommand(dAtA, i, uint64(m.Status))
		i--
		dAtA[i] = 0x10
	}
	if m.Meta != nil {
		{
			size, err := m.Meta.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintCommand(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *DataChunk) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DataChunk) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *DataChunk) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Chunk != nil {
		{
			size := m.Chunk.Size()
			i -= size
			if _, err := m.Chunk.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	return len(dAtA) - i, nil
}

func (m *DataChunk_Header) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *DataChunk_Header) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.Header != nil {
		{
			size, err := m.Header.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintCommand(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}
func (m *DataChunk_Data) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *DataChunk_Data) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.Data != nil {
		{
			size, err := m.Data.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintCommand(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	return len(dAtA) - i, nil
}
func (m *ChunkedResourceHeader) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ChunkedResourceHeader) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ChunkedResourceHeader) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.ChunkSize != 0 {
		i = encodeVarintCommand(dAtA, i, uint64(m.ChunkSize))
		i--
		dAtA[i] = 0x20
	}
	if len(m.Checksum) > 0 {
		i -= len(m.Checksum)
		copy(dAtA[i:], m.Checksum)
		i = encodeVarintCommand(dAtA, i, uint64(len(m.Checksum)))
		i--
		dAtA[i] = 0x1a
	}
	if m.Chunks != 0 {
		i = encodeVarintCommand(dAtA, i, uint64(m.Chunks))
		i--
		dAtA[i] = 0x10
	}
	if m.Meta != nil {
		{
			size, err := m.Meta.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintCommand(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ChunkedResourceChunk) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ChunkedResourceChunk) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ChunkedResourceChunk) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Data) > 0 {
		i -= len(m.Data)
		copy(dAtA[i:], m.Data)
		i = encodeVarintCommand(dAtA, i, uint64(len(m.Data)))
		i--
		dAtA[i] = 0x1a
	}
	if m.ChunkId != 0 {
		i = encodeVarintCommand(dAtA, i, uint64(m.ChunkId))
		i--
		dAtA[i] = 0x10
	}
	if m.Meta != nil {
		{
			size, err := m.Meta.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintCommand(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintCommand(dAtA []byte, offset int, v uint64) int {
	offset -= sovCommand(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *Command) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Meta != nil {
		l = m.Meta.Size()
		n += 1 + l + sovCommand(uint64(l))
	}
	if m.Type != 0 {
		n += 1 + sovCommand(uint64(m.Type))
	}
	if m.Data != nil {
		n += m.Data.Size()
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *Command_CmdStatus) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.CmdStatus != nil {
		l = m.CmdStatus.Size()
		n += 1 + l + sovCommand(uint64(l))
	}
	return n
}
func (m *Command_NginxConfig) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.NginxConfig != nil {
		l = m.NginxConfig.Size()
		n += 1 + l + sovCommand(uint64(l))
	}
	return n
}
func (m *Command_NginxConfigResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.NginxConfigResponse != nil {
		l = m.NginxConfigResponse.Size()
		n += 1 + l + sovCommand(uint64(l))
	}
	return n
}
func (m *Command_AgentConnectRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.AgentConnectRequest != nil {
		l = m.AgentConnectRequest.Size()
		n += 1 + l + sovCommand(uint64(l))
	}
	return n
}
func (m *Command_AgentConnectResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.AgentConnectResponse != nil {
		l = m.AgentConnectResponse.Size()
		n += 1 + l + sovCommand(uint64(l))
	}
	return n
}
func (m *Command_AgentConfigRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.AgentConfigRequest != nil {
		l = m.AgentConfigRequest.Size()
		n += 1 + l + sovCommand(uint64(l))
	}
	return n
}
func (m *Command_AgentConfig) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.AgentConfig != nil {
		l = m.AgentConfig.Size()
		n += 1 + l + sovCommand(uint64(l))
	}
	return n
}
func (m *Command_DataplaneStatus) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.DataplaneStatus != nil {
		l = m.DataplaneStatus.Size()
		n += 1 + l + sovCommand(uint64(l))
	}
	return n
}
func (m *Command_EventReport) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.EventReport != nil {
		l = m.EventReport.Size()
		n += 1 + l + sovCommand(uint64(l))
	}
	return n
}
func (m *Command_DataplaneSoftwareDetails) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.DataplaneSoftwareDetails != nil {
		l = m.DataplaneSoftwareDetails.Size()
		n += 1 + l + sovCommand(uint64(l))
	}
	return n
}
func (m *Command_DataplaneUpdate) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.DataplaneUpdate != nil {
		l = m.DataplaneUpdate.Size()
		n += 1 + l + sovCommand(uint64(l))
	}
	return n
}
func (m *CommandStatusResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Status != 0 {
		n += 1 + sovCommand(uint64(m.Status))
	}
	if m.ErrorCode != 0 {
		n += 1 + sovCommand(uint64(m.ErrorCode))
	}
	l = len(m.Message)
	if l > 0 {
		n += 1 + l + sovCommand(uint64(l))
	}
	l = len(m.Error)
	if l > 0 {
		n += 1 + l + sovCommand(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *DataplaneStatus) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.SystemId)
	if l > 0 {
		n += 1 + l + sovCommand(uint64(l))
	}
	if len(m.Details) > 0 {
		for _, e := range m.Details {
			l = e.Size()
			n += 1 + l + sovCommand(uint64(l))
		}
	}
	if m.Host != nil {
		l = m.Host.Size()
		n += 1 + l + sovCommand(uint64(l))
	}
	if len(m.Healths) > 0 {
		for _, e := range m.Healths {
			l = e.Size()
			n += 1 + l + sovCommand(uint64(l))
		}
	}
	if len(m.DataplaneSoftwareDetails) > 0 {
		for _, e := range m.DataplaneSoftwareDetails {
			l = e.Size()
			n += 1 + l + sovCommand(uint64(l))
		}
	}
	if len(m.DataplaneSoftwareHealths) > 0 {
		for _, e := range m.DataplaneSoftwareHealths {
			l = e.Size()
			n += 1 + l + sovCommand(uint64(l))
		}
	}
	if len(m.AgentActivityStatus) > 0 {
		for _, e := range m.AgentActivityStatus {
			l = e.Size()
			n += 1 + l + sovCommand(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *AgentActivityStatus) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Status != nil {
		n += m.Status.Size()
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *AgentActivityStatus_NginxConfigStatus) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.NginxConfigStatus != nil {
		l = m.NginxConfigStatus.Size()
		n += 1 + l + sovCommand(uint64(l))
	}
	return n
}
func (m *NginxConfigStatus) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.CorrelationId)
	if l > 0 {
		n += 1 + l + sovCommand(uint64(l))
	}
	if m.Status != 0 {
		n += 1 + sovCommand(uint64(m.Status))
	}
	l = len(m.Message)
	if l > 0 {
		n += 1 + l + sovCommand(uint64(l))
	}
	l = len(m.NginxId)
	if l > 0 {
		n += 1 + l + sovCommand(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *DataplaneSoftwareHealth) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Health != nil {
		n += m.Health.Size()
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *DataplaneSoftwareHealth_NginxHealth) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.NginxHealth != nil {
		l = m.NginxHealth.Size()
		n += 1 + l + sovCommand(uint64(l))
	}
	return n
}
func (m *DataplaneSoftwareHealth_AppProtectWafHealth) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.AppProtectWafHealth != nil {
		l = m.AppProtectWafHealth.Size()
		n += 1 + l + sovCommand(uint64(l))
	}
	return n
}
func (m *DataplaneUpdate) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Host != nil {
		l = m.Host.Size()
		n += 1 + l + sovCommand(uint64(l))
	}
	if len(m.DataplaneSoftwareDetails) > 0 {
		for _, e := range m.DataplaneSoftwareDetails {
			l = e.Size()
			n += 1 + l + sovCommand(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *DownloadRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Meta != nil {
		l = m.Meta.Size()
		n += 1 + l + sovCommand(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *NginxConfigResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Status != nil {
		l = m.Status.Size()
		n += 1 + l + sovCommand(uint64(l))
	}
	if m.Action != 0 {
		n += 1 + sovCommand(uint64(m.Action))
	}
	if m.ConfigData != nil {
		l = m.ConfigData.Size()
		n += 1 + l + sovCommand(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *UploadStatus) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Meta != nil {
		l = m.Meta.Size()
		n += 1 + l + sovCommand(uint64(l))
	}
	if m.Status != 0 {
		n += 1 + sovCommand(uint64(m.Status))
	}
	l = len(m.Reason)
	if l > 0 {
		n += 1 + l + sovCommand(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *DataChunk) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Chunk != nil {
		n += m.Chunk.Size()
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *DataChunk_Header) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Header != nil {
		l = m.Header.Size()
		n += 1 + l + sovCommand(uint64(l))
	}
	return n
}
func (m *DataChunk_Data) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Data != nil {
		l = m.Data.Size()
		n += 1 + l + sovCommand(uint64(l))
	}
	return n
}
func (m *ChunkedResourceHeader) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Meta != nil {
		l = m.Meta.Size()
		n += 1 + l + sovCommand(uint64(l))
	}
	if m.Chunks != 0 {
		n += 1 + sovCommand(uint64(m.Chunks))
	}
	l = len(m.Checksum)
	if l > 0 {
		n += 1 + l + sovCommand(uint64(l))
	}
	if m.ChunkSize != 0 {
		n += 1 + sovCommand(uint64(m.ChunkSize))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ChunkedResourceChunk) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Meta != nil {
		l = m.Meta.Size()
		n += 1 + l + sovCommand(uint64(l))
	}
	if m.ChunkId != 0 {
		n += 1 + sovCommand(uint64(m.ChunkId))
	}
	l = len(m.Data)
	if l > 0 {
		n += 1 + l + sovCommand(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func sovCommand(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozCommand(x uint64) (n int) {
	return sovCommand(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *Command) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCommand
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Command: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Command: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Meta", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommand
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCommand
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCommand
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Meta == nil {
				m.Meta = &Metadata{}
			}
			if err := m.Meta.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			m.Type = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommand
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Type |= Command_CommandType(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CmdStatus", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommand
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCommand
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCommand
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &CommandStatusResponse{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Data = &Command_CmdStatus{v}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NginxConfig", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommand
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCommand
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCommand
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &NginxConfig{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Data = &Command_NginxConfig{v}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NginxConfigResponse", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommand
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCommand
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCommand
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &NginxConfigResponse{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Data = &Command_NginxConfigResponse{v}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AgentConnectRequest", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommand
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCommand
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCommand
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &AgentConnectRequest{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Data = &Command_AgentConnectRequest{v}
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AgentConnectResponse", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommand
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCommand
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCommand
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &AgentConnectResponse{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Data = &Command_AgentConnectResponse{v}
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AgentConfigRequest", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommand
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCommand
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCommand
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &AgentConfigRequest{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Data = &Command_AgentConfigRequest{v}
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AgentConfig", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommand
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCommand
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCommand
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &AgentConfig{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Data = &Command_AgentConfig{v}
			iNdEx = postIndex
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DataplaneStatus", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommand
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCommand
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCommand
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &DataplaneStatus{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Data = &Command_DataplaneStatus{v}
			iNdEx = postIndex
		case 12:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EventReport", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommand
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCommand
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCommand
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &events.EventReport{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Data = &Command_EventReport{v}
			iNdEx = postIndex
		case 13:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DataplaneSoftwareDetails", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommand
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCommand
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCommand
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &DataplaneSoftwareDetails{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Data = &Command_DataplaneSoftwareDetails{v}
			iNdEx = postIndex
		case 14:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DataplaneUpdate", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommand
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCommand
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCommand
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &DataplaneUpdate{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Data = &Command_DataplaneUpdate{v}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCommand(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthCommand
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CommandStatusResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCommand
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CommandStatusResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CommandStatusResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			m.Status = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommand
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Status |= CommandStatusResponse_CommandStatus(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ErrorCode", wireType)
			}
			m.ErrorCode = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommand
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ErrorCode |= CommandStatusResponse_CommandErrorCode(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Message", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommand
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCommand
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCommand
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Message = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Error", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommand
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCommand
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCommand
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Error = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCommand(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthCommand
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DataplaneStatus) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCommand
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DataplaneStatus: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DataplaneStatus: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SystemId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommand
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCommand
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCommand
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SystemId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Details", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommand
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCommand
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCommand
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Details = append(m.Details, &NginxDetails{})
			if err := m.Details[len(m.Details)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Host", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommand
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCommand
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCommand
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Host == nil {
				m.Host = &HostInfo{}
			}
			if err := m.Host.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Healths", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommand
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCommand
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCommand
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Healths = append(m.Healths, &NginxHealth{})
			if err := m.Healths[len(m.Healths)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DataplaneSoftwareDetails", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommand
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCommand
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCommand
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DataplaneSoftwareDetails = append(m.DataplaneSoftwareDetails, &DataplaneSoftwareDetails{})
			if err := m.DataplaneSoftwareDetails[len(m.DataplaneSoftwareDetails)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DataplaneSoftwareHealths", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommand
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCommand
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCommand
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DataplaneSoftwareHealths = append(m.DataplaneSoftwareHealths, &DataplaneSoftwareHealth{})
			if err := m.DataplaneSoftwareHealths[len(m.DataplaneSoftwareHealths)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AgentActivityStatus", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommand
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCommand
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCommand
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AgentActivityStatus = append(m.AgentActivityStatus, &AgentActivityStatus{})
			if err := m.AgentActivityStatus[len(m.AgentActivityStatus)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCommand(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthCommand
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AgentActivityStatus) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCommand
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AgentActivityStatus: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AgentActivityStatus: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NginxConfigStatus", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommand
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCommand
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCommand
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &NginxConfigStatus{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Status = &AgentActivityStatus_NginxConfigStatus{v}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCommand(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthCommand
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *NginxConfigStatus) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCommand
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: NginxConfigStatus: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: NginxConfigStatus: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CorrelationId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommand
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCommand
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCommand
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CorrelationId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			m.Status = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommand
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Status |= NginxConfigStatus_Status(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Message", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommand
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCommand
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCommand
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Message = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NginxId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommand
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCommand
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCommand
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.NginxId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCommand(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthCommand
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DataplaneSoftwareHealth) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCommand
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DataplaneSoftwareHealth: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DataplaneSoftwareHealth: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NginxHealth", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommand
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCommand
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCommand
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &NginxHealth{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Health = &DataplaneSoftwareHealth_NginxHealth{v}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AppProtectWafHealth", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommand
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCommand
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCommand
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &AppProtectWAFHealth{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Health = &DataplaneSoftwareHealth_AppProtectWafHealth{v}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCommand(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthCommand
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DataplaneUpdate) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCommand
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DataplaneUpdate: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DataplaneUpdate: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Host", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommand
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCommand
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCommand
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Host == nil {
				m.Host = &HostInfo{}
			}
			if err := m.Host.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DataplaneSoftwareDetails", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommand
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCommand
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCommand
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DataplaneSoftwareDetails = append(m.DataplaneSoftwareDetails, &DataplaneSoftwareDetails{})
			if err := m.DataplaneSoftwareDetails[len(m.DataplaneSoftwareDetails)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCommand(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthCommand
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DownloadRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCommand
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DownloadRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DownloadRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Meta", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommand
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCommand
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCommand
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Meta == nil {
				m.Meta = &Metadata{}
			}
			if err := m.Meta.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCommand(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthCommand
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *NginxConfigResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCommand
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: NginxConfigResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: NginxConfigResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommand
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCommand
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCommand
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Status == nil {
				m.Status = &CommandStatusResponse{}
			}
			if err := m.Status.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Action", wireType)
			}
			m.Action = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommand
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Action |= NginxConfigAction(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ConfigData", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommand
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCommand
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCommand
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ConfigData == nil {
				m.ConfigData = &ConfigDescriptor{}
			}
			if err := m.ConfigData.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCommand(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthCommand
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UploadStatus) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCommand
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UploadStatus: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UploadStatus: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Meta", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommand
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCommand
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCommand
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Meta == nil {
				m.Meta = &Metadata{}
			}
			if err := m.Meta.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			m.Status = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommand
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Status |= UploadStatus_TransferStatus(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Reason", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommand
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCommand
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCommand
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Reason = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCommand(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthCommand
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DataChunk) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCommand
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DataChunk: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DataChunk: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Header", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommand
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCommand
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCommand
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &ChunkedResourceHeader{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Chunk = &DataChunk_Header{v}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Data", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommand
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCommand
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCommand
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &ChunkedResourceChunk{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Chunk = &DataChunk_Data{v}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCommand(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthCommand
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ChunkedResourceHeader) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCommand
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ChunkedResourceHeader: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ChunkedResourceHeader: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Meta", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommand
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCommand
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCommand
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Meta == nil {
				m.Meta = &Metadata{}
			}
			if err := m.Meta.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Chunks", wireType)
			}
			m.Chunks = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommand
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Chunks |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Checksum", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommand
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCommand
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCommand
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Checksum = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChunkSize", wireType)
			}
			m.ChunkSize = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommand
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ChunkSize |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipCommand(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthCommand
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ChunkedResourceChunk) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCommand
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ChunkedResourceChunk: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ChunkedResourceChunk: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Meta", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommand
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCommand
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCommand
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Meta == nil {
				m.Meta = &Metadata{}
			}
			if err := m.Meta.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChunkId", wireType)
			}
			m.ChunkId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommand
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ChunkId |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Data", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommand
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthCommand
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthCommand
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Data = append(m.Data[:0], dAtA[iNdEx:postIndex]...)
			if m.Data == nil {
				m.Data = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCommand(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthCommand
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipCommand(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowCommand
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowCommand
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowCommand
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthCommand
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupCommand
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthCommand
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthCommand        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowCommand          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupCommand = fmt.Errorf("proto: unexpected end of group")
)
