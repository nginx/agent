//  Copyright (c) F5, Inc.
//
//  This source code is licensed under the Apache License, Version 2.0 license found in the
//  LICENSE file in the root directory of this source tree.
//

// Code generated by MockGen. DO NOT EDIT.
// Source: reader.go
//
// Generated by this command:
//
//	mockgen -source reader.go -destination mocks/reader_mock.go -package mocks -copyright_file=../../../../COPYRIGHT
//

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	net "net"
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockListenerConfig is a mock of ListenerConfig interface.
type MockListenerConfig struct {
	ctrl     *gomock.Controller
	recorder *MockListenerConfigMockRecorder
}

// MockListenerConfigMockRecorder is the mock recorder for MockListenerConfig.
type MockListenerConfigMockRecorder struct {
	mock *MockListenerConfig
}

// NewMockListenerConfig creates a new mock instance.
func NewMockListenerConfig(ctrl *gomock.Controller) *MockListenerConfig {
	mock := &MockListenerConfig{ctrl: ctrl}
	mock.recorder = &MockListenerConfigMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockListenerConfig) EXPECT() *MockListenerConfigMockRecorder {
	return m.recorder
}

// Listen mocks base method.
func (m *MockListenerConfig) Listen(ctx context.Context, network, address string) (net.Listener, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Listen", ctx, network, address)
	ret0, _ := ret[0].(net.Listener)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Listen indicates an expected call of Listen.
func (mr *MockListenerConfigMockRecorder) Listen(ctx, network, address any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Listen", reflect.TypeOf((*MockListenerConfig)(nil).Listen), ctx, network, address)
}

// MockWorker is a mock of Worker interface.
type MockWorker struct {
	ctrl     *gomock.Controller
	recorder *MockWorkerMockRecorder
}

// MockWorkerMockRecorder is the mock recorder for MockWorker.
type MockWorkerMockRecorder struct {
	mock *MockWorker
}

// NewMockWorker creates a new mock instance.
func NewMockWorker(ctrl *gomock.Controller) *MockWorker {
	mock := &MockWorker{ctrl: ctrl}
	mock.recorder = &MockWorkerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockWorker) EXPECT() *MockWorkerMockRecorder {
	return m.recorder
}

// Run mocks base method.
func (m *MockWorker) Run(ctx context.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Run", ctx)
	ret0, _ := ret[0].(error)
	return ret0
}

// Run indicates an expected call of Run.
func (mr *MockWorkerMockRecorder) Run(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Run", reflect.TypeOf((*MockWorker)(nil).Run), ctx)
}

// MockFrame is a mock of Frame interface.
type MockFrame struct {
	ctrl     *gomock.Controller
	recorder *MockFrameMockRecorder
}

// MockFrameMockRecorder is the mock recorder for MockFrame.
type MockFrameMockRecorder struct {
	mock *MockFrame
}

// NewMockFrame creates a new mock instance.
func NewMockFrame(ctrl *gomock.Controller) *MockFrame {
	mock := &MockFrame{ctrl: ctrl}
	mock.recorder = &MockFrameMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockFrame) EXPECT() *MockFrameMockRecorder {
	return m.recorder
}

// Messages mocks base method.
func (m *MockFrame) Messages() [][]byte {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Messages")
	ret0, _ := ret[0].([][]byte)
	return ret0
}

// Messages indicates an expected call of Messages.
func (mr *MockFrameMockRecorder) Messages() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Messages", reflect.TypeOf((*MockFrame)(nil).Messages))
}

// Release mocks base method.
func (m *MockFrame) Release() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Release")
}

// Release indicates an expected call of Release.
func (mr *MockFrameMockRecorder) Release() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Release", reflect.TypeOf((*MockFrame)(nil).Release))
}
