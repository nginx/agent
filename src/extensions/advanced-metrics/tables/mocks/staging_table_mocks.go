//  Copyright (c) F5, Inc.
//
//  This source code is licensed under the Apache License, Version 2.0 license found in the
//  LICENSE file in the root directory of this source tree.
//

// Code generated by MockGen. DO NOT EDIT.
// Source: staging_table.go
//
// Generated by this command:
//
//	mockgen -source staging_table.go -destination mocks/staging_table_mocks.go -package mocks -copyright_file=../../../../COPYRIGHT
//

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	sample "github.com/nginx/agent/v2/src/extensions/advanced-metrics/tables/sample"
	schema "github.com/nginx/agent/v2/src/extensions/advanced-metrics/tables/schema"
	gomock "go.uber.org/mock/gomock"
)

// MockFieldIterator is a mock of FieldIterator interface.
type MockFieldIterator struct {
	ctrl     *gomock.Controller
	recorder *MockFieldIteratorMockRecorder
}

// MockFieldIteratorMockRecorder is the mock recorder for MockFieldIterator.
type MockFieldIteratorMockRecorder struct {
	mock *MockFieldIterator
}

// NewMockFieldIterator creates a new mock instance.
func NewMockFieldIterator(ctrl *gomock.Controller) *MockFieldIterator {
	mock := &MockFieldIterator{ctrl: ctrl}
	mock.recorder = &MockFieldIteratorMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockFieldIterator) EXPECT() *MockFieldIteratorMockRecorder {
	return m.recorder
}

// HasNext mocks base method.
func (m *MockFieldIterator) HasNext() bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "HasNext")
	ret0, _ := ret[0].(bool)
	return ret0
}

// HasNext indicates an expected call of HasNext.
func (mr *MockFieldIteratorMockRecorder) HasNext() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HasNext", reflect.TypeOf((*MockFieldIterator)(nil).HasNext))
}

// Next mocks base method.
func (m *MockFieldIterator) Next() []byte {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Next")
	ret0, _ := ret[0].([]byte)
	return ret0
}

// Next indicates an expected call of Next.
func (mr *MockFieldIteratorMockRecorder) Next() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Next", reflect.TypeOf((*MockFieldIterator)(nil).Next))
}

// MockSamplesView is a mock of SamplesView interface.
type MockSamplesView struct {
	ctrl     *gomock.Controller
	recorder *MockSamplesViewMockRecorder
}

// MockSamplesViewMockRecorder is the mock recorder for MockSamplesView.
type MockSamplesViewMockRecorder struct {
	mock *MockSamplesView
}

// NewMockSamplesView creates a new mock instance.
func NewMockSamplesView(ctrl *gomock.Controller) *MockSamplesView {
	mock := &MockSamplesView{ctrl: ctrl}
	mock.recorder = &MockSamplesViewMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSamplesView) EXPECT() *MockSamplesViewMockRecorder {
	return m.recorder
}

// Range mocks base method.
func (m *MockSamplesView) Range(cb func(*sample.Sample)) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Range", cb)
}

// Range indicates an expected call of Range.
func (mr *MockSamplesViewMockRecorder) Range(cb any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Range", reflect.TypeOf((*MockSamplesView)(nil).Range), cb)
}

// MockSamples is a mock of Samples interface.
type MockSamples struct {
	ctrl     *gomock.Controller
	recorder *MockSamplesMockRecorder
}

// MockSamplesMockRecorder is the mock recorder for MockSamples.
type MockSamplesMockRecorder struct {
	mock *MockSamples
}

// NewMockSamples creates a new mock instance.
func NewMockSamples(ctrl *gomock.Controller) *MockSamples {
	mock := &MockSamples{ctrl: ctrl}
	mock.recorder = &MockSamplesMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSamples) EXPECT() *MockSamplesMockRecorder {
	return m.recorder
}

// Add mocks base method.
func (m *MockSamples) Add(s sample.Sample) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Add", s)
	ret0, _ := ret[0].(error)
	return ret0
}

// Add indicates an expected call of Add.
func (mr *MockSamplesMockRecorder) Add(s any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Add", reflect.TypeOf((*MockSamples)(nil).Add), s)
}

// Clear mocks base method.
func (m *MockSamples) Clear() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Clear")
}

// Clear indicates an expected call of Clear.
func (mr *MockSamplesMockRecorder) Clear() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Clear", reflect.TypeOf((*MockSamples)(nil).Clear))
}

// Len mocks base method.
func (m *MockSamples) Len() int {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Len")
	ret0, _ := ret[0].(int)
	return ret0
}

// Len indicates an expected call of Len.
func (mr *MockSamplesMockRecorder) Len() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Len", reflect.TypeOf((*MockSamples)(nil).Len))
}

// Range mocks base method.
func (m *MockSamples) Range(cb func(*sample.Sample)) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Range", cb)
}

// Range indicates an expected call of Range.
func (mr *MockSamplesMockRecorder) Range(cb any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Range", reflect.TypeOf((*MockSamples)(nil).Range), cb)
}

// MockLookupSet is a mock of LookupSet interface.
type MockLookupSet struct {
	ctrl     *gomock.Controller
	recorder *MockLookupSetMockRecorder
}

// MockLookupSetMockRecorder is the mock recorder for MockLookupSet.
type MockLookupSetMockRecorder struct {
	mock *MockLookupSet
}

// NewMockLookupSet creates a new mock instance.
func NewMockLookupSet(ctrl *gomock.Controller) *MockLookupSet {
	mock := &MockLookupSet{ctrl: ctrl}
	mock.recorder = &MockLookupSetMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockLookupSet) EXPECT() *MockLookupSetMockRecorder {
	return m.recorder
}

// LookupBytes mocks base method.
func (m *MockLookupSet) LookupBytes(arg0 schema.FieldIndex, arg1 []byte) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LookupBytes", arg0, arg1)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// LookupBytes indicates an expected call of LookupBytes.
func (mr *MockLookupSetMockRecorder) LookupBytes(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LookupBytes", reflect.TypeOf((*MockLookupSet)(nil).LookupBytes), arg0, arg1)
}

// LookupCode mocks base method.
func (m *MockLookupSet) LookupCode(arg0, arg1 int) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LookupCode", arg0, arg1)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// LookupCode indicates an expected call of LookupCode.
func (mr *MockLookupSetMockRecorder) LookupCode(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LookupCode", reflect.TypeOf((*MockLookupSet)(nil).LookupCode), arg0, arg1)
}
