// Code generated by counterfeiter. DO NOT EDIT.
package modelfakes

import (
	"context"
	"sync"

	"github.com/nginx/agent/v3/internal/model"
)

type FakeExporter struct {
	ExportStub        func(model.DataEntry) error
	exportMutex       sync.RWMutex
	exportArgsForCall []struct {
		arg1 model.DataEntry
	}
	exportReturns struct {
		result1 error
	}
	exportReturnsOnCall map[int]struct {
		result1 error
	}
	StartSinkStub        func(context.Context)
	startSinkMutex       sync.RWMutex
	startSinkArgsForCall []struct {
		arg1 context.Context
	}
	TypeStub        func() model.ExporterType
	typeMutex       sync.RWMutex
	typeArgsForCall []struct {
	}
	typeReturns struct {
		result1 model.ExporterType
	}
	typeReturnsOnCall map[int]struct {
		result1 model.ExporterType
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeExporter) Export(arg1 model.DataEntry) error {
	fake.exportMutex.Lock()
	ret, specificReturn := fake.exportReturnsOnCall[len(fake.exportArgsForCall)]
	fake.exportArgsForCall = append(fake.exportArgsForCall, struct {
		arg1 model.DataEntry
	}{arg1})
	stub := fake.ExportStub
	fakeReturns := fake.exportReturns
	fake.recordInvocation("Export", []interface{}{arg1})
	fake.exportMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeExporter) ExportCallCount() int {
	fake.exportMutex.RLock()
	defer fake.exportMutex.RUnlock()
	return len(fake.exportArgsForCall)
}

func (fake *FakeExporter) ExportCalls(stub func(model.DataEntry) error) {
	fake.exportMutex.Lock()
	defer fake.exportMutex.Unlock()
	fake.ExportStub = stub
}

func (fake *FakeExporter) ExportArgsForCall(i int) model.DataEntry {
	fake.exportMutex.RLock()
	defer fake.exportMutex.RUnlock()
	argsForCall := fake.exportArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeExporter) ExportReturns(result1 error) {
	fake.exportMutex.Lock()
	defer fake.exportMutex.Unlock()
	fake.ExportStub = nil
	fake.exportReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeExporter) ExportReturnsOnCall(i int, result1 error) {
	fake.exportMutex.Lock()
	defer fake.exportMutex.Unlock()
	fake.ExportStub = nil
	if fake.exportReturnsOnCall == nil {
		fake.exportReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.exportReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeExporter) StartSink(arg1 context.Context) {
	fake.startSinkMutex.Lock()
	fake.startSinkArgsForCall = append(fake.startSinkArgsForCall, struct {
		arg1 context.Context
	}{arg1})
	stub := fake.StartSinkStub
	fake.recordInvocation("StartSink", []interface{}{arg1})
	fake.startSinkMutex.Unlock()
	if stub != nil {
		fake.StartSinkStub(arg1)
	}
}

func (fake *FakeExporter) StartSinkCallCount() int {
	fake.startSinkMutex.RLock()
	defer fake.startSinkMutex.RUnlock()
	return len(fake.startSinkArgsForCall)
}

func (fake *FakeExporter) StartSinkCalls(stub func(context.Context)) {
	fake.startSinkMutex.Lock()
	defer fake.startSinkMutex.Unlock()
	fake.StartSinkStub = stub
}

func (fake *FakeExporter) StartSinkArgsForCall(i int) context.Context {
	fake.startSinkMutex.RLock()
	defer fake.startSinkMutex.RUnlock()
	argsForCall := fake.startSinkArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeExporter) Type() model.ExporterType {
	fake.typeMutex.Lock()
	ret, specificReturn := fake.typeReturnsOnCall[len(fake.typeArgsForCall)]
	fake.typeArgsForCall = append(fake.typeArgsForCall, struct {
	}{})
	stub := fake.TypeStub
	fakeReturns := fake.typeReturns
	fake.recordInvocation("Type", []interface{}{})
	fake.typeMutex.Unlock()
	if stub != nil {
		return stub()
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeExporter) TypeCallCount() int {
	fake.typeMutex.RLock()
	defer fake.typeMutex.RUnlock()
	return len(fake.typeArgsForCall)
}

func (fake *FakeExporter) TypeCalls(stub func() model.ExporterType) {
	fake.typeMutex.Lock()
	defer fake.typeMutex.Unlock()
	fake.TypeStub = stub
}

func (fake *FakeExporter) TypeReturns(result1 model.ExporterType) {
	fake.typeMutex.Lock()
	defer fake.typeMutex.Unlock()
	fake.TypeStub = nil
	fake.typeReturns = struct {
		result1 model.ExporterType
	}{result1}
}

func (fake *FakeExporter) TypeReturnsOnCall(i int, result1 model.ExporterType) {
	fake.typeMutex.Lock()
	defer fake.typeMutex.Unlock()
	fake.TypeStub = nil
	if fake.typeReturnsOnCall == nil {
		fake.typeReturnsOnCall = make(map[int]struct {
			result1 model.ExporterType
		})
	}
	fake.typeReturnsOnCall[i] = struct {
		result1 model.ExporterType
	}{result1}
}

func (fake *FakeExporter) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.exportMutex.RLock()
	defer fake.exportMutex.RUnlock()
	fake.startSinkMutex.RLock()
	defer fake.startSinkMutex.RUnlock()
	fake.typeMutex.RLock()
	defer fake.typeMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakeExporter) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ model.Exporter = new(FakeExporter)
