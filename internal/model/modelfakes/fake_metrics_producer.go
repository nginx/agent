// Code generated by counterfeiter. DO NOT EDIT.
package modelfakes

import (
	"context"
	"sync"

	"github.com/nginx/agent/v3/internal/model"
)

type FakeMetricsProducer struct {
	ProduceStub        func(context.Context) ([]model.DataEntry, error)
	produceMutex       sync.RWMutex
	produceArgsForCall []struct {
		arg1 context.Context
	}
	produceReturns struct {
		result1 []model.DataEntry
		result2 error
	}
	produceReturnsOnCall map[int]struct {
		result1 []model.DataEntry
		result2 error
	}
	TypeStub        func() model.MetricsSourceType
	typeMutex       sync.RWMutex
	typeArgsForCall []struct {
	}
	typeReturns struct {
		result1 model.MetricsSourceType
	}
	typeReturnsOnCall map[int]struct {
		result1 model.MetricsSourceType
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeMetricsProducer) Produce(arg1 context.Context) ([]model.DataEntry, error) {
	fake.produceMutex.Lock()
	ret, specificReturn := fake.produceReturnsOnCall[len(fake.produceArgsForCall)]
	fake.produceArgsForCall = append(fake.produceArgsForCall, struct {
		arg1 context.Context
	}{arg1})
	stub := fake.ProduceStub
	fakeReturns := fake.produceReturns
	fake.recordInvocation("Produce", []interface{}{arg1})
	fake.produceMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeMetricsProducer) ProduceCallCount() int {
	fake.produceMutex.RLock()
	defer fake.produceMutex.RUnlock()
	return len(fake.produceArgsForCall)
}

func (fake *FakeMetricsProducer) ProduceCalls(stub func(context.Context) ([]model.DataEntry, error)) {
	fake.produceMutex.Lock()
	defer fake.produceMutex.Unlock()
	fake.ProduceStub = stub
}

func (fake *FakeMetricsProducer) ProduceArgsForCall(i int) context.Context {
	fake.produceMutex.RLock()
	defer fake.produceMutex.RUnlock()
	argsForCall := fake.produceArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeMetricsProducer) ProduceReturns(result1 []model.DataEntry, result2 error) {
	fake.produceMutex.Lock()
	defer fake.produceMutex.Unlock()
	fake.ProduceStub = nil
	fake.produceReturns = struct {
		result1 []model.DataEntry
		result2 error
	}{result1, result2}
}

func (fake *FakeMetricsProducer) ProduceReturnsOnCall(i int, result1 []model.DataEntry, result2 error) {
	fake.produceMutex.Lock()
	defer fake.produceMutex.Unlock()
	fake.ProduceStub = nil
	if fake.produceReturnsOnCall == nil {
		fake.produceReturnsOnCall = make(map[int]struct {
			result1 []model.DataEntry
			result2 error
		})
	}
	fake.produceReturnsOnCall[i] = struct {
		result1 []model.DataEntry
		result2 error
	}{result1, result2}
}

func (fake *FakeMetricsProducer) Type() model.MetricsSourceType {
	fake.typeMutex.Lock()
	ret, specificReturn := fake.typeReturnsOnCall[len(fake.typeArgsForCall)]
	fake.typeArgsForCall = append(fake.typeArgsForCall, struct {
	}{})
	stub := fake.TypeStub
	fakeReturns := fake.typeReturns
	fake.recordInvocation("Type", []interface{}{})
	fake.typeMutex.Unlock()
	if stub != nil {
		return stub()
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeMetricsProducer) TypeCallCount() int {
	fake.typeMutex.RLock()
	defer fake.typeMutex.RUnlock()
	return len(fake.typeArgsForCall)
}

func (fake *FakeMetricsProducer) TypeCalls(stub func() model.MetricsSourceType) {
	fake.typeMutex.Lock()
	defer fake.typeMutex.Unlock()
	fake.TypeStub = stub
}

func (fake *FakeMetricsProducer) TypeReturns(result1 model.MetricsSourceType) {
	fake.typeMutex.Lock()
	defer fake.typeMutex.Unlock()
	fake.TypeStub = nil
	fake.typeReturns = struct {
		result1 model.MetricsSourceType
	}{result1}
}

func (fake *FakeMetricsProducer) TypeReturnsOnCall(i int, result1 model.MetricsSourceType) {
	fake.typeMutex.Lock()
	defer fake.typeMutex.Unlock()
	fake.TypeStub = nil
	if fake.typeReturnsOnCall == nil {
		fake.typeReturnsOnCall = make(map[int]struct {
			result1 model.MetricsSourceType
		})
	}
	fake.typeReturnsOnCall[i] = struct {
		result1 model.MetricsSourceType
	}{result1}
}

func (fake *FakeMetricsProducer) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.produceMutex.RLock()
	defer fake.produceMutex.RUnlock()
	fake.typeMutex.RLock()
	defer fake.typeMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakeMetricsProducer) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ model.MetricsProducer = new(FakeMetricsProducer)
