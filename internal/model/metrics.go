// Copyright (c) F5, Inc.
//
// This source code is licensed under the Apache License, Version 2.0 license found in the
// LICENSE file in the root directory of this source tree.
package model

import (
	"context"
	"strings"

	"github.com/nginx/agent/v3/internal/bus"
	"go.opentelemetry.io/otel/sdk/metric/metricdata"
)

const (
	UnknownSourceType MetricsSourceType = 0
	Prometheus        MetricsSourceType = 1

	UnknownExporter ExporterType = 0
	OTel            ExporterType = 1

	UnknownInstrument InstrumentType = 0
	Counter           InstrumentType = 1
	Gauge             InstrumentType = 2
	Histogram         InstrumentType = 3
	Summary           InstrumentType = 4
)

type (
	// DataEntry represents a single entry for a data source, is one of [counter, gauge, histogram, summary].
	DataEntry struct {
		// The metric's name.
		Name string
		// The type of metric, i.e. which instrument is the data point for, one of [counter, gauge, histogram, summary].
		Type InstrumentType
		// The type of data source, one of [PROMETHEUS].
		SourceType MetricsSourceType
		// A freeform description of the metric, giving more detail on the data it represents.
		Description string
		// A list of data points that make up the entry.
		Values []DataPoint
	}

	// DataPoint is a single data point for an entry. An entry can have multiple points.
	DataPoint struct {
		// Metric point name.
		Name string
		// Any potential labels associated with the data point.
		Labels map[string]string
		// The actual value of the data point.
		Value any
	}

	EntryBuilder struct {
		entry DataEntry
	}

	EntryBuilderOption func(eb *EntryBuilder)

	// ExportType is a union type for all the data types we can convert to from a DataEntry.
	ExportType interface {
		metricdata.Metrics
	}

	// Converter is a conversion function from a DataEntry to the specified target type, which can then be exported.
	Converter[T ExportType] func(input DataEntry) (T, error)

	// Exporter acts as a data sink for metrics data generated by MetricsProducers.
	Exporter interface {
		// Export sends the given entry to the sink.
		Export(entry DataEntry) error
		// StartSink begins listening for Export() calls.
		StartSink(ctx context.Context)
		// Type returns the implementing exporter type.
		Type() ExporterType
	}

	// A MetricsProducer will produce metrics from its configured data source
	MetricsProducer interface {
		// Produce collects metrics from the underlying data source.
		Produce(ctx context.Context) ([]DataEntry, error)
		// The Type of the implementing source.
		Type() MetricsSourceType
	}

	MetricsSourceType int
	ExporterType      int
	InstrumentType    int
)

var (
	metricsSourceMap = map[string]MetricsSourceType{
		"prometheus": Prometheus,
	}

	exporterMap = map[string]ExporterType{
		"otel": OTel,
	}

	instrumentMap = map[string]InstrumentType{
		"counter":   Counter,
		"gauge":     Gauge,
		"histogram": Histogram,
		"summary":   Summary,
	}
)

func (de *DataEntry) ToBusMessage() *bus.Message {
	return &bus.Message{
		Topic: bus.MetricsTopic,
		Data:  *de,
	}
}

func NewEntryBuilder(options ...EntryBuilderOption) EntryBuilder {
	builder := EntryBuilder{}

	for _, opt := range options {
		opt(&builder)
	}

	return builder
}

func WithSourceType(t MetricsSourceType) func(*EntryBuilder) {
	return func(eb *EntryBuilder) {
		eb.entry.SourceType = t
	}
}

func (eb *EntryBuilder) WithName(n string) {
	eb.entry.Name = n
}

func (eb *EntryBuilder) WithDescription(d string) {
	eb.entry.Description = d
}

func (eb *EntryBuilder) WithType(t InstrumentType) {
	eb.entry.Type = t
}

func (eb *EntryBuilder) WithSourceType(t MetricsSourceType) {
	eb.entry.SourceType = t
}

func (eb *EntryBuilder) WithValues(dps ...DataPoint) {
	eb.entry.Values = append(eb.entry.Values, dps...)
}

func (eb *EntryBuilder) Build() DataEntry {
	return eb.entry
}

func (eb *EntryBuilder) CanBuild() bool {
	return eb.entry.Name != "" &&
		eb.entry.Description != "" &&
		eb.entry.SourceType != 0 &&
		eb.entry.Type != UnknownInstrument
}

func (ms MetricsSourceType) String() string {
	switch ms {
	case Prometheus:
		return "Prometheus"
	case UnknownSourceType:
		fallthrough
	default:
		return "Unknown"
	}
}

func ToMetricsSourceType(input string) MetricsSourceType {
	result, ok := metricsSourceMap[strings.ToLower(input)]
	if !ok {
		return UnknownSourceType
	}

	return result
}

func (it InstrumentType) String() string {
	switch it {
	case Counter:
		return "counter"
	case Gauge:
		return "gauge"
	case Histogram:
		return "histogram"
	case Summary:
		return "summary"
	case UnknownInstrument:
		fallthrough
	default:
		return "unknown"
	}
}

func ToInstrumentType(input string) InstrumentType {
	result, ok := instrumentMap[strings.ToLower(input)]
	if !ok {
		return UnknownInstrument
	}

	return result
}

func (it ExporterType) String() string {
	switch it {
	case OTel:
		return "otel"
	case UnknownExporter:
		fallthrough
	default:
		return "unknown"
	}
}

func ToExporterType(input string) ExporterType {
	result, ok := exporterMap[strings.ToLower(input)]
	if !ok {
		return UnknownExporter
	}

	return result
}
