// Code generated by counterfeiter. DO NOT EDIT.
package servicefakes

import (
	"context"
	"sync"

	v1 "github.com/nginx/agent/v3/api/grpc/mpi/v1"
	"github.com/nginx/agent/v3/internal/model"
	"github.com/nginx/agent/v3/internal/service"
)

type FakeInstanceServiceInterface struct {
	GetInstanceStub        func(string) *v1.Instance
	getInstanceMutex       sync.RWMutex
	getInstanceArgsForCall []struct {
		arg1 string
	}
	getInstanceReturns struct {
		result1 *v1.Instance
	}
	getInstanceReturnsOnCall map[int]struct {
		result1 *v1.Instance
	}
	GetInstancesStub        func(context.Context, map[int32]*model.Process) []*v1.Instance
	getInstancesMutex       sync.RWMutex
	getInstancesArgsForCall []struct {
		arg1 context.Context
		arg2 map[int32]*model.Process
	}
	getInstancesReturns struct {
		result1 []*v1.Instance
	}
	getInstancesReturnsOnCall map[int]struct {
		result1 []*v1.Instance
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeInstanceServiceInterface) GetInstance(arg1 string) *v1.Instance {
	fake.getInstanceMutex.Lock()
	ret, specificReturn := fake.getInstanceReturnsOnCall[len(fake.getInstanceArgsForCall)]
	fake.getInstanceArgsForCall = append(fake.getInstanceArgsForCall, struct {
		arg1 string
	}{arg1})
	stub := fake.GetInstanceStub
	fakeReturns := fake.getInstanceReturns
	fake.recordInvocation("GetInstance", []interface{}{arg1})
	fake.getInstanceMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeInstanceServiceInterface) GetInstanceCallCount() int {
	fake.getInstanceMutex.RLock()
	defer fake.getInstanceMutex.RUnlock()
	return len(fake.getInstanceArgsForCall)
}

func (fake *FakeInstanceServiceInterface) GetInstanceCalls(stub func(string) *v1.Instance) {
	fake.getInstanceMutex.Lock()
	defer fake.getInstanceMutex.Unlock()
	fake.GetInstanceStub = stub
}

func (fake *FakeInstanceServiceInterface) GetInstanceArgsForCall(i int) string {
	fake.getInstanceMutex.RLock()
	defer fake.getInstanceMutex.RUnlock()
	argsForCall := fake.getInstanceArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeInstanceServiceInterface) GetInstanceReturns(result1 *v1.Instance) {
	fake.getInstanceMutex.Lock()
	defer fake.getInstanceMutex.Unlock()
	fake.GetInstanceStub = nil
	fake.getInstanceReturns = struct {
		result1 *v1.Instance
	}{result1}
}

func (fake *FakeInstanceServiceInterface) GetInstanceReturnsOnCall(i int, result1 *v1.Instance) {
	fake.getInstanceMutex.Lock()
	defer fake.getInstanceMutex.Unlock()
	fake.GetInstanceStub = nil
	if fake.getInstanceReturnsOnCall == nil {
		fake.getInstanceReturnsOnCall = make(map[int]struct {
			result1 *v1.Instance
		})
	}
	fake.getInstanceReturnsOnCall[i] = struct {
		result1 *v1.Instance
	}{result1}
}

func (fake *FakeInstanceServiceInterface) GetInstances(arg1 context.Context, arg2 map[int32]*model.Process) []*v1.Instance {
	fake.getInstancesMutex.Lock()
	ret, specificReturn := fake.getInstancesReturnsOnCall[len(fake.getInstancesArgsForCall)]
	fake.getInstancesArgsForCall = append(fake.getInstancesArgsForCall, struct {
		arg1 context.Context
		arg2 map[int32]*model.Process
	}{arg1, arg2})
	stub := fake.GetInstancesStub
	fakeReturns := fake.getInstancesReturns
	fake.recordInvocation("GetInstances", []interface{}{arg1, arg2})
	fake.getInstancesMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeInstanceServiceInterface) GetInstancesCallCount() int {
	fake.getInstancesMutex.RLock()
	defer fake.getInstancesMutex.RUnlock()
	return len(fake.getInstancesArgsForCall)
}

func (fake *FakeInstanceServiceInterface) GetInstancesCalls(stub func(context.Context, map[int32]*model.Process) []*v1.Instance) {
	fake.getInstancesMutex.Lock()
	defer fake.getInstancesMutex.Unlock()
	fake.GetInstancesStub = stub
}

func (fake *FakeInstanceServiceInterface) GetInstancesArgsForCall(i int) (context.Context, map[int32]*model.Process) {
	fake.getInstancesMutex.RLock()
	defer fake.getInstancesMutex.RUnlock()
	argsForCall := fake.getInstancesArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2
}

func (fake *FakeInstanceServiceInterface) GetInstancesReturns(result1 []*v1.Instance) {
	fake.getInstancesMutex.Lock()
	defer fake.getInstancesMutex.Unlock()
	fake.GetInstancesStub = nil
	fake.getInstancesReturns = struct {
		result1 []*v1.Instance
	}{result1}
}

func (fake *FakeInstanceServiceInterface) GetInstancesReturnsOnCall(i int, result1 []*v1.Instance) {
	fake.getInstancesMutex.Lock()
	defer fake.getInstancesMutex.Unlock()
	fake.GetInstancesStub = nil
	if fake.getInstancesReturnsOnCall == nil {
		fake.getInstancesReturnsOnCall = make(map[int]struct {
			result1 []*v1.Instance
		})
	}
	fake.getInstancesReturnsOnCall[i] = struct {
		result1 []*v1.Instance
	}{result1}
}

func (fake *FakeInstanceServiceInterface) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.getInstanceMutex.RLock()
	defer fake.getInstanceMutex.RUnlock()
	fake.getInstancesMutex.RLock()
	defer fake.getInstancesMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakeInstanceServiceInterface) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ service.InstanceServiceInterface = new(FakeInstanceServiceInterface)
