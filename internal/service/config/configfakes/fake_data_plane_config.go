// Code generated by counterfeiter. DO NOT EDIT.
package configfakes

import (
	"sync"

	"github.com/nginx/agent/v3/api/grpc/instances"
	"github.com/nginx/agent/v3/internal/service/config"
)

type FakeDataPlaneConfig struct {
	ParseConfigStub        func(*instances.Instance) (any, error)
	parseConfigMutex       sync.RWMutex
	parseConfigArgsForCall []struct {
		arg1 *instances.Instance
	}
	parseConfigReturns struct {
		result1 any
		result2 error
	}
	parseConfigReturnsOnCall map[int]struct {
		result1 any
		result2 error
	}
	ReloadStub        func(*instances.Instance) error
	reloadMutex       sync.RWMutex
	reloadArgsForCall []struct {
		arg1 *instances.Instance
	}
	reloadReturns struct {
		result1 error
	}
	reloadReturnsOnCall map[int]struct {
		result1 error
	}
	ValidateStub        func(*instances.Instance) error
	validateMutex       sync.RWMutex
	validateArgsForCall []struct {
		arg1 *instances.Instance
	}
	validateReturns struct {
		result1 error
	}
	validateReturnsOnCall map[int]struct {
		result1 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeDataPlaneConfig) ParseConfig(arg1 *instances.Instance) (any, error) {
	fake.parseConfigMutex.Lock()
	ret, specificReturn := fake.parseConfigReturnsOnCall[len(fake.parseConfigArgsForCall)]
	fake.parseConfigArgsForCall = append(fake.parseConfigArgsForCall, struct {
		arg1 *instances.Instance
	}{arg1})
	stub := fake.ParseConfigStub
	fakeReturns := fake.parseConfigReturns
	fake.recordInvocation("ParseConfig", []interface{}{arg1})
	fake.parseConfigMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeDataPlaneConfig) ParseConfigCallCount() int {
	fake.parseConfigMutex.RLock()
	defer fake.parseConfigMutex.RUnlock()
	return len(fake.parseConfigArgsForCall)
}

func (fake *FakeDataPlaneConfig) ParseConfigCalls(stub func(*instances.Instance) (any, error)) {
	fake.parseConfigMutex.Lock()
	defer fake.parseConfigMutex.Unlock()
	fake.ParseConfigStub = stub
}

func (fake *FakeDataPlaneConfig) ParseConfigArgsForCall(i int) *instances.Instance {
	fake.parseConfigMutex.RLock()
	defer fake.parseConfigMutex.RUnlock()
	argsForCall := fake.parseConfigArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeDataPlaneConfig) ParseConfigReturns(result1 any, result2 error) {
	fake.parseConfigMutex.Lock()
	defer fake.parseConfigMutex.Unlock()
	fake.ParseConfigStub = nil
	fake.parseConfigReturns = struct {
		result1 any
		result2 error
	}{result1, result2}
}

func (fake *FakeDataPlaneConfig) ParseConfigReturnsOnCall(i int, result1 any, result2 error) {
	fake.parseConfigMutex.Lock()
	defer fake.parseConfigMutex.Unlock()
	fake.ParseConfigStub = nil
	if fake.parseConfigReturnsOnCall == nil {
		fake.parseConfigReturnsOnCall = make(map[int]struct {
			result1 any
			result2 error
		})
	}
	fake.parseConfigReturnsOnCall[i] = struct {
		result1 any
		result2 error
	}{result1, result2}
}

func (fake *FakeDataPlaneConfig) Reload(arg1 *instances.Instance) error {
	fake.reloadMutex.Lock()
	ret, specificReturn := fake.reloadReturnsOnCall[len(fake.reloadArgsForCall)]
	fake.reloadArgsForCall = append(fake.reloadArgsForCall, struct {
		arg1 *instances.Instance
	}{arg1})
	stub := fake.ReloadStub
	fakeReturns := fake.reloadReturns
	fake.recordInvocation("Reload", []interface{}{arg1})
	fake.reloadMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeDataPlaneConfig) ReloadCallCount() int {
	fake.reloadMutex.RLock()
	defer fake.reloadMutex.RUnlock()
	return len(fake.reloadArgsForCall)
}

func (fake *FakeDataPlaneConfig) ReloadCalls(stub func(*instances.Instance) error) {
	fake.reloadMutex.Lock()
	defer fake.reloadMutex.Unlock()
	fake.ReloadStub = stub
}

func (fake *FakeDataPlaneConfig) ReloadArgsForCall(i int) *instances.Instance {
	fake.reloadMutex.RLock()
	defer fake.reloadMutex.RUnlock()
	argsForCall := fake.reloadArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeDataPlaneConfig) ReloadReturns(result1 error) {
	fake.reloadMutex.Lock()
	defer fake.reloadMutex.Unlock()
	fake.ReloadStub = nil
	fake.reloadReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeDataPlaneConfig) ReloadReturnsOnCall(i int, result1 error) {
	fake.reloadMutex.Lock()
	defer fake.reloadMutex.Unlock()
	fake.ReloadStub = nil
	if fake.reloadReturnsOnCall == nil {
		fake.reloadReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.reloadReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeDataPlaneConfig) Validate(arg1 *instances.Instance) error {
	fake.validateMutex.Lock()
	ret, specificReturn := fake.validateReturnsOnCall[len(fake.validateArgsForCall)]
	fake.validateArgsForCall = append(fake.validateArgsForCall, struct {
		arg1 *instances.Instance
	}{arg1})
	stub := fake.ValidateStub
	fakeReturns := fake.validateReturns
	fake.recordInvocation("Validate", []interface{}{arg1})
	fake.validateMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeDataPlaneConfig) ValidateCallCount() int {
	fake.validateMutex.RLock()
	defer fake.validateMutex.RUnlock()
	return len(fake.validateArgsForCall)
}

func (fake *FakeDataPlaneConfig) ValidateCalls(stub func(*instances.Instance) error) {
	fake.validateMutex.Lock()
	defer fake.validateMutex.Unlock()
	fake.ValidateStub = stub
}

func (fake *FakeDataPlaneConfig) ValidateArgsForCall(i int) *instances.Instance {
	fake.validateMutex.RLock()
	defer fake.validateMutex.RUnlock()
	argsForCall := fake.validateArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeDataPlaneConfig) ValidateReturns(result1 error) {
	fake.validateMutex.Lock()
	defer fake.validateMutex.Unlock()
	fake.ValidateStub = nil
	fake.validateReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeDataPlaneConfig) ValidateReturnsOnCall(i int, result1 error) {
	fake.validateMutex.Lock()
	defer fake.validateMutex.Unlock()
	fake.ValidateStub = nil
	if fake.validateReturnsOnCall == nil {
		fake.validateReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.validateReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeDataPlaneConfig) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.parseConfigMutex.RLock()
	defer fake.parseConfigMutex.RUnlock()
	fake.reloadMutex.RLock()
	defer fake.reloadMutex.RUnlock()
	fake.validateMutex.RLock()
	defer fake.validateMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakeDataPlaneConfig) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ config.DataPlaneConfig = new(FakeDataPlaneConfig)
