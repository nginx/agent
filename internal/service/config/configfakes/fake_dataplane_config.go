// Code generated by counterfeiter. DO NOT EDIT.
package configfakes

import (
	"sync"

	"github.com/nginx/agent/v3/api/grpc/instances"
	"github.com/nginx/agent/v3/internal/service/config"
)

type FakeDataplaneConfig struct {
	ParseConfigStub        func(*instances.Instance) (any, error)
	parseConfigMutex       sync.RWMutex
	parseConfigArgsForCall []struct {
		arg1 *instances.Instance
	}
	parseConfigReturns struct {
		result1 any
		result2 error
	}
	parseConfigReturnsOnCall map[int]struct {
		result1 any
		result2 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeDataplaneConfig) ParseConfig(arg1 *instances.Instance) (any, error) {
	fake.parseConfigMutex.Lock()
	ret, specificReturn := fake.parseConfigReturnsOnCall[len(fake.parseConfigArgsForCall)]
	fake.parseConfigArgsForCall = append(fake.parseConfigArgsForCall, struct {
		arg1 *instances.Instance
	}{arg1})
	stub := fake.ParseConfigStub
	fakeReturns := fake.parseConfigReturns
	fake.recordInvocation("ParseConfig", []interface{}{arg1})
	fake.parseConfigMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeDataplaneConfig) ParseConfigCallCount() int {
	fake.parseConfigMutex.RLock()
	defer fake.parseConfigMutex.RUnlock()
	return len(fake.parseConfigArgsForCall)
}

func (fake *FakeDataplaneConfig) ParseConfigCalls(stub func(*instances.Instance) (any, error)) {
	fake.parseConfigMutex.Lock()
	defer fake.parseConfigMutex.Unlock()
	fake.ParseConfigStub = stub
}

func (fake *FakeDataplaneConfig) ParseConfigArgsForCall(i int) *instances.Instance {
	fake.parseConfigMutex.RLock()
	defer fake.parseConfigMutex.RUnlock()
	argsForCall := fake.parseConfigArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeDataplaneConfig) ParseConfigReturns(result1 any, result2 error) {
	fake.parseConfigMutex.Lock()
	defer fake.parseConfigMutex.Unlock()
	fake.ParseConfigStub = nil
	fake.parseConfigReturns = struct {
		result1 any
		result2 error
	}{result1, result2}
}

func (fake *FakeDataplaneConfig) ParseConfigReturnsOnCall(i int, result1 any, result2 error) {
	fake.parseConfigMutex.Lock()
	defer fake.parseConfigMutex.Unlock()
	fake.ParseConfigStub = nil
	if fake.parseConfigReturnsOnCall == nil {
		fake.parseConfigReturnsOnCall = make(map[int]struct {
			result1 any
			result2 error
		})
	}
	fake.parseConfigReturnsOnCall[i] = struct {
		result1 any
		result2 error
	}{result1, result2}
}

func (fake *FakeDataplaneConfig) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.parseConfigMutex.RLock()
	defer fake.parseConfigMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakeDataplaneConfig) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ config.DataplaneConfig = new(FakeDataplaneConfig)
