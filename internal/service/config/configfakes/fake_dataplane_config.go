// Code generated by counterfeiter. DO NOT EDIT.
package configfakes

import (
	"context"
	"sync"

	"github.com/nginx/agent/v3/api/grpc/instances"
	configa "github.com/nginx/agent/v3/internal/datasource/config"
	"github.com/nginx/agent/v3/internal/service/config"
)

type FakeDataplaneConfig struct {
	ApplyStub        func(*instances.Instance) error
	applyMutex       sync.RWMutex
	applyArgsForCall []struct {
		arg1 *instances.Instance
	}
	applyReturns struct {
		result1 error
	}
	applyReturnsOnCall map[int]struct {
		result1 error
	}
	CompleteStub        func() error
	completeMutex       sync.RWMutex
	completeArgsForCall []struct {
	}
	completeReturns struct {
		result1 error
	}
	completeReturnsOnCall map[int]struct {
		result1 error
	}
	ParseConfigStub        func(*instances.Instance) (any, error)
	parseConfigMutex       sync.RWMutex
	parseConfigArgsForCall []struct {
		arg1 *instances.Instance
	}
	parseConfigReturns struct {
		result1 any
		result2 error
	}
	parseConfigReturnsOnCall map[int]struct {
		result1 any
		result2 error
	}
	SetConfigWriterStub        func(configa.ConfigWriterInterface)
	setConfigWriterMutex       sync.RWMutex
	setConfigWriterArgsForCall []struct {
		arg1 configa.ConfigWriterInterface
	}
	ValidateStub        func(*instances.Instance) error
	validateMutex       sync.RWMutex
	validateArgsForCall []struct {
		arg1 *instances.Instance
	}
	validateReturns struct {
		result1 error
	}
	validateReturnsOnCall map[int]struct {
		result1 error
	}
	WriteStub        func(context.Context, string, string, string) (map[string]struct{}, error)
	writeMutex       sync.RWMutex
	writeArgsForCall []struct {
		arg1 context.Context
		arg2 string
		arg3 string
		arg4 string
	}
	writeReturns struct {
		result1 map[string]struct{}
		result2 error
	}
	writeReturnsOnCall map[int]struct {
		result1 map[string]struct{}
		result2 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeDataplaneConfig) Apply(arg1 *instances.Instance) error {
	fake.applyMutex.Lock()
	ret, specificReturn := fake.applyReturnsOnCall[len(fake.applyArgsForCall)]
	fake.applyArgsForCall = append(fake.applyArgsForCall, struct {
		arg1 *instances.Instance
	}{arg1})
	stub := fake.ApplyStub
	fakeReturns := fake.applyReturns
	fake.recordInvocation("Apply", []interface{}{arg1})
	fake.applyMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeDataplaneConfig) ApplyCallCount() int {
	fake.applyMutex.RLock()
	defer fake.applyMutex.RUnlock()
	return len(fake.applyArgsForCall)
}

func (fake *FakeDataplaneConfig) ApplyCalls(stub func(*instances.Instance) error) {
	fake.applyMutex.Lock()
	defer fake.applyMutex.Unlock()
	fake.ApplyStub = stub
}

func (fake *FakeDataplaneConfig) ApplyArgsForCall(i int) *instances.Instance {
	fake.applyMutex.RLock()
	defer fake.applyMutex.RUnlock()
	argsForCall := fake.applyArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeDataplaneConfig) ApplyReturns(result1 error) {
	fake.applyMutex.Lock()
	defer fake.applyMutex.Unlock()
	fake.ApplyStub = nil
	fake.applyReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeDataplaneConfig) ApplyReturnsOnCall(i int, result1 error) {
	fake.applyMutex.Lock()
	defer fake.applyMutex.Unlock()
	fake.ApplyStub = nil
	if fake.applyReturnsOnCall == nil {
		fake.applyReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.applyReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeDataplaneConfig) Complete() error {
	fake.completeMutex.Lock()
	ret, specificReturn := fake.completeReturnsOnCall[len(fake.completeArgsForCall)]
	fake.completeArgsForCall = append(fake.completeArgsForCall, struct {
	}{})
	stub := fake.CompleteStub
	fakeReturns := fake.completeReturns
	fake.recordInvocation("Complete", []interface{}{})
	fake.completeMutex.Unlock()
	if stub != nil {
		return stub()
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeDataplaneConfig) CompleteCallCount() int {
	fake.completeMutex.RLock()
	defer fake.completeMutex.RUnlock()
	return len(fake.completeArgsForCall)
}

func (fake *FakeDataplaneConfig) CompleteCalls(stub func() error) {
	fake.completeMutex.Lock()
	defer fake.completeMutex.Unlock()
	fake.CompleteStub = stub
}

func (fake *FakeDataplaneConfig) CompleteReturns(result1 error) {
	fake.completeMutex.Lock()
	defer fake.completeMutex.Unlock()
	fake.CompleteStub = nil
	fake.completeReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeDataplaneConfig) CompleteReturnsOnCall(i int, result1 error) {
	fake.completeMutex.Lock()
	defer fake.completeMutex.Unlock()
	fake.CompleteStub = nil
	if fake.completeReturnsOnCall == nil {
		fake.completeReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.completeReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeDataplaneConfig) ParseConfig(arg1 *instances.Instance) (any, error) {
	fake.parseConfigMutex.Lock()
	ret, specificReturn := fake.parseConfigReturnsOnCall[len(fake.parseConfigArgsForCall)]
	fake.parseConfigArgsForCall = append(fake.parseConfigArgsForCall, struct {
		arg1 *instances.Instance
	}{arg1})
	stub := fake.ParseConfigStub
	fakeReturns := fake.parseConfigReturns
	fake.recordInvocation("ParseConfig", []interface{}{arg1})
	fake.parseConfigMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeDataplaneConfig) ParseConfigCallCount() int {
	fake.parseConfigMutex.RLock()
	defer fake.parseConfigMutex.RUnlock()
	return len(fake.parseConfigArgsForCall)
}

func (fake *FakeDataplaneConfig) ParseConfigCalls(stub func(*instances.Instance) (any, error)) {
	fake.parseConfigMutex.Lock()
	defer fake.parseConfigMutex.Unlock()
	fake.ParseConfigStub = stub
}

func (fake *FakeDataplaneConfig) ParseConfigArgsForCall(i int) *instances.Instance {
	fake.parseConfigMutex.RLock()
	defer fake.parseConfigMutex.RUnlock()
	argsForCall := fake.parseConfigArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeDataplaneConfig) ParseConfigReturns(result1 any, result2 error) {
	fake.parseConfigMutex.Lock()
	defer fake.parseConfigMutex.Unlock()
	fake.ParseConfigStub = nil
	fake.parseConfigReturns = struct {
		result1 any
		result2 error
	}{result1, result2}
}

func (fake *FakeDataplaneConfig) ParseConfigReturnsOnCall(i int, result1 any, result2 error) {
	fake.parseConfigMutex.Lock()
	defer fake.parseConfigMutex.Unlock()
	fake.ParseConfigStub = nil
	if fake.parseConfigReturnsOnCall == nil {
		fake.parseConfigReturnsOnCall = make(map[int]struct {
			result1 any
			result2 error
		})
	}
	fake.parseConfigReturnsOnCall[i] = struct {
		result1 any
		result2 error
	}{result1, result2}
}

func (fake *FakeDataplaneConfig) SetConfigWriter(arg1 configa.ConfigWriterInterface) {
	fake.setConfigWriterMutex.Lock()
	fake.setConfigWriterArgsForCall = append(fake.setConfigWriterArgsForCall, struct {
		arg1 configa.ConfigWriterInterface
	}{arg1})
	stub := fake.SetConfigWriterStub
	fake.recordInvocation("SetConfigWriter", []interface{}{arg1})
	fake.setConfigWriterMutex.Unlock()
	if stub != nil {
		fake.SetConfigWriterStub(arg1)
	}
}

func (fake *FakeDataplaneConfig) SetConfigWriterCallCount() int {
	fake.setConfigWriterMutex.RLock()
	defer fake.setConfigWriterMutex.RUnlock()
	return len(fake.setConfigWriterArgsForCall)
}

func (fake *FakeDataplaneConfig) SetConfigWriterCalls(stub func(configa.ConfigWriterInterface)) {
	fake.setConfigWriterMutex.Lock()
	defer fake.setConfigWriterMutex.Unlock()
	fake.SetConfigWriterStub = stub
}

func (fake *FakeDataplaneConfig) SetConfigWriterArgsForCall(i int) configa.ConfigWriterInterface {
	fake.setConfigWriterMutex.RLock()
	defer fake.setConfigWriterMutex.RUnlock()
	argsForCall := fake.setConfigWriterArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeDataplaneConfig) Validate(arg1 *instances.Instance) error {
	fake.validateMutex.Lock()
	ret, specificReturn := fake.validateReturnsOnCall[len(fake.validateArgsForCall)]
	fake.validateArgsForCall = append(fake.validateArgsForCall, struct {
		arg1 *instances.Instance
	}{arg1})
	stub := fake.ValidateStub
	fakeReturns := fake.validateReturns
	fake.recordInvocation("Validate", []interface{}{arg1})
	fake.validateMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeDataplaneConfig) ValidateCallCount() int {
	fake.validateMutex.RLock()
	defer fake.validateMutex.RUnlock()
	return len(fake.validateArgsForCall)
}

func (fake *FakeDataplaneConfig) ValidateCalls(stub func(*instances.Instance) error) {
	fake.validateMutex.Lock()
	defer fake.validateMutex.Unlock()
	fake.ValidateStub = stub
}

func (fake *FakeDataplaneConfig) ValidateArgsForCall(i int) *instances.Instance {
	fake.validateMutex.RLock()
	defer fake.validateMutex.RUnlock()
	argsForCall := fake.validateArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeDataplaneConfig) ValidateReturns(result1 error) {
	fake.validateMutex.Lock()
	defer fake.validateMutex.Unlock()
	fake.ValidateStub = nil
	fake.validateReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeDataplaneConfig) ValidateReturnsOnCall(i int, result1 error) {
	fake.validateMutex.Lock()
	defer fake.validateMutex.Unlock()
	fake.ValidateStub = nil
	if fake.validateReturnsOnCall == nil {
		fake.validateReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.validateReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeDataplaneConfig) Write(arg1 context.Context, arg2 string, arg3 string, arg4 string) (map[string]struct{}, error) {
	fake.writeMutex.Lock()
	ret, specificReturn := fake.writeReturnsOnCall[len(fake.writeArgsForCall)]
	fake.writeArgsForCall = append(fake.writeArgsForCall, struct {
		arg1 context.Context
		arg2 string
		arg3 string
		arg4 string
	}{arg1, arg2, arg3, arg4})
	stub := fake.WriteStub
	fakeReturns := fake.writeReturns
	fake.recordInvocation("Write", []interface{}{arg1, arg2, arg3, arg4})
	fake.writeMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3, arg4)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeDataplaneConfig) WriteCallCount() int {
	fake.writeMutex.RLock()
	defer fake.writeMutex.RUnlock()
	return len(fake.writeArgsForCall)
}

func (fake *FakeDataplaneConfig) WriteCalls(stub func(context.Context, string, string, string) (map[string]struct{}, error)) {
	fake.writeMutex.Lock()
	defer fake.writeMutex.Unlock()
	fake.WriteStub = stub
}

func (fake *FakeDataplaneConfig) WriteArgsForCall(i int) (context.Context, string, string, string) {
	fake.writeMutex.RLock()
	defer fake.writeMutex.RUnlock()
	argsForCall := fake.writeArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3, argsForCall.arg4
}

func (fake *FakeDataplaneConfig) WriteReturns(result1 map[string]struct{}, result2 error) {
	fake.writeMutex.Lock()
	defer fake.writeMutex.Unlock()
	fake.WriteStub = nil
	fake.writeReturns = struct {
		result1 map[string]struct{}
		result2 error
	}{result1, result2}
}

func (fake *FakeDataplaneConfig) WriteReturnsOnCall(i int, result1 map[string]struct{}, result2 error) {
	fake.writeMutex.Lock()
	defer fake.writeMutex.Unlock()
	fake.WriteStub = nil
	if fake.writeReturnsOnCall == nil {
		fake.writeReturnsOnCall = make(map[int]struct {
			result1 map[string]struct{}
			result2 error
		})
	}
	fake.writeReturnsOnCall[i] = struct {
		result1 map[string]struct{}
		result2 error
	}{result1, result2}
}

func (fake *FakeDataplaneConfig) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.applyMutex.RLock()
	defer fake.applyMutex.RUnlock()
	fake.completeMutex.RLock()
	defer fake.completeMutex.RUnlock()
	fake.parseConfigMutex.RLock()
	defer fake.parseConfigMutex.RUnlock()
	fake.setConfigWriterMutex.RLock()
	defer fake.setConfigWriterMutex.RUnlock()
	fake.validateMutex.RLock()
	defer fake.validateMutex.RUnlock()
	fake.writeMutex.RLock()
	defer fake.writeMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakeDataplaneConfig) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ config.DataplaneConfig = new(FakeDataplaneConfig)
