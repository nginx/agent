// Code generated by counterfeiter. DO NOT EDIT.
package watcherfakes

import (
	"context"
	"sync"

	"github.com/nginx/agent/v3/internal/model"
)

type FakeProcessOperator struct {
	ProcessesStub        func(context.Context) ([]*model.Process, error)
	processesMutex       sync.RWMutex
	processesArgsForCall []struct {
		arg1 context.Context
	}
	processesReturns struct {
		result1 []*model.Process
		result2 error
	}
	processesReturnsOnCall map[int]struct {
		result1 []*model.Process
		result2 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeProcessOperator) Processes(arg1 context.Context) ([]*model.Process, error) {
	fake.processesMutex.Lock()
	ret, specificReturn := fake.processesReturnsOnCall[len(fake.processesArgsForCall)]
	fake.processesArgsForCall = append(fake.processesArgsForCall, struct {
		arg1 context.Context
	}{arg1})
	stub := fake.ProcessesStub
	fakeReturns := fake.processesReturns
	fake.recordInvocation("Processes", []interface{}{arg1})
	fake.processesMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeProcessOperator) ProcessesCallCount() int {
	fake.processesMutex.RLock()
	defer fake.processesMutex.RUnlock()
	return len(fake.processesArgsForCall)
}

func (fake *FakeProcessOperator) ProcessesCalls(stub func(context.Context) ([]*model.Process, error)) {
	fake.processesMutex.Lock()
	defer fake.processesMutex.Unlock()
	fake.ProcessesStub = stub
}

func (fake *FakeProcessOperator) ProcessesArgsForCall(i int) context.Context {
	fake.processesMutex.RLock()
	defer fake.processesMutex.RUnlock()
	argsForCall := fake.processesArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeProcessOperator) ProcessesReturns(result1 []*model.Process, result2 error) {
	fake.processesMutex.Lock()
	defer fake.processesMutex.Unlock()
	fake.ProcessesStub = nil
	fake.processesReturns = struct {
		result1 []*model.Process
		result2 error
	}{result1, result2}
}

func (fake *FakeProcessOperator) ProcessesReturnsOnCall(i int, result1 []*model.Process, result2 error) {
	fake.processesMutex.Lock()
	defer fake.processesMutex.Unlock()
	fake.ProcessesStub = nil
	if fake.processesReturnsOnCall == nil {
		fake.processesReturnsOnCall = make(map[int]struct {
			result1 []*model.Process
			result2 error
		})
	}
	fake.processesReturnsOnCall[i] = struct {
		result1 []*model.Process
		result2 error
	}{result1, result2}
}

func (fake *FakeProcessOperator) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.processesMutex.RLock()
	defer fake.processesMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakeProcessOperator) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}
