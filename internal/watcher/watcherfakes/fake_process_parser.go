// Code generated by counterfeiter. DO NOT EDIT.
package watcherfakes

import (
	"context"
	"sync"

	v1 "github.com/nginx/agent/v3/api/grpc/mpi/v1"
	"github.com/nginx/agent/v3/internal/model"
)

type FakeProcessParser struct {
	ParseStub        func(context.Context, []*model.Process) map[string]*v1.Instance
	parseMutex       sync.RWMutex
	parseArgsForCall []struct {
		arg1 context.Context
		arg2 []*model.Process
	}
	parseReturns struct {
		result1 map[string]*v1.Instance
	}
	parseReturnsOnCall map[int]struct {
		result1 map[string]*v1.Instance
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeProcessParser) Parse(arg1 context.Context, arg2 []*model.Process) map[string]*v1.Instance {
	var arg2Copy []*model.Process
	if arg2 != nil {
		arg2Copy = make([]*model.Process, len(arg2))
		copy(arg2Copy, arg2)
	}
	fake.parseMutex.Lock()
	ret, specificReturn := fake.parseReturnsOnCall[len(fake.parseArgsForCall)]
	fake.parseArgsForCall = append(fake.parseArgsForCall, struct {
		arg1 context.Context
		arg2 []*model.Process
	}{arg1, arg2Copy})
	stub := fake.ParseStub
	fakeReturns := fake.parseReturns
	fake.recordInvocation("Parse", []interface{}{arg1, arg2Copy})
	fake.parseMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeProcessParser) ParseCallCount() int {
	fake.parseMutex.RLock()
	defer fake.parseMutex.RUnlock()
	return len(fake.parseArgsForCall)
}

func (fake *FakeProcessParser) ParseCalls(stub func(context.Context, []*model.Process) map[string]*v1.Instance) {
	fake.parseMutex.Lock()
	defer fake.parseMutex.Unlock()
	fake.ParseStub = stub
}

func (fake *FakeProcessParser) ParseArgsForCall(i int) (context.Context, []*model.Process) {
	fake.parseMutex.RLock()
	defer fake.parseMutex.RUnlock()
	argsForCall := fake.parseArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2
}

func (fake *FakeProcessParser) ParseReturns(result1 map[string]*v1.Instance) {
	fake.parseMutex.Lock()
	defer fake.parseMutex.Unlock()
	fake.ParseStub = nil
	fake.parseReturns = struct {
		result1 map[string]*v1.Instance
	}{result1}
}

func (fake *FakeProcessParser) ParseReturnsOnCall(i int, result1 map[string]*v1.Instance) {
	fake.parseMutex.Lock()
	defer fake.parseMutex.Unlock()
	fake.ParseStub = nil
	if fake.parseReturnsOnCall == nil {
		fake.parseReturnsOnCall = make(map[int]struct {
			result1 map[string]*v1.Instance
		})
	}
	fake.parseReturnsOnCall[i] = struct {
		result1 map[string]*v1.Instance
	}{result1}
}

func (fake *FakeProcessParser) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.parseMutex.RLock()
	defer fake.parseMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakeProcessParser) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}
