// Code generated by counterfeiter. DO NOT EDIT.
package watcherfakes

import (
	"context"
	"sync"

	v1 "github.com/nginx/agent/v3/api/grpc/mpi/v1"
)

type FakeHealthWatcherOperator struct {
	HealthStub        func(context.Context, string) *v1.InstanceHealth
	healthMutex       sync.RWMutex
	healthArgsForCall []struct {
		arg1 context.Context
		arg2 string
	}
	healthReturns struct {
		result1 *v1.InstanceHealth
	}
	healthReturnsOnCall map[int]struct {
		result1 *v1.InstanceHealth
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeHealthWatcherOperator) Health(arg1 context.Context, arg2 string) *v1.InstanceHealth {
	fake.healthMutex.Lock()
	ret, specificReturn := fake.healthReturnsOnCall[len(fake.healthArgsForCall)]
	fake.healthArgsForCall = append(fake.healthArgsForCall, struct {
		arg1 context.Context
		arg2 string
	}{arg1, arg2})
	stub := fake.HealthStub
	fakeReturns := fake.healthReturns
	fake.recordInvocation("Health", []interface{}{arg1, arg2})
	fake.healthMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeHealthWatcherOperator) HealthCallCount() int {
	fake.healthMutex.RLock()
	defer fake.healthMutex.RUnlock()
	return len(fake.healthArgsForCall)
}

func (fake *FakeHealthWatcherOperator) HealthCalls(stub func(context.Context, string) *v1.InstanceHealth) {
	fake.healthMutex.Lock()
	defer fake.healthMutex.Unlock()
	fake.HealthStub = stub
}

func (fake *FakeHealthWatcherOperator) HealthArgsForCall(i int) (context.Context, string) {
	fake.healthMutex.RLock()
	defer fake.healthMutex.RUnlock()
	argsForCall := fake.healthArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2
}

func (fake *FakeHealthWatcherOperator) HealthReturns(result1 *v1.InstanceHealth) {
	fake.healthMutex.Lock()
	defer fake.healthMutex.Unlock()
	fake.HealthStub = nil
	fake.healthReturns = struct {
		result1 *v1.InstanceHealth
	}{result1}
}

func (fake *FakeHealthWatcherOperator) HealthReturnsOnCall(i int, result1 *v1.InstanceHealth) {
	fake.healthMutex.Lock()
	defer fake.healthMutex.Unlock()
	fake.HealthStub = nil
	if fake.healthReturnsOnCall == nil {
		fake.healthReturnsOnCall = make(map[int]struct {
			result1 *v1.InstanceHealth
		})
	}
	fake.healthReturnsOnCall[i] = struct {
		result1 *v1.InstanceHealth
	}{result1}
}

func (fake *FakeHealthWatcherOperator) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.healthMutex.RLock()
	defer fake.healthMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakeHealthWatcherOperator) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}
