// Code generated by counterfeiter. DO NOT EDIT.
package watcherfakes

import (
	"context"
	"sync"

	"github.com/nginx/agent/v3/internal/watcher/credentials"
)

type FakeCredentialWatcherServiceInterface struct {
	WatchStub        func(context.Context, chan<- credentials.CredentialUpdateMessage)
	watchMutex       sync.RWMutex
	watchArgsForCall []struct {
		arg1 context.Context
		arg2 chan<- credentials.CredentialUpdateMessage
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeCredentialWatcherServiceInterface) Watch(arg1 context.Context, arg2 chan<- credentials.CredentialUpdateMessage) {
	fake.watchMutex.Lock()
	fake.watchArgsForCall = append(fake.watchArgsForCall, struct {
		arg1 context.Context
		arg2 chan<- credentials.CredentialUpdateMessage
	}{arg1, arg2})
	stub := fake.WatchStub
	fake.recordInvocation("Watch", []interface{}{arg1, arg2})
	fake.watchMutex.Unlock()
	if stub != nil {
		fake.WatchStub(arg1, arg2)
	}
}

func (fake *FakeCredentialWatcherServiceInterface) WatchCallCount() int {
	fake.watchMutex.RLock()
	defer fake.watchMutex.RUnlock()
	return len(fake.watchArgsForCall)
}

func (fake *FakeCredentialWatcherServiceInterface) WatchCalls(stub func(context.Context, chan<- credentials.CredentialUpdateMessage)) {
	fake.watchMutex.Lock()
	defer fake.watchMutex.Unlock()
	fake.WatchStub = stub
}

func (fake *FakeCredentialWatcherServiceInterface) WatchArgsForCall(i int) (context.Context, chan<- credentials.CredentialUpdateMessage) {
	fake.watchMutex.RLock()
	defer fake.watchMutex.RUnlock()
	argsForCall := fake.watchArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2
}

func (fake *FakeCredentialWatcherServiceInterface) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.watchMutex.RLock()
	defer fake.watchMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakeCredentialWatcherServiceInterface) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}
