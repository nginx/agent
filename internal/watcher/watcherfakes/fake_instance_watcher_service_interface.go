// Code generated by counterfeiter. DO NOT EDIT.
package watcherfakes

import (
	"context"
	"sync"

	"github.com/nginx/agent/v3/internal/watcher/instance"
)

type FakeInstanceWatcherServiceInterface struct {
	ReparseConfigStub        func(context.Context, string)
	reparseConfigMutex       sync.RWMutex
	reparseConfigArgsForCall []struct {
		arg1 context.Context
		arg2 string
	}
	ReparseConfigsStub        func(context.Context)
	reparseConfigsMutex       sync.RWMutex
	reparseConfigsArgsForCall []struct {
		arg1 context.Context
	}
	WatchStub        func(context.Context, chan<- instance.InstanceUpdatesMessage, chan<- instance.NginxConfigContextMessage)
	watchMutex       sync.RWMutex
	watchArgsForCall []struct {
		arg1 context.Context
		arg2 chan<- instance.InstanceUpdatesMessage
		arg3 chan<- instance.NginxConfigContextMessage
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeInstanceWatcherServiceInterface) ReparseConfig(arg1 context.Context, arg2 string) {
	fake.reparseConfigMutex.Lock()
	fake.reparseConfigArgsForCall = append(fake.reparseConfigArgsForCall, struct {
		arg1 context.Context
		arg2 string
	}{arg1, arg2})
	stub := fake.ReparseConfigStub
	fake.recordInvocation("ReparseConfig", []interface{}{arg1, arg2})
	fake.reparseConfigMutex.Unlock()
	if stub != nil {
		fake.ReparseConfigStub(arg1, arg2)
	}
}

func (fake *FakeInstanceWatcherServiceInterface) ReparseConfigCallCount() int {
	fake.reparseConfigMutex.RLock()
	defer fake.reparseConfigMutex.RUnlock()
	return len(fake.reparseConfigArgsForCall)
}

func (fake *FakeInstanceWatcherServiceInterface) ReparseConfigCalls(stub func(context.Context, string)) {
	fake.reparseConfigMutex.Lock()
	defer fake.reparseConfigMutex.Unlock()
	fake.ReparseConfigStub = stub
}

func (fake *FakeInstanceWatcherServiceInterface) ReparseConfigArgsForCall(i int) (context.Context, string) {
	fake.reparseConfigMutex.RLock()
	defer fake.reparseConfigMutex.RUnlock()
	argsForCall := fake.reparseConfigArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2
}

func (fake *FakeInstanceWatcherServiceInterface) ReparseConfigs(arg1 context.Context) {
	fake.reparseConfigsMutex.Lock()
	fake.reparseConfigsArgsForCall = append(fake.reparseConfigsArgsForCall, struct {
		arg1 context.Context
	}{arg1})
	stub := fake.ReparseConfigsStub
	fake.recordInvocation("ReparseConfigs", []interface{}{arg1})
	fake.reparseConfigsMutex.Unlock()
	if stub != nil {
		fake.ReparseConfigsStub(arg1)
	}
}

func (fake *FakeInstanceWatcherServiceInterface) ReparseConfigsCallCount() int {
	fake.reparseConfigsMutex.RLock()
	defer fake.reparseConfigsMutex.RUnlock()
	return len(fake.reparseConfigsArgsForCall)
}

func (fake *FakeInstanceWatcherServiceInterface) ReparseConfigsCalls(stub func(context.Context)) {
	fake.reparseConfigsMutex.Lock()
	defer fake.reparseConfigsMutex.Unlock()
	fake.ReparseConfigsStub = stub
}

func (fake *FakeInstanceWatcherServiceInterface) ReparseConfigsArgsForCall(i int) context.Context {
	fake.reparseConfigsMutex.RLock()
	defer fake.reparseConfigsMutex.RUnlock()
	argsForCall := fake.reparseConfigsArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeInstanceWatcherServiceInterface) Watch(arg1 context.Context, arg2 chan<- instance.InstanceUpdatesMessage, arg3 chan<- instance.NginxConfigContextMessage) {
	fake.watchMutex.Lock()
	fake.watchArgsForCall = append(fake.watchArgsForCall, struct {
		arg1 context.Context
		arg2 chan<- instance.InstanceUpdatesMessage
		arg3 chan<- instance.NginxConfigContextMessage
	}{arg1, arg2, arg3})
	stub := fake.WatchStub
	fake.recordInvocation("Watch", []interface{}{arg1, arg2, arg3})
	fake.watchMutex.Unlock()
	if stub != nil {
		fake.WatchStub(arg1, arg2, arg3)
	}
}

func (fake *FakeInstanceWatcherServiceInterface) WatchCallCount() int {
	fake.watchMutex.RLock()
	defer fake.watchMutex.RUnlock()
	return len(fake.watchArgsForCall)
}

func (fake *FakeInstanceWatcherServiceInterface) WatchCalls(stub func(context.Context, chan<- instance.InstanceUpdatesMessage, chan<- instance.NginxConfigContextMessage)) {
	fake.watchMutex.Lock()
	defer fake.watchMutex.Unlock()
	fake.WatchStub = stub
}

func (fake *FakeInstanceWatcherServiceInterface) WatchArgsForCall(i int) (context.Context, chan<- instance.InstanceUpdatesMessage, chan<- instance.NginxConfigContextMessage) {
	fake.watchMutex.RLock()
	defer fake.watchMutex.RUnlock()
	argsForCall := fake.watchArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeInstanceWatcherServiceInterface) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.reparseConfigMutex.RLock()
	defer fake.reparseConfigMutex.RUnlock()
	fake.reparseConfigsMutex.RLock()
	defer fake.reparseConfigsMutex.RUnlock()
	fake.watchMutex.RLock()
	defer fake.watchMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakeInstanceWatcherServiceInterface) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}
