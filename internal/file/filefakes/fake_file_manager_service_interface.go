// Code generated by counterfeiter. DO NOT EDIT.
package filefakes

import (
	"context"
	"sync"

	v1 "github.com/nginx/agent/v3/api/grpc/mpi/v1"
	"github.com/nginx/agent/v3/internal/model"
)

type FakeFileManagerServiceInterface struct {
	ClearCacheStub        func()
	clearCacheMutex       sync.RWMutex
	clearCacheArgsForCall []struct {
	}
	ConfigApplyStub        func(context.Context, *v1.ConfigApplyRequest) (model.WriteStatus, error)
	configApplyMutex       sync.RWMutex
	configApplyArgsForCall []struct {
		arg1 context.Context
		arg2 *v1.ConfigApplyRequest
	}
	configApplyReturns struct {
		result1 model.WriteStatus
		result2 error
	}
	configApplyReturnsOnCall map[int]struct {
		result1 model.WriteStatus
		result2 error
	}
	ConfigUpdateStub        func(context.Context, *model.NginxConfigContext)
	configUpdateMutex       sync.RWMutex
	configUpdateArgsForCall []struct {
		arg1 context.Context
		arg2 *model.NginxConfigContext
	}
	ConfigUploadStub        func(context.Context, *v1.ConfigUploadRequest) error
	configUploadMutex       sync.RWMutex
	configUploadArgsForCall []struct {
		arg1 context.Context
		arg2 *v1.ConfigUploadRequest
	}
	configUploadReturns struct {
		result1 error
	}
	configUploadReturnsOnCall map[int]struct {
		result1 error
	}
	DetermineFileActionsStub        func(context.Context, map[string]*v1.File, map[string]*model.FileCache) (map[string]*model.FileCache, map[string][]byte, error)
	determineFileActionsMutex       sync.RWMutex
	determineFileActionsArgsForCall []struct {
		arg1 context.Context
		arg2 map[string]*v1.File
		arg3 map[string]*model.FileCache
	}
	determineFileActionsReturns struct {
		result1 map[string]*model.FileCache
		result2 map[string][]byte
		result3 error
	}
	determineFileActionsReturnsOnCall map[int]struct {
		result1 map[string]*model.FileCache
		result2 map[string][]byte
		result3 error
	}
	IsConnectedStub        func() bool
	isConnectedMutex       sync.RWMutex
	isConnectedArgsForCall []struct {
	}
	isConnectedReturns struct {
		result1 bool
	}
	isConnectedReturnsOnCall map[int]struct {
		result1 bool
	}
	RollbackStub        func(context.Context, string) error
	rollbackMutex       sync.RWMutex
	rollbackArgsForCall []struct {
		arg1 context.Context
		arg2 string
	}
	rollbackReturns struct {
		result1 error
	}
	rollbackReturnsOnCall map[int]struct {
		result1 error
	}
	SetIsConnectedStub        func(bool)
	setIsConnectedMutex       sync.RWMutex
	setIsConnectedArgsForCall []struct {
		arg1 bool
	}
	UpdateCurrentFilesOnDiskStub        func(context.Context, map[string]*v1.File, bool) error
	updateCurrentFilesOnDiskMutex       sync.RWMutex
	updateCurrentFilesOnDiskArgsForCall []struct {
		arg1 context.Context
		arg2 map[string]*v1.File
		arg3 bool
	}
	updateCurrentFilesOnDiskReturns struct {
		result1 error
	}
	updateCurrentFilesOnDiskReturnsOnCall map[int]struct {
		result1 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeFileManagerServiceInterface) ClearCache() {
	fake.clearCacheMutex.Lock()
	fake.clearCacheArgsForCall = append(fake.clearCacheArgsForCall, struct {
	}{})
	stub := fake.ClearCacheStub
	fake.recordInvocation("ClearCache", []interface{}{})
	fake.clearCacheMutex.Unlock()
	if stub != nil {
		fake.ClearCacheStub()
	}
}

func (fake *FakeFileManagerServiceInterface) ClearCacheCallCount() int {
	fake.clearCacheMutex.RLock()
	defer fake.clearCacheMutex.RUnlock()
	return len(fake.clearCacheArgsForCall)
}

func (fake *FakeFileManagerServiceInterface) ClearCacheCalls(stub func()) {
	fake.clearCacheMutex.Lock()
	defer fake.clearCacheMutex.Unlock()
	fake.ClearCacheStub = stub
}

func (fake *FakeFileManagerServiceInterface) ConfigApply(arg1 context.Context, arg2 *v1.ConfigApplyRequest) (model.WriteStatus, error) {
	fake.configApplyMutex.Lock()
	ret, specificReturn := fake.configApplyReturnsOnCall[len(fake.configApplyArgsForCall)]
	fake.configApplyArgsForCall = append(fake.configApplyArgsForCall, struct {
		arg1 context.Context
		arg2 *v1.ConfigApplyRequest
	}{arg1, arg2})
	stub := fake.ConfigApplyStub
	fakeReturns := fake.configApplyReturns
	fake.recordInvocation("ConfigApply", []interface{}{arg1, arg2})
	fake.configApplyMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeFileManagerServiceInterface) ConfigApplyCallCount() int {
	fake.configApplyMutex.RLock()
	defer fake.configApplyMutex.RUnlock()
	return len(fake.configApplyArgsForCall)
}

func (fake *FakeFileManagerServiceInterface) ConfigApplyCalls(stub func(context.Context, *v1.ConfigApplyRequest) (model.WriteStatus, error)) {
	fake.configApplyMutex.Lock()
	defer fake.configApplyMutex.Unlock()
	fake.ConfigApplyStub = stub
}

func (fake *FakeFileManagerServiceInterface) ConfigApplyArgsForCall(i int) (context.Context, *v1.ConfigApplyRequest) {
	fake.configApplyMutex.RLock()
	defer fake.configApplyMutex.RUnlock()
	argsForCall := fake.configApplyArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2
}

func (fake *FakeFileManagerServiceInterface) ConfigApplyReturns(result1 model.WriteStatus, result2 error) {
	fake.configApplyMutex.Lock()
	defer fake.configApplyMutex.Unlock()
	fake.ConfigApplyStub = nil
	fake.configApplyReturns = struct {
		result1 model.WriteStatus
		result2 error
	}{result1, result2}
}

func (fake *FakeFileManagerServiceInterface) ConfigApplyReturnsOnCall(i int, result1 model.WriteStatus, result2 error) {
	fake.configApplyMutex.Lock()
	defer fake.configApplyMutex.Unlock()
	fake.ConfigApplyStub = nil
	if fake.configApplyReturnsOnCall == nil {
		fake.configApplyReturnsOnCall = make(map[int]struct {
			result1 model.WriteStatus
			result2 error
		})
	}
	fake.configApplyReturnsOnCall[i] = struct {
		result1 model.WriteStatus
		result2 error
	}{result1, result2}
}

func (fake *FakeFileManagerServiceInterface) ConfigUpdate(arg1 context.Context, arg2 *model.NginxConfigContext) {
	fake.configUpdateMutex.Lock()
	fake.configUpdateArgsForCall = append(fake.configUpdateArgsForCall, struct {
		arg1 context.Context
		arg2 *model.NginxConfigContext
	}{arg1, arg2})
	stub := fake.ConfigUpdateStub
	fake.recordInvocation("ConfigUpdate", []interface{}{arg1, arg2})
	fake.configUpdateMutex.Unlock()
	if stub != nil {
		fake.ConfigUpdateStub(arg1, arg2)
	}
}

func (fake *FakeFileManagerServiceInterface) ConfigUpdateCallCount() int {
	fake.configUpdateMutex.RLock()
	defer fake.configUpdateMutex.RUnlock()
	return len(fake.configUpdateArgsForCall)
}

func (fake *FakeFileManagerServiceInterface) ConfigUpdateCalls(stub func(context.Context, *model.NginxConfigContext)) {
	fake.configUpdateMutex.Lock()
	defer fake.configUpdateMutex.Unlock()
	fake.ConfigUpdateStub = stub
}

func (fake *FakeFileManagerServiceInterface) ConfigUpdateArgsForCall(i int) (context.Context, *model.NginxConfigContext) {
	fake.configUpdateMutex.RLock()
	defer fake.configUpdateMutex.RUnlock()
	argsForCall := fake.configUpdateArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2
}

func (fake *FakeFileManagerServiceInterface) ConfigUpload(arg1 context.Context, arg2 *v1.ConfigUploadRequest) error {
	fake.configUploadMutex.Lock()
	ret, specificReturn := fake.configUploadReturnsOnCall[len(fake.configUploadArgsForCall)]
	fake.configUploadArgsForCall = append(fake.configUploadArgsForCall, struct {
		arg1 context.Context
		arg2 *v1.ConfigUploadRequest
	}{arg1, arg2})
	stub := fake.ConfigUploadStub
	fakeReturns := fake.configUploadReturns
	fake.recordInvocation("ConfigUpload", []interface{}{arg1, arg2})
	fake.configUploadMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeFileManagerServiceInterface) ConfigUploadCallCount() int {
	fake.configUploadMutex.RLock()
	defer fake.configUploadMutex.RUnlock()
	return len(fake.configUploadArgsForCall)
}

func (fake *FakeFileManagerServiceInterface) ConfigUploadCalls(stub func(context.Context, *v1.ConfigUploadRequest) error) {
	fake.configUploadMutex.Lock()
	defer fake.configUploadMutex.Unlock()
	fake.ConfigUploadStub = stub
}

func (fake *FakeFileManagerServiceInterface) ConfigUploadArgsForCall(i int) (context.Context, *v1.ConfigUploadRequest) {
	fake.configUploadMutex.RLock()
	defer fake.configUploadMutex.RUnlock()
	argsForCall := fake.configUploadArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2
}

func (fake *FakeFileManagerServiceInterface) ConfigUploadReturns(result1 error) {
	fake.configUploadMutex.Lock()
	defer fake.configUploadMutex.Unlock()
	fake.ConfigUploadStub = nil
	fake.configUploadReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeFileManagerServiceInterface) ConfigUploadReturnsOnCall(i int, result1 error) {
	fake.configUploadMutex.Lock()
	defer fake.configUploadMutex.Unlock()
	fake.ConfigUploadStub = nil
	if fake.configUploadReturnsOnCall == nil {
		fake.configUploadReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.configUploadReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeFileManagerServiceInterface) DetermineFileActions(arg1 context.Context, arg2 map[string]*v1.File, arg3 map[string]*model.FileCache) (map[string]*model.FileCache, map[string][]byte, error) {
	fake.determineFileActionsMutex.Lock()
	ret, specificReturn := fake.determineFileActionsReturnsOnCall[len(fake.determineFileActionsArgsForCall)]
	fake.determineFileActionsArgsForCall = append(fake.determineFileActionsArgsForCall, struct {
		arg1 context.Context
		arg2 map[string]*v1.File
		arg3 map[string]*model.FileCache
	}{arg1, arg2, arg3})
	stub := fake.DetermineFileActionsStub
	fakeReturns := fake.determineFileActionsReturns
	fake.recordInvocation("DetermineFileActions", []interface{}{arg1, arg2, arg3})
	fake.determineFileActionsMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3)
	}
	if specificReturn {
		return ret.result1, ret.result2, ret.result3
	}
	return fakeReturns.result1, fakeReturns.result2, fakeReturns.result3
}

func (fake *FakeFileManagerServiceInterface) DetermineFileActionsCallCount() int {
	fake.determineFileActionsMutex.RLock()
	defer fake.determineFileActionsMutex.RUnlock()
	return len(fake.determineFileActionsArgsForCall)
}

func (fake *FakeFileManagerServiceInterface) DetermineFileActionsCalls(stub func(context.Context, map[string]*v1.File, map[string]*model.FileCache) (map[string]*model.FileCache, map[string][]byte, error)) {
	fake.determineFileActionsMutex.Lock()
	defer fake.determineFileActionsMutex.Unlock()
	fake.DetermineFileActionsStub = stub
}

func (fake *FakeFileManagerServiceInterface) DetermineFileActionsArgsForCall(i int) (context.Context, map[string]*v1.File, map[string]*model.FileCache) {
	fake.determineFileActionsMutex.RLock()
	defer fake.determineFileActionsMutex.RUnlock()
	argsForCall := fake.determineFileActionsArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeFileManagerServiceInterface) DetermineFileActionsReturns(result1 map[string]*model.FileCache, result2 map[string][]byte, result3 error) {
	fake.determineFileActionsMutex.Lock()
	defer fake.determineFileActionsMutex.Unlock()
	fake.DetermineFileActionsStub = nil
	fake.determineFileActionsReturns = struct {
		result1 map[string]*model.FileCache
		result2 map[string][]byte
		result3 error
	}{result1, result2, result3}
}

func (fake *FakeFileManagerServiceInterface) DetermineFileActionsReturnsOnCall(i int, result1 map[string]*model.FileCache, result2 map[string][]byte, result3 error) {
	fake.determineFileActionsMutex.Lock()
	defer fake.determineFileActionsMutex.Unlock()
	fake.DetermineFileActionsStub = nil
	if fake.determineFileActionsReturnsOnCall == nil {
		fake.determineFileActionsReturnsOnCall = make(map[int]struct {
			result1 map[string]*model.FileCache
			result2 map[string][]byte
			result3 error
		})
	}
	fake.determineFileActionsReturnsOnCall[i] = struct {
		result1 map[string]*model.FileCache
		result2 map[string][]byte
		result3 error
	}{result1, result2, result3}
}

func (fake *FakeFileManagerServiceInterface) IsConnected() bool {
	fake.isConnectedMutex.Lock()
	ret, specificReturn := fake.isConnectedReturnsOnCall[len(fake.isConnectedArgsForCall)]
	fake.isConnectedArgsForCall = append(fake.isConnectedArgsForCall, struct {
	}{})
	stub := fake.IsConnectedStub
	fakeReturns := fake.isConnectedReturns
	fake.recordInvocation("IsConnected", []interface{}{})
	fake.isConnectedMutex.Unlock()
	if stub != nil {
		return stub()
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeFileManagerServiceInterface) IsConnectedCallCount() int {
	fake.isConnectedMutex.RLock()
	defer fake.isConnectedMutex.RUnlock()
	return len(fake.isConnectedArgsForCall)
}

func (fake *FakeFileManagerServiceInterface) IsConnectedCalls(stub func() bool) {
	fake.isConnectedMutex.Lock()
	defer fake.isConnectedMutex.Unlock()
	fake.IsConnectedStub = stub
}

func (fake *FakeFileManagerServiceInterface) IsConnectedReturns(result1 bool) {
	fake.isConnectedMutex.Lock()
	defer fake.isConnectedMutex.Unlock()
	fake.IsConnectedStub = nil
	fake.isConnectedReturns = struct {
		result1 bool
	}{result1}
}

func (fake *FakeFileManagerServiceInterface) IsConnectedReturnsOnCall(i int, result1 bool) {
	fake.isConnectedMutex.Lock()
	defer fake.isConnectedMutex.Unlock()
	fake.IsConnectedStub = nil
	if fake.isConnectedReturnsOnCall == nil {
		fake.isConnectedReturnsOnCall = make(map[int]struct {
			result1 bool
		})
	}
	fake.isConnectedReturnsOnCall[i] = struct {
		result1 bool
	}{result1}
}

func (fake *FakeFileManagerServiceInterface) Rollback(arg1 context.Context, arg2 string) error {
	fake.rollbackMutex.Lock()
	ret, specificReturn := fake.rollbackReturnsOnCall[len(fake.rollbackArgsForCall)]
	fake.rollbackArgsForCall = append(fake.rollbackArgsForCall, struct {
		arg1 context.Context
		arg2 string
	}{arg1, arg2})
	stub := fake.RollbackStub
	fakeReturns := fake.rollbackReturns
	fake.recordInvocation("Rollback", []interface{}{arg1, arg2})
	fake.rollbackMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeFileManagerServiceInterface) RollbackCallCount() int {
	fake.rollbackMutex.RLock()
	defer fake.rollbackMutex.RUnlock()
	return len(fake.rollbackArgsForCall)
}

func (fake *FakeFileManagerServiceInterface) RollbackCalls(stub func(context.Context, string) error) {
	fake.rollbackMutex.Lock()
	defer fake.rollbackMutex.Unlock()
	fake.RollbackStub = stub
}

func (fake *FakeFileManagerServiceInterface) RollbackArgsForCall(i int) (context.Context, string) {
	fake.rollbackMutex.RLock()
	defer fake.rollbackMutex.RUnlock()
	argsForCall := fake.rollbackArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2
}

func (fake *FakeFileManagerServiceInterface) RollbackReturns(result1 error) {
	fake.rollbackMutex.Lock()
	defer fake.rollbackMutex.Unlock()
	fake.RollbackStub = nil
	fake.rollbackReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeFileManagerServiceInterface) RollbackReturnsOnCall(i int, result1 error) {
	fake.rollbackMutex.Lock()
	defer fake.rollbackMutex.Unlock()
	fake.RollbackStub = nil
	if fake.rollbackReturnsOnCall == nil {
		fake.rollbackReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.rollbackReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeFileManagerServiceInterface) SetIsConnected(arg1 bool) {
	fake.setIsConnectedMutex.Lock()
	fake.setIsConnectedArgsForCall = append(fake.setIsConnectedArgsForCall, struct {
		arg1 bool
	}{arg1})
	stub := fake.SetIsConnectedStub
	fake.recordInvocation("SetIsConnected", []interface{}{arg1})
	fake.setIsConnectedMutex.Unlock()
	if stub != nil {
		fake.SetIsConnectedStub(arg1)
	}
}

func (fake *FakeFileManagerServiceInterface) SetIsConnectedCallCount() int {
	fake.setIsConnectedMutex.RLock()
	defer fake.setIsConnectedMutex.RUnlock()
	return len(fake.setIsConnectedArgsForCall)
}

func (fake *FakeFileManagerServiceInterface) SetIsConnectedCalls(stub func(bool)) {
	fake.setIsConnectedMutex.Lock()
	defer fake.setIsConnectedMutex.Unlock()
	fake.SetIsConnectedStub = stub
}

func (fake *FakeFileManagerServiceInterface) SetIsConnectedArgsForCall(i int) bool {
	fake.setIsConnectedMutex.RLock()
	defer fake.setIsConnectedMutex.RUnlock()
	argsForCall := fake.setIsConnectedArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeFileManagerServiceInterface) UpdateCurrentFilesOnDisk(arg1 context.Context, arg2 map[string]*v1.File, arg3 bool) error {
	fake.updateCurrentFilesOnDiskMutex.Lock()
	ret, specificReturn := fake.updateCurrentFilesOnDiskReturnsOnCall[len(fake.updateCurrentFilesOnDiskArgsForCall)]
	fake.updateCurrentFilesOnDiskArgsForCall = append(fake.updateCurrentFilesOnDiskArgsForCall, struct {
		arg1 context.Context
		arg2 map[string]*v1.File
		arg3 bool
	}{arg1, arg2, arg3})
	stub := fake.UpdateCurrentFilesOnDiskStub
	fakeReturns := fake.updateCurrentFilesOnDiskReturns
	fake.recordInvocation("UpdateCurrentFilesOnDisk", []interface{}{arg1, arg2, arg3})
	fake.updateCurrentFilesOnDiskMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeFileManagerServiceInterface) UpdateCurrentFilesOnDiskCallCount() int {
	fake.updateCurrentFilesOnDiskMutex.RLock()
	defer fake.updateCurrentFilesOnDiskMutex.RUnlock()
	return len(fake.updateCurrentFilesOnDiskArgsForCall)
}

func (fake *FakeFileManagerServiceInterface) UpdateCurrentFilesOnDiskCalls(stub func(context.Context, map[string]*v1.File, bool) error) {
	fake.updateCurrentFilesOnDiskMutex.Lock()
	defer fake.updateCurrentFilesOnDiskMutex.Unlock()
	fake.UpdateCurrentFilesOnDiskStub = stub
}

func (fake *FakeFileManagerServiceInterface) UpdateCurrentFilesOnDiskArgsForCall(i int) (context.Context, map[string]*v1.File, bool) {
	fake.updateCurrentFilesOnDiskMutex.RLock()
	defer fake.updateCurrentFilesOnDiskMutex.RUnlock()
	argsForCall := fake.updateCurrentFilesOnDiskArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeFileManagerServiceInterface) UpdateCurrentFilesOnDiskReturns(result1 error) {
	fake.updateCurrentFilesOnDiskMutex.Lock()
	defer fake.updateCurrentFilesOnDiskMutex.Unlock()
	fake.UpdateCurrentFilesOnDiskStub = nil
	fake.updateCurrentFilesOnDiskReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeFileManagerServiceInterface) UpdateCurrentFilesOnDiskReturnsOnCall(i int, result1 error) {
	fake.updateCurrentFilesOnDiskMutex.Lock()
	defer fake.updateCurrentFilesOnDiskMutex.Unlock()
	fake.UpdateCurrentFilesOnDiskStub = nil
	if fake.updateCurrentFilesOnDiskReturnsOnCall == nil {
		fake.updateCurrentFilesOnDiskReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.updateCurrentFilesOnDiskReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeFileManagerServiceInterface) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.clearCacheMutex.RLock()
	defer fake.clearCacheMutex.RUnlock()
	fake.configApplyMutex.RLock()
	defer fake.configApplyMutex.RUnlock()
	fake.configUpdateMutex.RLock()
	defer fake.configUpdateMutex.RUnlock()
	fake.configUploadMutex.RLock()
	defer fake.configUploadMutex.RUnlock()
	fake.determineFileActionsMutex.RLock()
	defer fake.determineFileActionsMutex.RUnlock()
	fake.isConnectedMutex.RLock()
	defer fake.isConnectedMutex.RUnlock()
	fake.rollbackMutex.RLock()
	defer fake.rollbackMutex.RUnlock()
	fake.setIsConnectedMutex.RLock()
	defer fake.setIsConnectedMutex.RUnlock()
	fake.updateCurrentFilesOnDiskMutex.RLock()
	defer fake.updateCurrentFilesOnDiskMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakeFileManagerServiceInterface) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}
