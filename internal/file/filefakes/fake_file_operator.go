// Code generated by counterfeiter. DO NOT EDIT.
package filefakes

import (
	"bufio"
	"context"
	"io/fs"
	"sync"

	v1 "github.com/nginx/agent/v3/api/grpc/mpi/v1"
	"github.com/nginx/agent/v3/internal/model"
	"google.golang.org/grpc"
)

type FakeFileOperator struct {
	CreateFileDirectoriesStub        func(context.Context, *v1.FileMeta, fs.FileMode) error
	createFileDirectoriesMutex       sync.RWMutex
	createFileDirectoriesArgsForCall []struct {
		arg1 context.Context
		arg2 *v1.FileMeta
		arg3 fs.FileMode
	}
	createFileDirectoriesReturns struct {
		result1 error
	}
	createFileDirectoriesReturnsOnCall map[int]struct {
		result1 error
	}
	ReadChunkStub        func(context.Context, uint32, *bufio.Reader, uint32) (v1.FileDataChunk_Content, error)
	readChunkMutex       sync.RWMutex
	readChunkArgsForCall []struct {
		arg1 context.Context
		arg2 uint32
		arg3 *bufio.Reader
		arg4 uint32
	}
	readChunkReturns struct {
		result1 v1.FileDataChunk_Content
		result2 error
	}
	readChunkReturnsOnCall map[int]struct {
		result1 v1.FileDataChunk_Content
		result2 error
	}
	WriteStub        func(context.Context, []byte, *v1.FileMeta) error
	writeMutex       sync.RWMutex
	writeArgsForCall []struct {
		arg1 context.Context
		arg2 []byte
		arg3 *v1.FileMeta
	}
	writeReturns struct {
		result1 error
	}
	writeReturnsOnCall map[int]struct {
		result1 error
	}
	WriteChunkedFileStub        func(context.Context, *v1.File, *v1.FileDataChunkHeader, grpc.ServerStreamingClient[v1.FileDataChunk]) error
	writeChunkedFileMutex       sync.RWMutex
	writeChunkedFileArgsForCall []struct {
		arg1 context.Context
		arg2 *v1.File
		arg3 *v1.FileDataChunkHeader
		arg4 grpc.ServerStreamingClient[v1.FileDataChunk]
	}
	writeChunkedFileReturns struct {
		result1 error
	}
	writeChunkedFileReturnsOnCall map[int]struct {
		result1 error
	}
	WriteManifestFileStub        func(map[string]*model.ManifestFile, string, string) error
	writeManifestFileMutex       sync.RWMutex
	writeManifestFileArgsForCall []struct {
		arg1 map[string]*model.ManifestFile
		arg2 string
		arg3 string
	}
	writeManifestFileReturns struct {
		result1 error
	}
	writeManifestFileReturnsOnCall map[int]struct {
		result1 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeFileOperator) CreateFileDirectories(arg1 context.Context, arg2 *v1.FileMeta, arg3 fs.FileMode) error {
	fake.createFileDirectoriesMutex.Lock()
	ret, specificReturn := fake.createFileDirectoriesReturnsOnCall[len(fake.createFileDirectoriesArgsForCall)]
	fake.createFileDirectoriesArgsForCall = append(fake.createFileDirectoriesArgsForCall, struct {
		arg1 context.Context
		arg2 *v1.FileMeta
		arg3 fs.FileMode
	}{arg1, arg2, arg3})
	stub := fake.CreateFileDirectoriesStub
	fakeReturns := fake.createFileDirectoriesReturns
	fake.recordInvocation("CreateFileDirectories", []interface{}{arg1, arg2, arg3})
	fake.createFileDirectoriesMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeFileOperator) CreateFileDirectoriesCallCount() int {
	fake.createFileDirectoriesMutex.RLock()
	defer fake.createFileDirectoriesMutex.RUnlock()
	return len(fake.createFileDirectoriesArgsForCall)
}

func (fake *FakeFileOperator) CreateFileDirectoriesCalls(stub func(context.Context, *v1.FileMeta, fs.FileMode) error) {
	fake.createFileDirectoriesMutex.Lock()
	defer fake.createFileDirectoriesMutex.Unlock()
	fake.CreateFileDirectoriesStub = stub
}

func (fake *FakeFileOperator) CreateFileDirectoriesArgsForCall(i int) (context.Context, *v1.FileMeta, fs.FileMode) {
	fake.createFileDirectoriesMutex.RLock()
	defer fake.createFileDirectoriesMutex.RUnlock()
	argsForCall := fake.createFileDirectoriesArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeFileOperator) CreateFileDirectoriesReturns(result1 error) {
	fake.createFileDirectoriesMutex.Lock()
	defer fake.createFileDirectoriesMutex.Unlock()
	fake.CreateFileDirectoriesStub = nil
	fake.createFileDirectoriesReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeFileOperator) CreateFileDirectoriesReturnsOnCall(i int, result1 error) {
	fake.createFileDirectoriesMutex.Lock()
	defer fake.createFileDirectoriesMutex.Unlock()
	fake.CreateFileDirectoriesStub = nil
	if fake.createFileDirectoriesReturnsOnCall == nil {
		fake.createFileDirectoriesReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.createFileDirectoriesReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeFileOperator) ReadChunk(arg1 context.Context, arg2 uint32, arg3 *bufio.Reader, arg4 uint32) (v1.FileDataChunk_Content, error) {
	fake.readChunkMutex.Lock()
	ret, specificReturn := fake.readChunkReturnsOnCall[len(fake.readChunkArgsForCall)]
	fake.readChunkArgsForCall = append(fake.readChunkArgsForCall, struct {
		arg1 context.Context
		arg2 uint32
		arg3 *bufio.Reader
		arg4 uint32
	}{arg1, arg2, arg3, arg4})
	stub := fake.ReadChunkStub
	fakeReturns := fake.readChunkReturns
	fake.recordInvocation("ReadChunk", []interface{}{arg1, arg2, arg3, arg4})
	fake.readChunkMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3, arg4)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeFileOperator) ReadChunkCallCount() int {
	fake.readChunkMutex.RLock()
	defer fake.readChunkMutex.RUnlock()
	return len(fake.readChunkArgsForCall)
}

func (fake *FakeFileOperator) ReadChunkCalls(stub func(context.Context, uint32, *bufio.Reader, uint32) (v1.FileDataChunk_Content, error)) {
	fake.readChunkMutex.Lock()
	defer fake.readChunkMutex.Unlock()
	fake.ReadChunkStub = stub
}

func (fake *FakeFileOperator) ReadChunkArgsForCall(i int) (context.Context, uint32, *bufio.Reader, uint32) {
	fake.readChunkMutex.RLock()
	defer fake.readChunkMutex.RUnlock()
	argsForCall := fake.readChunkArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3, argsForCall.arg4
}

func (fake *FakeFileOperator) ReadChunkReturns(result1 v1.FileDataChunk_Content, result2 error) {
	fake.readChunkMutex.Lock()
	defer fake.readChunkMutex.Unlock()
	fake.ReadChunkStub = nil
	fake.readChunkReturns = struct {
		result1 v1.FileDataChunk_Content
		result2 error
	}{result1, result2}
}

func (fake *FakeFileOperator) ReadChunkReturnsOnCall(i int, result1 v1.FileDataChunk_Content, result2 error) {
	fake.readChunkMutex.Lock()
	defer fake.readChunkMutex.Unlock()
	fake.ReadChunkStub = nil
	if fake.readChunkReturnsOnCall == nil {
		fake.readChunkReturnsOnCall = make(map[int]struct {
			result1 v1.FileDataChunk_Content
			result2 error
		})
	}
	fake.readChunkReturnsOnCall[i] = struct {
		result1 v1.FileDataChunk_Content
		result2 error
	}{result1, result2}
}

func (fake *FakeFileOperator) Write(arg1 context.Context, arg2 []byte, arg3 *v1.FileMeta) error {
	var arg2Copy []byte
	if arg2 != nil {
		arg2Copy = make([]byte, len(arg2))
		copy(arg2Copy, arg2)
	}
	fake.writeMutex.Lock()
	ret, specificReturn := fake.writeReturnsOnCall[len(fake.writeArgsForCall)]
	fake.writeArgsForCall = append(fake.writeArgsForCall, struct {
		arg1 context.Context
		arg2 []byte
		arg3 *v1.FileMeta
	}{arg1, arg2Copy, arg3})
	stub := fake.WriteStub
	fakeReturns := fake.writeReturns
	fake.recordInvocation("Write", []interface{}{arg1, arg2Copy, arg3})
	fake.writeMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeFileOperator) WriteCallCount() int {
	fake.writeMutex.RLock()
	defer fake.writeMutex.RUnlock()
	return len(fake.writeArgsForCall)
}

func (fake *FakeFileOperator) WriteCalls(stub func(context.Context, []byte, *v1.FileMeta) error) {
	fake.writeMutex.Lock()
	defer fake.writeMutex.Unlock()
	fake.WriteStub = stub
}

func (fake *FakeFileOperator) WriteArgsForCall(i int) (context.Context, []byte, *v1.FileMeta) {
	fake.writeMutex.RLock()
	defer fake.writeMutex.RUnlock()
	argsForCall := fake.writeArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeFileOperator) WriteReturns(result1 error) {
	fake.writeMutex.Lock()
	defer fake.writeMutex.Unlock()
	fake.WriteStub = nil
	fake.writeReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeFileOperator) WriteReturnsOnCall(i int, result1 error) {
	fake.writeMutex.Lock()
	defer fake.writeMutex.Unlock()
	fake.WriteStub = nil
	if fake.writeReturnsOnCall == nil {
		fake.writeReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.writeReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeFileOperator) WriteChunkedFile(arg1 context.Context, arg2 *v1.File, arg3 *v1.FileDataChunkHeader, arg4 grpc.ServerStreamingClient[v1.FileDataChunk]) error {
	fake.writeChunkedFileMutex.Lock()
	ret, specificReturn := fake.writeChunkedFileReturnsOnCall[len(fake.writeChunkedFileArgsForCall)]
	fake.writeChunkedFileArgsForCall = append(fake.writeChunkedFileArgsForCall, struct {
		arg1 context.Context
		arg2 *v1.File
		arg3 *v1.FileDataChunkHeader
		arg4 grpc.ServerStreamingClient[v1.FileDataChunk]
	}{arg1, arg2, arg3, arg4})
	stub := fake.WriteChunkedFileStub
	fakeReturns := fake.writeChunkedFileReturns
	fake.recordInvocation("WriteChunkedFile", []interface{}{arg1, arg2, arg3, arg4})
	fake.writeChunkedFileMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3, arg4)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeFileOperator) WriteChunkedFileCallCount() int {
	fake.writeChunkedFileMutex.RLock()
	defer fake.writeChunkedFileMutex.RUnlock()
	return len(fake.writeChunkedFileArgsForCall)
}

func (fake *FakeFileOperator) WriteChunkedFileCalls(stub func(context.Context, *v1.File, *v1.FileDataChunkHeader, grpc.ServerStreamingClient[v1.FileDataChunk]) error) {
	fake.writeChunkedFileMutex.Lock()
	defer fake.writeChunkedFileMutex.Unlock()
	fake.WriteChunkedFileStub = stub
}

func (fake *FakeFileOperator) WriteChunkedFileArgsForCall(i int) (context.Context, *v1.File, *v1.FileDataChunkHeader, grpc.ServerStreamingClient[v1.FileDataChunk]) {
	fake.writeChunkedFileMutex.RLock()
	defer fake.writeChunkedFileMutex.RUnlock()
	argsForCall := fake.writeChunkedFileArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3, argsForCall.arg4
}

func (fake *FakeFileOperator) WriteChunkedFileReturns(result1 error) {
	fake.writeChunkedFileMutex.Lock()
	defer fake.writeChunkedFileMutex.Unlock()
	fake.WriteChunkedFileStub = nil
	fake.writeChunkedFileReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeFileOperator) WriteChunkedFileReturnsOnCall(i int, result1 error) {
	fake.writeChunkedFileMutex.Lock()
	defer fake.writeChunkedFileMutex.Unlock()
	fake.WriteChunkedFileStub = nil
	if fake.writeChunkedFileReturnsOnCall == nil {
		fake.writeChunkedFileReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.writeChunkedFileReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeFileOperator) WriteManifestFile(arg1 map[string]*model.ManifestFile, arg2 string, arg3 string) error {
	fake.writeManifestFileMutex.Lock()
	ret, specificReturn := fake.writeManifestFileReturnsOnCall[len(fake.writeManifestFileArgsForCall)]
	fake.writeManifestFileArgsForCall = append(fake.writeManifestFileArgsForCall, struct {
		arg1 map[string]*model.ManifestFile
		arg2 string
		arg3 string
	}{arg1, arg2, arg3})
	stub := fake.WriteManifestFileStub
	fakeReturns := fake.writeManifestFileReturns
	fake.recordInvocation("WriteManifestFile", []interface{}{arg1, arg2, arg3})
	fake.writeManifestFileMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeFileOperator) WriteManifestFileCallCount() int {
	fake.writeManifestFileMutex.RLock()
	defer fake.writeManifestFileMutex.RUnlock()
	return len(fake.writeManifestFileArgsForCall)
}

func (fake *FakeFileOperator) WriteManifestFileCalls(stub func(map[string]*model.ManifestFile, string, string) error) {
	fake.writeManifestFileMutex.Lock()
	defer fake.writeManifestFileMutex.Unlock()
	fake.WriteManifestFileStub = stub
}

func (fake *FakeFileOperator) WriteManifestFileArgsForCall(i int) (map[string]*model.ManifestFile, string, string) {
	fake.writeManifestFileMutex.RLock()
	defer fake.writeManifestFileMutex.RUnlock()
	argsForCall := fake.writeManifestFileArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeFileOperator) WriteManifestFileReturns(result1 error) {
	fake.writeManifestFileMutex.Lock()
	defer fake.writeManifestFileMutex.Unlock()
	fake.WriteManifestFileStub = nil
	fake.writeManifestFileReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeFileOperator) WriteManifestFileReturnsOnCall(i int, result1 error) {
	fake.writeManifestFileMutex.Lock()
	defer fake.writeManifestFileMutex.Unlock()
	fake.WriteManifestFileStub = nil
	if fake.writeManifestFileReturnsOnCall == nil {
		fake.writeManifestFileReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.writeManifestFileReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeFileOperator) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.createFileDirectoriesMutex.RLock()
	defer fake.createFileDirectoriesMutex.RUnlock()
	fake.readChunkMutex.RLock()
	defer fake.readChunkMutex.RUnlock()
	fake.writeMutex.RLock()
	defer fake.writeMutex.RUnlock()
	fake.writeChunkedFileMutex.RLock()
	defer fake.writeChunkedFileMutex.RUnlock()
	fake.writeManifestFileMutex.RLock()
	defer fake.writeManifestFileMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakeFileOperator) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}
