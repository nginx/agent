// Code generated by MockGen. DO NOT EDIT.
// Source: file_manager_service.go
//
// Generated by this command:
//
//	mockgen -source=file_manager_service.go -destination=mock_file_operator_test.go -package=file_test fileOperator
//

// Package file_test is a generated GoMock package.
package file

import (
	bufio "bufio"
	context "context"
	os "os"
	reflect "reflect"

	v1 "github.com/nginx/agent/v3/api/grpc/mpi/v1"
	model "github.com/nginx/agent/v3/internal/model"
	gomock "go.uber.org/mock/gomock"
	grpc "google.golang.org/grpc"
)

// MockfileOperator is a mock of fileOperator interface.
type MockfileOperator struct {
	ctrl     *gomock.Controller
	recorder *MockfileOperatorMockRecorder
	isgomock struct{}
}

// MockfileOperatorMockRecorder is the mock recorder for MockfileOperator.
type MockfileOperatorMockRecorder struct {
	mock *MockfileOperator
}

// NewMockfileOperator creates a new mock instance.
func NewMockfileOperator(ctrl *gomock.Controller) *MockfileOperator {
	mock := &MockfileOperator{ctrl: ctrl}
	mock.recorder = &MockfileOperatorMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockfileOperator) EXPECT() *MockfileOperatorMockRecorder {
	return m.recorder
}

// CreateFileDirectories mocks base method.
func (m *MockfileOperator) CreateFileDirectories(ctx context.Context, fileMeta *v1.FileMeta, filePermission os.FileMode) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateFileDirectories", ctx, fileMeta, filePermission)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateFileDirectories indicates an expected call of CreateFileDirectories.
func (mr *MockfileOperatorMockRecorder) CreateFileDirectories(ctx, fileMeta, filePermission any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateFileDirectories", reflect.TypeOf((*MockfileOperator)(nil).CreateFileDirectories), ctx, fileMeta, filePermission)
}

// ReadChunk mocks base method.
func (m *MockfileOperator) ReadChunk(ctx context.Context, chunkSize uint32, reader *bufio.Reader, chunkID uint32) (v1.FileDataChunk_Content, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReadChunk", ctx, chunkSize, reader, chunkID)
	ret0, _ := ret[0].(v1.FileDataChunk_Content)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ReadChunk indicates an expected call of ReadChunk.
func (mr *MockfileOperatorMockRecorder) ReadChunk(ctx, chunkSize, reader, chunkID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReadChunk", reflect.TypeOf((*MockfileOperator)(nil).ReadChunk), ctx, chunkSize, reader, chunkID)
}

// Write mocks base method.
func (m *MockfileOperator) Write(ctx context.Context, fileContent []byte, file *v1.FileMeta) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Write", ctx, fileContent, file)
	ret0, _ := ret[0].(error)
	return ret0
}

// Write indicates an expected call of Write.
func (mr *MockfileOperatorMockRecorder) Write(ctx, fileContent, file any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Write", reflect.TypeOf((*MockfileOperator)(nil).Write), ctx, fileContent, file)
}

// WriteChunkedFile mocks base method.
func (m *MockfileOperator) WriteChunkedFile(ctx context.Context, file *v1.File, header *v1.FileDataChunkHeader, stream grpc.ServerStreamingClient[v1.FileDataChunk]) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WriteChunkedFile", ctx, file, header, stream)
	ret0, _ := ret[0].(error)
	return ret0
}

// WriteChunkedFile indicates an expected call of WriteChunkedFile.
func (mr *MockfileOperatorMockRecorder) WriteChunkedFile(ctx, file, header, stream any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WriteChunkedFile", reflect.TypeOf((*MockfileOperator)(nil).WriteChunkedFile), ctx, file, header, stream)
}

// WriteManifestFile mocks base method.
func (m *MockfileOperator) WriteManifestFile(updatedFiles map[string]*model.ManifestFile, manifestDir, manifestPath string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WriteManifestFile", updatedFiles, manifestDir, manifestPath)
	ret0, _ := ret[0].(error)
	return ret0
}

// WriteManifestFile indicates an expected call of WriteManifestFile.
func (mr *MockfileOperatorMockRecorder) WriteManifestFile(updatedFiles, manifestDir, manifestPath any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WriteManifestFile", reflect.TypeOf((*MockfileOperator)(nil).WriteManifestFile), updatedFiles, manifestDir, manifestPath)
}

// runHelper mocks base method.
func (m *MockfileOperator) runHelper(ctx context.Context, helperPath, fileUrl string, maxBytes int64) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "runHelper", ctx, helperPath, fileUrl, maxBytes)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// runHelper indicates an expected call of runHelper.
func (mr *MockfileOperatorMockRecorder) runHelper(ctx, helperPath, fileUrl, maxBytes any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "runHelper", reflect.TypeOf((*MockfileOperator)(nil).runHelper), ctx, helperPath, fileUrl, maxBytes)
}

// MockfileServiceOperatorInterface is a mock of fileServiceOperatorInterface interface.
type MockfileServiceOperatorInterface struct {
	ctrl     *gomock.Controller
	recorder *MockfileServiceOperatorInterfaceMockRecorder
	isgomock struct{}
}

// MockfileServiceOperatorInterfaceMockRecorder is the mock recorder for MockfileServiceOperatorInterface.
type MockfileServiceOperatorInterfaceMockRecorder struct {
	mock *MockfileServiceOperatorInterface
}

// NewMockfileServiceOperatorInterface creates a new mock instance.
func NewMockfileServiceOperatorInterface(ctrl *gomock.Controller) *MockfileServiceOperatorInterface {
	mock := &MockfileServiceOperatorInterface{ctrl: ctrl}
	mock.recorder = &MockfileServiceOperatorInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockfileServiceOperatorInterface) EXPECT() *MockfileServiceOperatorInterfaceMockRecorder {
	return m.recorder
}

// ChunkedFile mocks base method.
func (m *MockfileServiceOperatorInterface) ChunkedFile(ctx context.Context, file *v1.File) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ChunkedFile", ctx, file)
	ret0, _ := ret[0].(error)
	return ret0
}

// ChunkedFile indicates an expected call of ChunkedFile.
func (mr *MockfileServiceOperatorInterfaceMockRecorder) ChunkedFile(ctx, file any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ChunkedFile", reflect.TypeOf((*MockfileServiceOperatorInterface)(nil).ChunkedFile), ctx, file)
}

// File mocks base method.
func (m *MockfileServiceOperatorInterface) File(ctx context.Context, file *v1.File, fileActions map[string]*model.FileCache) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "File", ctx, file, fileActions)
	ret0, _ := ret[0].(error)
	return ret0
}

// File indicates an expected call of File.
func (mr *MockfileServiceOperatorInterfaceMockRecorder) File(ctx, file, fileActions any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "File", reflect.TypeOf((*MockfileServiceOperatorInterface)(nil).File), ctx, file, fileActions)
}

// IsConnected mocks base method.
func (m *MockfileServiceOperatorInterface) IsConnected() bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsConnected")
	ret0, _ := ret[0].(bool)
	return ret0
}

// IsConnected indicates an expected call of IsConnected.
func (mr *MockfileServiceOperatorInterfaceMockRecorder) IsConnected() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsConnected", reflect.TypeOf((*MockfileServiceOperatorInterface)(nil).IsConnected))
}

// SetIsConnected mocks base method.
func (m *MockfileServiceOperatorInterface) SetIsConnected(isConnected bool) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetIsConnected", isConnected)
}

// SetIsConnected indicates an expected call of SetIsConnected.
func (mr *MockfileServiceOperatorInterfaceMockRecorder) SetIsConnected(isConnected any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetIsConnected", reflect.TypeOf((*MockfileServiceOperatorInterface)(nil).SetIsConnected), isConnected)
}

// UpdateFile mocks base method.
func (m *MockfileServiceOperatorInterface) UpdateFile(ctx context.Context, instanceID string, fileToUpdate *v1.File) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateFile", ctx, instanceID, fileToUpdate)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateFile indicates an expected call of UpdateFile.
func (mr *MockfileServiceOperatorInterfaceMockRecorder) UpdateFile(ctx, instanceID, fileToUpdate any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateFile", reflect.TypeOf((*MockfileServiceOperatorInterface)(nil).UpdateFile), ctx, instanceID, fileToUpdate)
}

// UpdateOverview mocks base method.
func (m *MockfileServiceOperatorInterface) UpdateOverview(ctx context.Context, instanceID string, filesToUpdate []*v1.File, configPath string, iteration int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateOverview", ctx, instanceID, filesToUpdate, configPath, iteration)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateOverview indicates an expected call of UpdateOverview.
func (mr *MockfileServiceOperatorInterfaceMockRecorder) UpdateOverview(ctx, instanceID, filesToUpdate, configPath, iteration any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateOverview", reflect.TypeOf((*MockfileServiceOperatorInterface)(nil).UpdateOverview), ctx, instanceID, filesToUpdate, configPath, iteration)
}

// MockfileManagerServiceInterface is a mock of fileManagerServiceInterface interface.
type MockfileManagerServiceInterface struct {
	ctrl     *gomock.Controller
	recorder *MockfileManagerServiceInterfaceMockRecorder
	isgomock struct{}
}

// MockfileManagerServiceInterfaceMockRecorder is the mock recorder for MockfileManagerServiceInterface.
type MockfileManagerServiceInterfaceMockRecorder struct {
	mock *MockfileManagerServiceInterface
}

// NewMockfileManagerServiceInterface creates a new mock instance.
func NewMockfileManagerServiceInterface(ctrl *gomock.Controller) *MockfileManagerServiceInterface {
	mock := &MockfileManagerServiceInterface{ctrl: ctrl}
	mock.recorder = &MockfileManagerServiceInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockfileManagerServiceInterface) EXPECT() *MockfileManagerServiceInterfaceMockRecorder {
	return m.recorder
}

// ClearCache mocks base method.
func (m *MockfileManagerServiceInterface) ClearCache() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "ClearCache")
}

// ClearCache indicates an expected call of ClearCache.
func (mr *MockfileManagerServiceInterfaceMockRecorder) ClearCache() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ClearCache", reflect.TypeOf((*MockfileManagerServiceInterface)(nil).ClearCache))
}

// ConfigApply mocks base method.
func (m *MockfileManagerServiceInterface) ConfigApply(ctx context.Context, configApplyRequest *v1.ConfigApplyRequest) (model.WriteStatus, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ConfigApply", ctx, configApplyRequest)
	ret0, _ := ret[0].(model.WriteStatus)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ConfigApply indicates an expected call of ConfigApply.
func (mr *MockfileManagerServiceInterfaceMockRecorder) ConfigApply(ctx, configApplyRequest any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ConfigApply", reflect.TypeOf((*MockfileManagerServiceInterface)(nil).ConfigApply), ctx, configApplyRequest)
}

// ConfigUpdate mocks base method.
func (m *MockfileManagerServiceInterface) ConfigUpdate(ctx context.Context, nginxConfigContext *model.NginxConfigContext) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "ConfigUpdate", ctx, nginxConfigContext)
}

// ConfigUpdate indicates an expected call of ConfigUpdate.
func (mr *MockfileManagerServiceInterfaceMockRecorder) ConfigUpdate(ctx, nginxConfigContext any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ConfigUpdate", reflect.TypeOf((*MockfileManagerServiceInterface)(nil).ConfigUpdate), ctx, nginxConfigContext)
}

// ConfigUpload mocks base method.
func (m *MockfileManagerServiceInterface) ConfigUpload(ctx context.Context, configUploadRequest *v1.ConfigUploadRequest) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ConfigUpload", ctx, configUploadRequest)
	ret0, _ := ret[0].(error)
	return ret0
}

// ConfigUpload indicates an expected call of ConfigUpload.
func (mr *MockfileManagerServiceInterfaceMockRecorder) ConfigUpload(ctx, configUploadRequest any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ConfigUpload", reflect.TypeOf((*MockfileManagerServiceInterface)(nil).ConfigUpload), ctx, configUploadRequest)
}

// DetermineFileActions mocks base method.
func (m *MockfileManagerServiceInterface) DetermineFileActions(ctx context.Context, currentFiles map[string]*v1.File, modifiedFiles map[string]*model.FileCache) (map[string]*model.FileCache, map[string][]byte, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DetermineFileActions", ctx, currentFiles, modifiedFiles)
	ret0, _ := ret[0].(map[string]*model.FileCache)
	ret1, _ := ret[1].(map[string][]byte)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// DetermineFileActions indicates an expected call of DetermineFileActions.
func (mr *MockfileManagerServiceInterfaceMockRecorder) DetermineFileActions(ctx, currentFiles, modifiedFiles any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DetermineFileActions", reflect.TypeOf((*MockfileManagerServiceInterface)(nil).DetermineFileActions), ctx, currentFiles, modifiedFiles)
}

// IsConnected mocks base method.
func (m *MockfileManagerServiceInterface) IsConnected() bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsConnected")
	ret0, _ := ret[0].(bool)
	return ret0
}

// IsConnected indicates an expected call of IsConnected.
func (mr *MockfileManagerServiceInterfaceMockRecorder) IsConnected() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsConnected", reflect.TypeOf((*MockfileManagerServiceInterface)(nil).IsConnected))
}

// Rollback mocks base method.
func (m *MockfileManagerServiceInterface) Rollback(ctx context.Context, instanceID string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Rollback", ctx, instanceID)
	ret0, _ := ret[0].(error)
	return ret0
}

// Rollback indicates an expected call of Rollback.
func (mr *MockfileManagerServiceInterfaceMockRecorder) Rollback(ctx, instanceID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Rollback", reflect.TypeOf((*MockfileManagerServiceInterface)(nil).Rollback), ctx, instanceID)
}

// SetIsConnected mocks base method.
func (m *MockfileManagerServiceInterface) SetIsConnected(isConnected bool) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetIsConnected", isConnected)
}

// SetIsConnected indicates an expected call of SetIsConnected.
func (mr *MockfileManagerServiceInterfaceMockRecorder) SetIsConnected(isConnected any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetIsConnected", reflect.TypeOf((*MockfileManagerServiceInterface)(nil).SetIsConnected), isConnected)
}

// UpdateCurrentFilesOnDisk mocks base method.
func (m *MockfileManagerServiceInterface) UpdateCurrentFilesOnDisk(ctx context.Context, updateFiles map[string]*v1.File, referenced bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateCurrentFilesOnDisk", ctx, updateFiles, referenced)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateCurrentFilesOnDisk indicates an expected call of UpdateCurrentFilesOnDisk.
func (mr *MockfileManagerServiceInterfaceMockRecorder) UpdateCurrentFilesOnDisk(ctx, updateFiles, referenced any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateCurrentFilesOnDisk", reflect.TypeOf((*MockfileManagerServiceInterface)(nil).UpdateCurrentFilesOnDisk), ctx, updateFiles, referenced)
}
