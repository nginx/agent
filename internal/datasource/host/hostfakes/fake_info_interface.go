// Code generated by counterfeiter. DO NOT EDIT.
package hostfakes

import (
	"context"
	"sync"

	v1 "github.com/nginx/agent/v3/api/grpc/mpi/v1"
	"github.com/nginx/agent/v3/internal/datasource/host"
)

type FakeInfoInterface struct {
	GetContainerInfoStub        func() *v1.Resource_ContainerInfo
	getContainerInfoMutex       sync.RWMutex
	getContainerInfoArgsForCall []struct {
	}
	getContainerInfoReturns struct {
		result1 *v1.Resource_ContainerInfo
	}
	getContainerInfoReturnsOnCall map[int]struct {
		result1 *v1.Resource_ContainerInfo
	}
	GetHostInfoStub        func(context.Context) *v1.Resource_HostInfo
	getHostInfoMutex       sync.RWMutex
	getHostInfoArgsForCall []struct {
		arg1 context.Context
	}
	getHostInfoReturns struct {
		result1 *v1.Resource_HostInfo
	}
	getHostInfoReturnsOnCall map[int]struct {
		result1 *v1.Resource_HostInfo
	}
	IsContainerStub        func() bool
	isContainerMutex       sync.RWMutex
	isContainerArgsForCall []struct {
	}
	isContainerReturns struct {
		result1 bool
	}
	isContainerReturnsOnCall map[int]struct {
		result1 bool
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeInfoInterface) GetContainerInfo() *v1.Resource_ContainerInfo {
	fake.getContainerInfoMutex.Lock()
	ret, specificReturn := fake.getContainerInfoReturnsOnCall[len(fake.getContainerInfoArgsForCall)]
	fake.getContainerInfoArgsForCall = append(fake.getContainerInfoArgsForCall, struct {
	}{})
	stub := fake.GetContainerInfoStub
	fakeReturns := fake.getContainerInfoReturns
	fake.recordInvocation("GetContainerInfo", []interface{}{})
	fake.getContainerInfoMutex.Unlock()
	if stub != nil {
		return stub()
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeInfoInterface) GetContainerInfoCallCount() int {
	fake.getContainerInfoMutex.RLock()
	defer fake.getContainerInfoMutex.RUnlock()
	return len(fake.getContainerInfoArgsForCall)
}

func (fake *FakeInfoInterface) GetContainerInfoCalls(stub func() *v1.Resource_ContainerInfo) {
	fake.getContainerInfoMutex.Lock()
	defer fake.getContainerInfoMutex.Unlock()
	fake.GetContainerInfoStub = stub
}

func (fake *FakeInfoInterface) GetContainerInfoReturns(result1 *v1.Resource_ContainerInfo) {
	fake.getContainerInfoMutex.Lock()
	defer fake.getContainerInfoMutex.Unlock()
	fake.GetContainerInfoStub = nil
	fake.getContainerInfoReturns = struct {
		result1 *v1.Resource_ContainerInfo
	}{result1}
}

func (fake *FakeInfoInterface) GetContainerInfoReturnsOnCall(i int, result1 *v1.Resource_ContainerInfo) {
	fake.getContainerInfoMutex.Lock()
	defer fake.getContainerInfoMutex.Unlock()
	fake.GetContainerInfoStub = nil
	if fake.getContainerInfoReturnsOnCall == nil {
		fake.getContainerInfoReturnsOnCall = make(map[int]struct {
			result1 *v1.Resource_ContainerInfo
		})
	}
	fake.getContainerInfoReturnsOnCall[i] = struct {
		result1 *v1.Resource_ContainerInfo
	}{result1}
}

func (fake *FakeInfoInterface) GetHostInfo(arg1 context.Context) *v1.Resource_HostInfo {
	fake.getHostInfoMutex.Lock()
	ret, specificReturn := fake.getHostInfoReturnsOnCall[len(fake.getHostInfoArgsForCall)]
	fake.getHostInfoArgsForCall = append(fake.getHostInfoArgsForCall, struct {
		arg1 context.Context
	}{arg1})
	stub := fake.GetHostInfoStub
	fakeReturns := fake.getHostInfoReturns
	fake.recordInvocation("GetHostInfo", []interface{}{arg1})
	fake.getHostInfoMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeInfoInterface) GetHostInfoCallCount() int {
	fake.getHostInfoMutex.RLock()
	defer fake.getHostInfoMutex.RUnlock()
	return len(fake.getHostInfoArgsForCall)
}

func (fake *FakeInfoInterface) GetHostInfoCalls(stub func(context.Context) *v1.Resource_HostInfo) {
	fake.getHostInfoMutex.Lock()
	defer fake.getHostInfoMutex.Unlock()
	fake.GetHostInfoStub = stub
}

func (fake *FakeInfoInterface) GetHostInfoArgsForCall(i int) context.Context {
	fake.getHostInfoMutex.RLock()
	defer fake.getHostInfoMutex.RUnlock()
	argsForCall := fake.getHostInfoArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeInfoInterface) GetHostInfoReturns(result1 *v1.Resource_HostInfo) {
	fake.getHostInfoMutex.Lock()
	defer fake.getHostInfoMutex.Unlock()
	fake.GetHostInfoStub = nil
	fake.getHostInfoReturns = struct {
		result1 *v1.Resource_HostInfo
	}{result1}
}

func (fake *FakeInfoInterface) GetHostInfoReturnsOnCall(i int, result1 *v1.Resource_HostInfo) {
	fake.getHostInfoMutex.Lock()
	defer fake.getHostInfoMutex.Unlock()
	fake.GetHostInfoStub = nil
	if fake.getHostInfoReturnsOnCall == nil {
		fake.getHostInfoReturnsOnCall = make(map[int]struct {
			result1 *v1.Resource_HostInfo
		})
	}
	fake.getHostInfoReturnsOnCall[i] = struct {
		result1 *v1.Resource_HostInfo
	}{result1}
}

func (fake *FakeInfoInterface) IsContainer() bool {
	fake.isContainerMutex.Lock()
	ret, specificReturn := fake.isContainerReturnsOnCall[len(fake.isContainerArgsForCall)]
	fake.isContainerArgsForCall = append(fake.isContainerArgsForCall, struct {
	}{})
	stub := fake.IsContainerStub
	fakeReturns := fake.isContainerReturns
	fake.recordInvocation("IsContainer", []interface{}{})
	fake.isContainerMutex.Unlock()
	if stub != nil {
		return stub()
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeInfoInterface) IsContainerCallCount() int {
	fake.isContainerMutex.RLock()
	defer fake.isContainerMutex.RUnlock()
	return len(fake.isContainerArgsForCall)
}

func (fake *FakeInfoInterface) IsContainerCalls(stub func() bool) {
	fake.isContainerMutex.Lock()
	defer fake.isContainerMutex.Unlock()
	fake.IsContainerStub = stub
}

func (fake *FakeInfoInterface) IsContainerReturns(result1 bool) {
	fake.isContainerMutex.Lock()
	defer fake.isContainerMutex.Unlock()
	fake.IsContainerStub = nil
	fake.isContainerReturns = struct {
		result1 bool
	}{result1}
}

func (fake *FakeInfoInterface) IsContainerReturnsOnCall(i int, result1 bool) {
	fake.isContainerMutex.Lock()
	defer fake.isContainerMutex.Unlock()
	fake.IsContainerStub = nil
	if fake.isContainerReturnsOnCall == nil {
		fake.isContainerReturnsOnCall = make(map[int]struct {
			result1 bool
		})
	}
	fake.isContainerReturnsOnCall[i] = struct {
		result1 bool
	}{result1}
}

func (fake *FakeInfoInterface) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.getContainerInfoMutex.RLock()
	defer fake.getContainerInfoMutex.RUnlock()
	fake.getHostInfoMutex.RLock()
	defer fake.getHostInfoMutex.RUnlock()
	fake.isContainerMutex.RLock()
	defer fake.isContainerMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakeInfoInterface) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ host.InfoInterface = new(FakeInfoInterface)
