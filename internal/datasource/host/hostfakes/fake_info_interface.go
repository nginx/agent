// Code generated by counterfeiter. DO NOT EDIT.
package hostfakes

import (
	"context"
	"sync"

	v1 "github.com/nginx/agent/v3/api/grpc/mpi/v1"
	"github.com/nginx/agent/v3/internal/datasource/host"
)

type FakeInfoInterface struct {
	ContainerInfoStub        func() *v1.Resource_ContainerInfo
	containerInfoMutex       sync.RWMutex
	containerInfoArgsForCall []struct {
	}
	containerInfoReturns struct {
		result1 *v1.Resource_ContainerInfo
	}
	containerInfoReturnsOnCall map[int]struct {
		result1 *v1.Resource_ContainerInfo
	}
	HostInfoStub        func(context.Context) *v1.Resource_HostInfo
	hostInfoMutex       sync.RWMutex
	hostInfoArgsForCall []struct {
		arg1 context.Context
	}
	hostInfoReturns struct {
		result1 *v1.Resource_HostInfo
	}
	hostInfoReturnsOnCall map[int]struct {
		result1 *v1.Resource_HostInfo
	}
	IsContainerStub        func() bool
	isContainerMutex       sync.RWMutex
	isContainerArgsForCall []struct {
	}
	isContainerReturns struct {
		result1 bool
	}
	isContainerReturnsOnCall map[int]struct {
		result1 bool
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeInfoInterface) ContainerInfo() *v1.Resource_ContainerInfo {
	fake.containerInfoMutex.Lock()
	ret, specificReturn := fake.containerInfoReturnsOnCall[len(fake.containerInfoArgsForCall)]
	fake.containerInfoArgsForCall = append(fake.containerInfoArgsForCall, struct {
	}{})
	stub := fake.ContainerInfoStub
	fakeReturns := fake.containerInfoReturns
	fake.recordInvocation("ContainerInfo", []interface{}{})
	fake.containerInfoMutex.Unlock()
	if stub != nil {
		return stub()
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeInfoInterface) ContainerInfoCallCount() int {
	fake.containerInfoMutex.RLock()
	defer fake.containerInfoMutex.RUnlock()
	return len(fake.containerInfoArgsForCall)
}

func (fake *FakeInfoInterface) ContainerInfoCalls(stub func() *v1.Resource_ContainerInfo) {
	fake.containerInfoMutex.Lock()
	defer fake.containerInfoMutex.Unlock()
	fake.ContainerInfoStub = stub
}

func (fake *FakeInfoInterface) ContainerInfoReturns(result1 *v1.Resource_ContainerInfo) {
	fake.containerInfoMutex.Lock()
	defer fake.containerInfoMutex.Unlock()
	fake.ContainerInfoStub = nil
	fake.containerInfoReturns = struct {
		result1 *v1.Resource_ContainerInfo
	}{result1}
}

func (fake *FakeInfoInterface) ContainerInfoReturnsOnCall(i int, result1 *v1.Resource_ContainerInfo) {
	fake.containerInfoMutex.Lock()
	defer fake.containerInfoMutex.Unlock()
	fake.ContainerInfoStub = nil
	if fake.containerInfoReturnsOnCall == nil {
		fake.containerInfoReturnsOnCall = make(map[int]struct {
			result1 *v1.Resource_ContainerInfo
		})
	}
	fake.containerInfoReturnsOnCall[i] = struct {
		result1 *v1.Resource_ContainerInfo
	}{result1}
}

func (fake *FakeInfoInterface) HostInfo(arg1 context.Context) *v1.Resource_HostInfo {
	fake.hostInfoMutex.Lock()
	ret, specificReturn := fake.hostInfoReturnsOnCall[len(fake.hostInfoArgsForCall)]
	fake.hostInfoArgsForCall = append(fake.hostInfoArgsForCall, struct {
		arg1 context.Context
	}{arg1})
	stub := fake.HostInfoStub
	fakeReturns := fake.hostInfoReturns
	fake.recordInvocation("HostInfo", []interface{}{arg1})
	fake.hostInfoMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeInfoInterface) HostInfoCallCount() int {
	fake.hostInfoMutex.RLock()
	defer fake.hostInfoMutex.RUnlock()
	return len(fake.hostInfoArgsForCall)
}

func (fake *FakeInfoInterface) HostInfoCalls(stub func(context.Context) *v1.Resource_HostInfo) {
	fake.hostInfoMutex.Lock()
	defer fake.hostInfoMutex.Unlock()
	fake.HostInfoStub = stub
}

func (fake *FakeInfoInterface) HostInfoArgsForCall(i int) context.Context {
	fake.hostInfoMutex.RLock()
	defer fake.hostInfoMutex.RUnlock()
	argsForCall := fake.hostInfoArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeInfoInterface) HostInfoReturns(result1 *v1.Resource_HostInfo) {
	fake.hostInfoMutex.Lock()
	defer fake.hostInfoMutex.Unlock()
	fake.HostInfoStub = nil
	fake.hostInfoReturns = struct {
		result1 *v1.Resource_HostInfo
	}{result1}
}

func (fake *FakeInfoInterface) HostInfoReturnsOnCall(i int, result1 *v1.Resource_HostInfo) {
	fake.hostInfoMutex.Lock()
	defer fake.hostInfoMutex.Unlock()
	fake.HostInfoStub = nil
	if fake.hostInfoReturnsOnCall == nil {
		fake.hostInfoReturnsOnCall = make(map[int]struct {
			result1 *v1.Resource_HostInfo
		})
	}
	fake.hostInfoReturnsOnCall[i] = struct {
		result1 *v1.Resource_HostInfo
	}{result1}
}

func (fake *FakeInfoInterface) IsContainer() bool {
	fake.isContainerMutex.Lock()
	ret, specificReturn := fake.isContainerReturnsOnCall[len(fake.isContainerArgsForCall)]
	fake.isContainerArgsForCall = append(fake.isContainerArgsForCall, struct {
	}{})
	stub := fake.IsContainerStub
	fakeReturns := fake.isContainerReturns
	fake.recordInvocation("IsContainer", []interface{}{})
	fake.isContainerMutex.Unlock()
	if stub != nil {
		return stub()
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeInfoInterface) IsContainerCallCount() int {
	fake.isContainerMutex.RLock()
	defer fake.isContainerMutex.RUnlock()
	return len(fake.isContainerArgsForCall)
}

func (fake *FakeInfoInterface) IsContainerCalls(stub func() bool) {
	fake.isContainerMutex.Lock()
	defer fake.isContainerMutex.Unlock()
	fake.IsContainerStub = stub
}

func (fake *FakeInfoInterface) IsContainerReturns(result1 bool) {
	fake.isContainerMutex.Lock()
	defer fake.isContainerMutex.Unlock()
	fake.IsContainerStub = nil
	fake.isContainerReturns = struct {
		result1 bool
	}{result1}
}

func (fake *FakeInfoInterface) IsContainerReturnsOnCall(i int, result1 bool) {
	fake.isContainerMutex.Lock()
	defer fake.isContainerMutex.Unlock()
	fake.IsContainerStub = nil
	if fake.isContainerReturnsOnCall == nil {
		fake.isContainerReturnsOnCall = make(map[int]struct {
			result1 bool
		})
	}
	fake.isContainerReturnsOnCall[i] = struct {
		result1 bool
	}{result1}
}

func (fake *FakeInfoInterface) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.containerInfoMutex.RLock()
	defer fake.containerInfoMutex.RUnlock()
	fake.hostInfoMutex.RLock()
	defer fake.hostInfoMutex.RUnlock()
	fake.isContainerMutex.RLock()
	defer fake.isContainerMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakeInfoInterface) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ host.InfoInterface = new(FakeInfoInterface)
