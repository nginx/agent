// Code generated by counterfeiter. DO NOT EDIT.
package prometheus

import (
	"context"
	"sync"

	"github.com/nginx/agent/v3/internal/bus"
)

type FakeMessageBusContract struct {
	ContextStub        func() context.Context
	contextMutex       sync.RWMutex
	contextArgsForCall []struct {
	}
	contextReturns struct {
		result1 context.Context
	}
	contextReturnsOnCall map[int]struct {
		result1 context.Context
	}
	DeRegisterStub        func([]string) error
	deRegisterMutex       sync.RWMutex
	deRegisterArgsForCall []struct {
		arg1 []string
	}
	deRegisterReturns struct {
		result1 error
	}
	deRegisterReturnsOnCall map[int]struct {
		result1 error
	}
	GetPluginsStub        func() []bus.Plugin
	getPluginsMutex       sync.RWMutex
	getPluginsArgsForCall []struct {
	}
	getPluginsReturns struct {
		result1 []bus.Plugin
	}
	getPluginsReturnsOnCall map[int]struct {
		result1 []bus.Plugin
	}
	IsPluginAlreadyRegisteredStub        func(string) bool
	isPluginAlreadyRegisteredMutex       sync.RWMutex
	isPluginAlreadyRegisteredArgsForCall []struct {
		arg1 string
	}
	isPluginAlreadyRegisteredReturns struct {
		result1 bool
	}
	isPluginAlreadyRegisteredReturnsOnCall map[int]struct {
		result1 bool
	}
	ProcessStub        func(...*bus.Message)
	processMutex       sync.RWMutex
	processArgsForCall []struct {
		arg1 []*bus.Message
	}
	RegisterStub        func(int, []bus.Plugin) error
	registerMutex       sync.RWMutex
	registerArgsForCall []struct {
		arg1 int
		arg2 []bus.Plugin
	}
	registerReturns struct {
		result1 error
	}
	registerReturnsOnCall map[int]struct {
		result1 error
	}
	RunStub        func()
	runMutex       sync.RWMutex
	runArgsForCall []struct {
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeMessageBusContract) Context() context.Context {
	fake.contextMutex.Lock()
	ret, specificReturn := fake.contextReturnsOnCall[len(fake.contextArgsForCall)]
	fake.contextArgsForCall = append(fake.contextArgsForCall, struct {
	}{})
	stub := fake.ContextStub
	fakeReturns := fake.contextReturns
	fake.recordInvocation("Context", []interface{}{})
	fake.contextMutex.Unlock()
	if stub != nil {
		return stub()
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeMessageBusContract) ContextCallCount() int {
	fake.contextMutex.RLock()
	defer fake.contextMutex.RUnlock()
	return len(fake.contextArgsForCall)
}

func (fake *FakeMessageBusContract) ContextCalls(stub func() context.Context) {
	fake.contextMutex.Lock()
	defer fake.contextMutex.Unlock()
	fake.ContextStub = stub
}

func (fake *FakeMessageBusContract) ContextReturns(result1 context.Context) {
	fake.contextMutex.Lock()
	defer fake.contextMutex.Unlock()
	fake.ContextStub = nil
	fake.contextReturns = struct {
		result1 context.Context
	}{result1}
}

func (fake *FakeMessageBusContract) ContextReturnsOnCall(i int, result1 context.Context) {
	fake.contextMutex.Lock()
	defer fake.contextMutex.Unlock()
	fake.ContextStub = nil
	if fake.contextReturnsOnCall == nil {
		fake.contextReturnsOnCall = make(map[int]struct {
			result1 context.Context
		})
	}
	fake.contextReturnsOnCall[i] = struct {
		result1 context.Context
	}{result1}
}

func (fake *FakeMessageBusContract) DeRegister(arg1 []string) error {
	var arg1Copy []string
	if arg1 != nil {
		arg1Copy = make([]string, len(arg1))
		copy(arg1Copy, arg1)
	}
	fake.deRegisterMutex.Lock()
	ret, specificReturn := fake.deRegisterReturnsOnCall[len(fake.deRegisterArgsForCall)]
	fake.deRegisterArgsForCall = append(fake.deRegisterArgsForCall, struct {
		arg1 []string
	}{arg1Copy})
	stub := fake.DeRegisterStub
	fakeReturns := fake.deRegisterReturns
	fake.recordInvocation("DeRegister", []interface{}{arg1Copy})
	fake.deRegisterMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeMessageBusContract) DeRegisterCallCount() int {
	fake.deRegisterMutex.RLock()
	defer fake.deRegisterMutex.RUnlock()
	return len(fake.deRegisterArgsForCall)
}

func (fake *FakeMessageBusContract) DeRegisterCalls(stub func([]string) error) {
	fake.deRegisterMutex.Lock()
	defer fake.deRegisterMutex.Unlock()
	fake.DeRegisterStub = stub
}

func (fake *FakeMessageBusContract) DeRegisterArgsForCall(i int) []string {
	fake.deRegisterMutex.RLock()
	defer fake.deRegisterMutex.RUnlock()
	argsForCall := fake.deRegisterArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeMessageBusContract) DeRegisterReturns(result1 error) {
	fake.deRegisterMutex.Lock()
	defer fake.deRegisterMutex.Unlock()
	fake.DeRegisterStub = nil
	fake.deRegisterReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeMessageBusContract) DeRegisterReturnsOnCall(i int, result1 error) {
	fake.deRegisterMutex.Lock()
	defer fake.deRegisterMutex.Unlock()
	fake.DeRegisterStub = nil
	if fake.deRegisterReturnsOnCall == nil {
		fake.deRegisterReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.deRegisterReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeMessageBusContract) GetPlugins() []bus.Plugin {
	fake.getPluginsMutex.Lock()
	ret, specificReturn := fake.getPluginsReturnsOnCall[len(fake.getPluginsArgsForCall)]
	fake.getPluginsArgsForCall = append(fake.getPluginsArgsForCall, struct {
	}{})
	stub := fake.GetPluginsStub
	fakeReturns := fake.getPluginsReturns
	fake.recordInvocation("GetPlugins", []interface{}{})
	fake.getPluginsMutex.Unlock()
	if stub != nil {
		return stub()
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeMessageBusContract) GetPluginsCallCount() int {
	fake.getPluginsMutex.RLock()
	defer fake.getPluginsMutex.RUnlock()
	return len(fake.getPluginsArgsForCall)
}

func (fake *FakeMessageBusContract) GetPluginsCalls(stub func() []bus.Plugin) {
	fake.getPluginsMutex.Lock()
	defer fake.getPluginsMutex.Unlock()
	fake.GetPluginsStub = stub
}

func (fake *FakeMessageBusContract) GetPluginsReturns(result1 []bus.Plugin) {
	fake.getPluginsMutex.Lock()
	defer fake.getPluginsMutex.Unlock()
	fake.GetPluginsStub = nil
	fake.getPluginsReturns = struct {
		result1 []bus.Plugin
	}{result1}
}

func (fake *FakeMessageBusContract) GetPluginsReturnsOnCall(i int, result1 []bus.Plugin) {
	fake.getPluginsMutex.Lock()
	defer fake.getPluginsMutex.Unlock()
	fake.GetPluginsStub = nil
	if fake.getPluginsReturnsOnCall == nil {
		fake.getPluginsReturnsOnCall = make(map[int]struct {
			result1 []bus.Plugin
		})
	}
	fake.getPluginsReturnsOnCall[i] = struct {
		result1 []bus.Plugin
	}{result1}
}

func (fake *FakeMessageBusContract) IsPluginAlreadyRegistered(arg1 string) bool {
	fake.isPluginAlreadyRegisteredMutex.Lock()
	ret, specificReturn := fake.isPluginAlreadyRegisteredReturnsOnCall[len(fake.isPluginAlreadyRegisteredArgsForCall)]
	fake.isPluginAlreadyRegisteredArgsForCall = append(fake.isPluginAlreadyRegisteredArgsForCall, struct {
		arg1 string
	}{arg1})
	stub := fake.IsPluginAlreadyRegisteredStub
	fakeReturns := fake.isPluginAlreadyRegisteredReturns
	fake.recordInvocation("IsPluginAlreadyRegistered", []interface{}{arg1})
	fake.isPluginAlreadyRegisteredMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeMessageBusContract) IsPluginAlreadyRegisteredCallCount() int {
	fake.isPluginAlreadyRegisteredMutex.RLock()
	defer fake.isPluginAlreadyRegisteredMutex.RUnlock()
	return len(fake.isPluginAlreadyRegisteredArgsForCall)
}

func (fake *FakeMessageBusContract) IsPluginAlreadyRegisteredCalls(stub func(string) bool) {
	fake.isPluginAlreadyRegisteredMutex.Lock()
	defer fake.isPluginAlreadyRegisteredMutex.Unlock()
	fake.IsPluginAlreadyRegisteredStub = stub
}

func (fake *FakeMessageBusContract) IsPluginAlreadyRegisteredArgsForCall(i int) string {
	fake.isPluginAlreadyRegisteredMutex.RLock()
	defer fake.isPluginAlreadyRegisteredMutex.RUnlock()
	argsForCall := fake.isPluginAlreadyRegisteredArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeMessageBusContract) IsPluginAlreadyRegisteredReturns(result1 bool) {
	fake.isPluginAlreadyRegisteredMutex.Lock()
	defer fake.isPluginAlreadyRegisteredMutex.Unlock()
	fake.IsPluginAlreadyRegisteredStub = nil
	fake.isPluginAlreadyRegisteredReturns = struct {
		result1 bool
	}{result1}
}

func (fake *FakeMessageBusContract) IsPluginAlreadyRegisteredReturnsOnCall(i int, result1 bool) {
	fake.isPluginAlreadyRegisteredMutex.Lock()
	defer fake.isPluginAlreadyRegisteredMutex.Unlock()
	fake.IsPluginAlreadyRegisteredStub = nil
	if fake.isPluginAlreadyRegisteredReturnsOnCall == nil {
		fake.isPluginAlreadyRegisteredReturnsOnCall = make(map[int]struct {
			result1 bool
		})
	}
	fake.isPluginAlreadyRegisteredReturnsOnCall[i] = struct {
		result1 bool
	}{result1}
}

func (fake *FakeMessageBusContract) Process(arg1 ...*bus.Message) {
	fake.processMutex.Lock()
	fake.processArgsForCall = append(fake.processArgsForCall, struct {
		arg1 []*bus.Message
	}{arg1})
	stub := fake.ProcessStub
	fake.recordInvocation("Process", []interface{}{arg1})
	fake.processMutex.Unlock()
	if stub != nil {
		fake.ProcessStub(arg1...)
	}
}

func (fake *FakeMessageBusContract) ProcessCallCount() int {
	fake.processMutex.RLock()
	defer fake.processMutex.RUnlock()
	return len(fake.processArgsForCall)
}

func (fake *FakeMessageBusContract) ProcessCalls(stub func(...*bus.Message)) {
	fake.processMutex.Lock()
	defer fake.processMutex.Unlock()
	fake.ProcessStub = stub
}

func (fake *FakeMessageBusContract) ProcessArgsForCall(i int) []*bus.Message {
	fake.processMutex.RLock()
	defer fake.processMutex.RUnlock()
	argsForCall := fake.processArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeMessageBusContract) Register(arg1 int, arg2 []bus.Plugin) error {
	var arg2Copy []bus.Plugin
	if arg2 != nil {
		arg2Copy = make([]bus.Plugin, len(arg2))
		copy(arg2Copy, arg2)
	}
	fake.registerMutex.Lock()
	ret, specificReturn := fake.registerReturnsOnCall[len(fake.registerArgsForCall)]
	fake.registerArgsForCall = append(fake.registerArgsForCall, struct {
		arg1 int
		arg2 []bus.Plugin
	}{arg1, arg2Copy})
	stub := fake.RegisterStub
	fakeReturns := fake.registerReturns
	fake.recordInvocation("Register", []interface{}{arg1, arg2Copy})
	fake.registerMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeMessageBusContract) RegisterCallCount() int {
	fake.registerMutex.RLock()
	defer fake.registerMutex.RUnlock()
	return len(fake.registerArgsForCall)
}

func (fake *FakeMessageBusContract) RegisterCalls(stub func(int, []bus.Plugin) error) {
	fake.registerMutex.Lock()
	defer fake.registerMutex.Unlock()
	fake.RegisterStub = stub
}

func (fake *FakeMessageBusContract) RegisterArgsForCall(i int) (int, []bus.Plugin) {
	fake.registerMutex.RLock()
	defer fake.registerMutex.RUnlock()
	argsForCall := fake.registerArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2
}

func (fake *FakeMessageBusContract) RegisterReturns(result1 error) {
	fake.registerMutex.Lock()
	defer fake.registerMutex.Unlock()
	fake.RegisterStub = nil
	fake.registerReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeMessageBusContract) RegisterReturnsOnCall(i int, result1 error) {
	fake.registerMutex.Lock()
	defer fake.registerMutex.Unlock()
	fake.RegisterStub = nil
	if fake.registerReturnsOnCall == nil {
		fake.registerReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.registerReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeMessageBusContract) Run() {
	fake.runMutex.Lock()
	fake.runArgsForCall = append(fake.runArgsForCall, struct {
	}{})
	stub := fake.RunStub
	fake.recordInvocation("Run", []interface{}{})
	fake.runMutex.Unlock()
	if stub != nil {
		fake.RunStub()
	}
}

func (fake *FakeMessageBusContract) RunCallCount() int {
	fake.runMutex.RLock()
	defer fake.runMutex.RUnlock()
	return len(fake.runArgsForCall)
}

func (fake *FakeMessageBusContract) RunCalls(stub func()) {
	fake.runMutex.Lock()
	defer fake.runMutex.Unlock()
	fake.RunStub = stub
}

func (fake *FakeMessageBusContract) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.contextMutex.RLock()
	defer fake.contextMutex.RUnlock()
	fake.deRegisterMutex.RLock()
	defer fake.deRegisterMutex.RUnlock()
	fake.getPluginsMutex.RLock()
	defer fake.getPluginsMutex.RUnlock()
	fake.isPluginAlreadyRegisteredMutex.RLock()
	defer fake.isPluginAlreadyRegisteredMutex.RUnlock()
	fake.processMutex.RLock()
	defer fake.processMutex.RUnlock()
	fake.registerMutex.RLock()
	defer fake.registerMutex.RUnlock()
	fake.runMutex.RLock()
	defer fake.runMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakeMessageBusContract) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ MessageBusContract = new(FakeMessageBusContract)
