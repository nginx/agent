// Code generated by counterfeiter. DO NOT EDIT.
package clientfakes

import (
	"context"
	"sync"

	v1 "github.com/nginx/agent/v3/api/grpc/mpi/v1"
	"github.com/nginx/agent/v3/internal/client"
)

type FakeConfigClient struct {
	GetFileStub        func(context.Context, *v1.GetFileRequest) (*v1.FileContents, error)
	getFileMutex       sync.RWMutex
	getFileArgsForCall []struct {
		arg1 context.Context
		arg2 *v1.GetFileRequest
	}
	getFileReturns struct {
		result1 *v1.FileContents
		result2 error
	}
	getFileReturnsOnCall map[int]struct {
		result1 *v1.FileContents
		result2 error
	}
	GetOverviewStub        func(context.Context, *v1.GetOverviewRequest) (*v1.FileOverview, error)
	getOverviewMutex       sync.RWMutex
	getOverviewArgsForCall []struct {
		arg1 context.Context
		arg2 *v1.GetOverviewRequest
	}
	getOverviewReturns struct {
		result1 *v1.FileOverview
		result2 error
	}
	getOverviewReturnsOnCall map[int]struct {
		result1 *v1.FileOverview
		result2 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeConfigClient) GetFile(arg1 context.Context, arg2 *v1.GetFileRequest) (*v1.FileContents, error) {
	fake.getFileMutex.Lock()
	ret, specificReturn := fake.getFileReturnsOnCall[len(fake.getFileArgsForCall)]
	fake.getFileArgsForCall = append(fake.getFileArgsForCall, struct {
		arg1 context.Context
		arg2 *v1.GetFileRequest
	}{arg1, arg2})
	stub := fake.GetFileStub
	fakeReturns := fake.getFileReturns
	fake.recordInvocation("GetFile", []interface{}{arg1, arg2})
	fake.getFileMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeConfigClient) GetFileCallCount() int {
	fake.getFileMutex.RLock()
	defer fake.getFileMutex.RUnlock()
	return len(fake.getFileArgsForCall)
}

func (fake *FakeConfigClient) GetFileCalls(stub func(context.Context, *v1.GetFileRequest) (*v1.FileContents, error)) {
	fake.getFileMutex.Lock()
	defer fake.getFileMutex.Unlock()
	fake.GetFileStub = stub
}

func (fake *FakeConfigClient) GetFileArgsForCall(i int) (context.Context, *v1.GetFileRequest) {
	fake.getFileMutex.RLock()
	defer fake.getFileMutex.RUnlock()
	argsForCall := fake.getFileArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2
}

func (fake *FakeConfigClient) GetFileReturns(result1 *v1.FileContents, result2 error) {
	fake.getFileMutex.Lock()
	defer fake.getFileMutex.Unlock()
	fake.GetFileStub = nil
	fake.getFileReturns = struct {
		result1 *v1.FileContents
		result2 error
	}{result1, result2}
}

func (fake *FakeConfigClient) GetFileReturnsOnCall(i int, result1 *v1.FileContents, result2 error) {
	fake.getFileMutex.Lock()
	defer fake.getFileMutex.Unlock()
	fake.GetFileStub = nil
	if fake.getFileReturnsOnCall == nil {
		fake.getFileReturnsOnCall = make(map[int]struct {
			result1 *v1.FileContents
			result2 error
		})
	}
	fake.getFileReturnsOnCall[i] = struct {
		result1 *v1.FileContents
		result2 error
	}{result1, result2}
}

func (fake *FakeConfigClient) GetOverview(arg1 context.Context, arg2 *v1.GetOverviewRequest) (*v1.FileOverview, error) {
	fake.getOverviewMutex.Lock()
	ret, specificReturn := fake.getOverviewReturnsOnCall[len(fake.getOverviewArgsForCall)]
	fake.getOverviewArgsForCall = append(fake.getOverviewArgsForCall, struct {
		arg1 context.Context
		arg2 *v1.GetOverviewRequest
	}{arg1, arg2})
	stub := fake.GetOverviewStub
	fakeReturns := fake.getOverviewReturns
	fake.recordInvocation("GetOverview", []interface{}{arg1, arg2})
	fake.getOverviewMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeConfigClient) GetOverviewCallCount() int {
	fake.getOverviewMutex.RLock()
	defer fake.getOverviewMutex.RUnlock()
	return len(fake.getOverviewArgsForCall)
}

func (fake *FakeConfigClient) GetOverviewCalls(stub func(context.Context, *v1.GetOverviewRequest) (*v1.FileOverview, error)) {
	fake.getOverviewMutex.Lock()
	defer fake.getOverviewMutex.Unlock()
	fake.GetOverviewStub = stub
}

func (fake *FakeConfigClient) GetOverviewArgsForCall(i int) (context.Context, *v1.GetOverviewRequest) {
	fake.getOverviewMutex.RLock()
	defer fake.getOverviewMutex.RUnlock()
	argsForCall := fake.getOverviewArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2
}

func (fake *FakeConfigClient) GetOverviewReturns(result1 *v1.FileOverview, result2 error) {
	fake.getOverviewMutex.Lock()
	defer fake.getOverviewMutex.Unlock()
	fake.GetOverviewStub = nil
	fake.getOverviewReturns = struct {
		result1 *v1.FileOverview
		result2 error
	}{result1, result2}
}

func (fake *FakeConfigClient) GetOverviewReturnsOnCall(i int, result1 *v1.FileOverview, result2 error) {
	fake.getOverviewMutex.Lock()
	defer fake.getOverviewMutex.Unlock()
	fake.GetOverviewStub = nil
	if fake.getOverviewReturnsOnCall == nil {
		fake.getOverviewReturnsOnCall = make(map[int]struct {
			result1 *v1.FileOverview
			result2 error
		})
	}
	fake.getOverviewReturnsOnCall[i] = struct {
		result1 *v1.FileOverview
		result2 error
	}{result1, result2}
}

func (fake *FakeConfigClient) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.getFileMutex.RLock()
	defer fake.getFileMutex.RUnlock()
	fake.getOverviewMutex.RLock()
	defer fake.getOverviewMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakeConfigClient) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ client.ConfigClient = new(FakeConfigClient)
