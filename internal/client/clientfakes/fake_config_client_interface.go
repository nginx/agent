// Code generated by counterfeiter. DO NOT EDIT.
package clientfakes

import (
	"context"
	"sync"

	v1 "github.com/nginx/agent/v3/api/grpc/mpi/v1"
	"github.com/nginx/agent/v3/internal/client"
)

type FakeConfigClientInterface struct {
	GetFileStub        func(context.Context, *v1.FileMeta, string, string, string) (*v1.FileContents, error)
	getFileMutex       sync.RWMutex
	getFileArgsForCall []struct {
		arg1 context.Context
		arg2 *v1.FileMeta
		arg3 string
		arg4 string
		arg5 string
	}
	getFileReturns struct {
		result1 *v1.FileContents
		result2 error
	}
	getFileReturnsOnCall map[int]struct {
		result1 *v1.FileContents
		result2 error
	}
	GetFilesMetadataStub        func(context.Context, string, string, string) (*v1.FileOverview, error)
	getFilesMetadataMutex       sync.RWMutex
	getFilesMetadataArgsForCall []struct {
		arg1 context.Context
		arg2 string
		arg3 string
		arg4 string
	}
	getFilesMetadataReturns struct {
		result1 *v1.FileOverview
		result2 error
	}
	getFilesMetadataReturnsOnCall map[int]struct {
		result1 *v1.FileOverview
		result2 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeConfigClientInterface) GetFile(arg1 context.Context, arg2 *v1.FileMeta, arg3 string, arg4 string, arg5 string) (*v1.FileContents, error) {
	fake.getFileMutex.Lock()
	ret, specificReturn := fake.getFileReturnsOnCall[len(fake.getFileArgsForCall)]
	fake.getFileArgsForCall = append(fake.getFileArgsForCall, struct {
		arg1 context.Context
		arg2 *v1.FileMeta
		arg3 string
		arg4 string
		arg5 string
	}{arg1, arg2, arg3, arg4, arg5})
	stub := fake.GetFileStub
	fakeReturns := fake.getFileReturns
	fake.recordInvocation("GetFile", []interface{}{arg1, arg2, arg3, arg4, arg5})
	fake.getFileMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3, arg4, arg5)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeConfigClientInterface) GetFileCallCount() int {
	fake.getFileMutex.RLock()
	defer fake.getFileMutex.RUnlock()
	return len(fake.getFileArgsForCall)
}

func (fake *FakeConfigClientInterface) GetFileCalls(stub func(context.Context, *v1.FileMeta, string, string, string) (*v1.FileContents, error)) {
	fake.getFileMutex.Lock()
	defer fake.getFileMutex.Unlock()
	fake.GetFileStub = stub
}

func (fake *FakeConfigClientInterface) GetFileArgsForCall(i int) (context.Context, *v1.FileMeta, string, string, string) {
	fake.getFileMutex.RLock()
	defer fake.getFileMutex.RUnlock()
	argsForCall := fake.getFileArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3, argsForCall.arg4, argsForCall.arg5
}

func (fake *FakeConfigClientInterface) GetFileReturns(result1 *v1.FileContents, result2 error) {
	fake.getFileMutex.Lock()
	defer fake.getFileMutex.Unlock()
	fake.GetFileStub = nil
	fake.getFileReturns = struct {
		result1 *v1.FileContents
		result2 error
	}{result1, result2}
}

func (fake *FakeConfigClientInterface) GetFileReturnsOnCall(i int, result1 *v1.FileContents, result2 error) {
	fake.getFileMutex.Lock()
	defer fake.getFileMutex.Unlock()
	fake.GetFileStub = nil
	if fake.getFileReturnsOnCall == nil {
		fake.getFileReturnsOnCall = make(map[int]struct {
			result1 *v1.FileContents
			result2 error
		})
	}
	fake.getFileReturnsOnCall[i] = struct {
		result1 *v1.FileContents
		result2 error
	}{result1, result2}
}

func (fake *FakeConfigClientInterface) GetFilesMetadata(arg1 context.Context, arg2 string, arg3 string, arg4 string) (*v1.FileOverview, error) {
	fake.getFilesMetadataMutex.Lock()
	ret, specificReturn := fake.getFilesMetadataReturnsOnCall[len(fake.getFilesMetadataArgsForCall)]
	fake.getFilesMetadataArgsForCall = append(fake.getFilesMetadataArgsForCall, struct {
		arg1 context.Context
		arg2 string
		arg3 string
		arg4 string
	}{arg1, arg2, arg3, arg4})
	stub := fake.GetFilesMetadataStub
	fakeReturns := fake.getFilesMetadataReturns
	fake.recordInvocation("GetFilesMetadata", []interface{}{arg1, arg2, arg3, arg4})
	fake.getFilesMetadataMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3, arg4)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeConfigClientInterface) GetFilesMetadataCallCount() int {
	fake.getFilesMetadataMutex.RLock()
	defer fake.getFilesMetadataMutex.RUnlock()
	return len(fake.getFilesMetadataArgsForCall)
}

func (fake *FakeConfigClientInterface) GetFilesMetadataCalls(stub func(context.Context, string, string, string) (*v1.FileOverview, error)) {
	fake.getFilesMetadataMutex.Lock()
	defer fake.getFilesMetadataMutex.Unlock()
	fake.GetFilesMetadataStub = stub
}

func (fake *FakeConfigClientInterface) GetFilesMetadataArgsForCall(i int) (context.Context, string, string, string) {
	fake.getFilesMetadataMutex.RLock()
	defer fake.getFilesMetadataMutex.RUnlock()
	argsForCall := fake.getFilesMetadataArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3, argsForCall.arg4
}

func (fake *FakeConfigClientInterface) GetFilesMetadataReturns(result1 *v1.FileOverview, result2 error) {
	fake.getFilesMetadataMutex.Lock()
	defer fake.getFilesMetadataMutex.Unlock()
	fake.GetFilesMetadataStub = nil
	fake.getFilesMetadataReturns = struct {
		result1 *v1.FileOverview
		result2 error
	}{result1, result2}
}

func (fake *FakeConfigClientInterface) GetFilesMetadataReturnsOnCall(i int, result1 *v1.FileOverview, result2 error) {
	fake.getFilesMetadataMutex.Lock()
	defer fake.getFilesMetadataMutex.Unlock()
	fake.GetFilesMetadataStub = nil
	if fake.getFilesMetadataReturnsOnCall == nil {
		fake.getFilesMetadataReturnsOnCall = make(map[int]struct {
			result1 *v1.FileOverview
			result2 error
		})
	}
	fake.getFilesMetadataReturnsOnCall[i] = struct {
		result1 *v1.FileOverview
		result2 error
	}{result1, result2}
}

func (fake *FakeConfigClientInterface) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.getFileMutex.RLock()
	defer fake.getFileMutex.RUnlock()
	fake.getFilesMetadataMutex.RLock()
	defer fake.getFilesMetadataMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakeConfigClientInterface) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ client.ConfigClientInterface = new(FakeConfigClientInterface)
