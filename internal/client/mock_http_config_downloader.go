// Code generated by counterfeiter. DO NOT EDIT.
package client

import (
	"sync"

	"github.com/google/uuid"
	"github.com/nginx/agent/v3/api/grpc/instances"
)

type FakeHttpConfigDownloaderInterface struct {
	GetFileStub        func(*instances.File, string, uuid.UUID)
	getFileMutex       sync.RWMutex
	getFileArgsForCall []struct {
		arg1 *instances.File
		arg2 string
		arg3 uuid.UUID
	}
	GetFilesMetadataStub        func(string, uuid.UUID)
	getFilesMetadataMutex       sync.RWMutex
	getFilesMetadataArgsForCall []struct {
		arg1 string
		arg2 uuid.UUID
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeHttpConfigDownloaderInterface) GetFile(arg1 *instances.File, arg2 string, arg3 uuid.UUID) {
	fake.getFileMutex.Lock()
	fake.getFileArgsForCall = append(fake.getFileArgsForCall, struct {
		arg1 *instances.File
		arg2 string
		arg3 uuid.UUID
	}{arg1, arg2, arg3})
	stub := fake.GetFileStub
	fake.recordInvocation("GetFile", []interface{}{arg1, arg2, arg3})
	fake.getFileMutex.Unlock()
	if stub != nil {
		fake.GetFileStub(arg1, arg2, arg3)
	}
}

func (fake *FakeHttpConfigDownloaderInterface) GetFileCallCount() int {
	fake.getFileMutex.RLock()
	defer fake.getFileMutex.RUnlock()
	return len(fake.getFileArgsForCall)
}

func (fake *FakeHttpConfigDownloaderInterface) GetFileCalls(stub func(*instances.File, string, uuid.UUID)) {
	fake.getFileMutex.Lock()
	defer fake.getFileMutex.Unlock()
	fake.GetFileStub = stub
}

func (fake *FakeHttpConfigDownloaderInterface) GetFileArgsForCall(i int) (*instances.File, string, uuid.UUID) {
	fake.getFileMutex.RLock()
	defer fake.getFileMutex.RUnlock()
	argsForCall := fake.getFileArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeHttpConfigDownloaderInterface) GetFilesMetadata(arg1 string, arg2 uuid.UUID) {
	fake.getFilesMetadataMutex.Lock()
	fake.getFilesMetadataArgsForCall = append(fake.getFilesMetadataArgsForCall, struct {
		arg1 string
		arg2 uuid.UUID
	}{arg1, arg2})
	stub := fake.GetFilesMetadataStub
	fake.recordInvocation("GetFilesMetadata", []interface{}{arg1, arg2})
	fake.getFilesMetadataMutex.Unlock()
	if stub != nil {
		fake.GetFilesMetadataStub(arg1, arg2)
	}
}

func (fake *FakeHttpConfigDownloaderInterface) GetFilesMetadataCallCount() int {
	fake.getFilesMetadataMutex.RLock()
	defer fake.getFilesMetadataMutex.RUnlock()
	return len(fake.getFilesMetadataArgsForCall)
}

func (fake *FakeHttpConfigDownloaderInterface) GetFilesMetadataCalls(stub func(string, uuid.UUID)) {
	fake.getFilesMetadataMutex.Lock()
	defer fake.getFilesMetadataMutex.Unlock()
	fake.GetFilesMetadataStub = stub
}

func (fake *FakeHttpConfigDownloaderInterface) GetFilesMetadataArgsForCall(i int) (string, uuid.UUID) {
	fake.getFilesMetadataMutex.RLock()
	defer fake.getFilesMetadataMutex.RUnlock()
	argsForCall := fake.getFilesMetadataArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2
}

func (fake *FakeHttpConfigDownloaderInterface) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.getFileMutex.RLock()
	defer fake.getFileMutex.RUnlock()
	fake.getFilesMetadataMutex.RLock()
	defer fake.getFilesMetadataMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakeHttpConfigDownloaderInterface) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ HttpConfigDownloaderInterface = new(FakeHttpConfigDownloaderInterface)
