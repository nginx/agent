// Code generated by counterfeiter. DO NOT EDIT.
package config

import (
	"sync"

)

type FakeConfigInterface struct {
	getClientStub        func() Client
	getClientMutex       sync.RWMutex
	getClientArgsForCall []struct {
	}
	getClientReturns struct {
		result1 Client
	}
	getClientReturnsOnCall map[int]struct {
		result1 Client
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeConfigInterface) getClient() Client {
	fake.getClientMutex.Lock()
	ret, specificReturn := fake.getClientReturnsOnCall[len(fake.getClientArgsForCall)]
	fake.getClientArgsForCall = append(fake.getClientArgsForCall, struct {
	}{})
	stub := fake.getClientStub
	fakeReturns := fake.getClientReturns
	fake.recordInvocation("getClient", []interface{}{})
	fake.getClientMutex.Unlock()
	if stub != nil {
		return stub()
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeConfigInterface) GetClientCallCount() int {
	fake.getClientMutex.RLock()
	defer fake.getClientMutex.RUnlock()
	return len(fake.getClientArgsForCall)
}

func (fake *FakeConfigInterface) GetClientCalls(stub func() Client) {
	fake.getClientMutex.Lock()
	defer fake.getClientMutex.Unlock()
	fake.getClientStub = stub
}

func (fake *FakeConfigInterface) GetClientReturns(result1 Client) {
	fake.getClientMutex.Lock()
	defer fake.getClientMutex.Unlock()
	fake.getClientStub = nil
	fake.getClientReturns = struct {
		result1 Client
	}{result1}
}

func (fake *FakeConfigInterface) GetClientReturnsOnCall(i int, result1 Client) {
	fake.getClientMutex.Lock()
	defer fake.getClientMutex.Unlock()
	fake.getClientStub = nil
	if fake.getClientReturnsOnCall == nil {
		fake.getClientReturnsOnCall = make(map[int]struct {
			result1 Client
		})
	}
	fake.getClientReturnsOnCall[i] = struct {
		result1 Client
	}{result1}
}

func (fake *FakeConfigInterface) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.getClientMutex.RLock()
	defer fake.getClientMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakeConfigInterface) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ ConfigInterface = new(FakeConfigInterface)
