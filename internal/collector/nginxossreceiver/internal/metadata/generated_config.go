// Code generated by mdatagen. DO NOT EDIT.

package metadata

import (
	"go.opentelemetry.io/collector/confmap"
	"go.opentelemetry.io/collector/filter"
)

// MetricConfig provides common config for a particular metric.
type MetricConfig struct {
	Enabled bool `mapstructure:"enabled"`

	enabledSetByUser bool
}

func (ms *MetricConfig) Unmarshal(parser *confmap.Conf) error {
	if parser == nil {
		return nil
	}
	err := parser.Unmarshal(ms)
	if err != nil {
		return err
	}
	ms.enabledSetByUser = parser.IsSet("enabled")
	return nil
}

// MetricsConfig provides config for nginx metrics.
type MetricsConfig struct {
	NginxHTTPConnectionCount MetricConfig `mapstructure:"nginx.http.connection.count"`
	NginxHTTPConnections     MetricConfig `mapstructure:"nginx.http.connections"`
	NginxHTTPRequestCount    MetricConfig `mapstructure:"nginx.http.request.count"`
	NginxHTTPRequests        MetricConfig `mapstructure:"nginx.http.requests"`
	NginxHTTPResponseCount   MetricConfig `mapstructure:"nginx.http.response.count"`
}

func DefaultMetricsConfig() MetricsConfig {
	return MetricsConfig{
		NginxHTTPConnectionCount: MetricConfig{
			Enabled: true,
		},
		NginxHTTPConnections: MetricConfig{
			Enabled: true,
		},
		NginxHTTPRequestCount: MetricConfig{
			Enabled: true,
		},
		NginxHTTPRequests: MetricConfig{
			Enabled: true,
		},
		NginxHTTPResponseCount: MetricConfig{
			Enabled: true,
		},
	}
}

// ResourceAttributeConfig provides common config for a particular resource attribute.
type ResourceAttributeConfig struct {
	Enabled bool `mapstructure:"enabled"`
	// Experimental: MetricsInclude defines a list of filters for attribute values.
	// If the list is not empty, only metrics with matching resource attribute values will be emitted.
	MetricsInclude []filter.Config `mapstructure:"metrics_include"`
	// Experimental: MetricsExclude defines a list of filters for attribute values.
	// If the list is not empty, metrics with matching resource attribute values will not be emitted.
	// MetricsInclude has higher priority than MetricsExclude.
	MetricsExclude []filter.Config `mapstructure:"metrics_exclude"`

	enabledSetByUser bool
}

func (rac *ResourceAttributeConfig) Unmarshal(parser *confmap.Conf) error {
	if parser == nil {
		return nil
	}
	err := parser.Unmarshal(rac)
	if err != nil {
		return err
	}
	rac.enabledSetByUser = parser.IsSet("enabled")
	return nil
}

// ResourceAttributesConfig provides config for nginx resource attributes.
type ResourceAttributesConfig struct {
	InstanceID   ResourceAttributeConfig `mapstructure:"instance.id"`
	InstanceType ResourceAttributeConfig `mapstructure:"instance.type"`
}

func DefaultResourceAttributesConfig() ResourceAttributesConfig {
	return ResourceAttributesConfig{
		InstanceID: ResourceAttributeConfig{
			Enabled: true,
		},
		InstanceType: ResourceAttributeConfig{
			Enabled: true,
		},
	}
}

// MetricsBuilderConfig is a configuration for nginx metrics builder.
type MetricsBuilderConfig struct {
	Metrics            MetricsConfig            `mapstructure:"metrics"`
	ResourceAttributes ResourceAttributesConfig `mapstructure:"resource_attributes"`
}

func DefaultMetricsBuilderConfig() MetricsBuilderConfig {
	return MetricsBuilderConfig{
		Metrics:            DefaultMetricsConfig(),
		ResourceAttributes: DefaultResourceAttributesConfig(),
	}
}
