// Code generated by mdatagen. DO NOT EDIT.

package metadata

import (
	"time"

	"go.opentelemetry.io/collector/component"
	"go.opentelemetry.io/collector/pdata/pcommon"
	"go.opentelemetry.io/collector/pdata/pmetric"
	"go.opentelemetry.io/collector/receiver"
)

// AttributeNginxConnOutcome specifies the a value nginx.conn.outcome attribute.
type AttributeNginxConnOutcome int

const (
	_ AttributeNginxConnOutcome = iota
	AttributeNginxConnOutcomeACCEPTED
	AttributeNginxConnOutcomeACTIVE
	AttributeNginxConnOutcomeHANDLED
	AttributeNginxConnOutcomeREADING
	AttributeNginxConnOutcomeWRITING
	AttributeNginxConnOutcomeWAITING
)

// String returns the string representation of the AttributeNginxConnOutcome.
func (av AttributeNginxConnOutcome) String() string {
	switch av {
	case AttributeNginxConnOutcomeACCEPTED:
		return "ACCEPTED"
	case AttributeNginxConnOutcomeACTIVE:
		return "ACTIVE"
	case AttributeNginxConnOutcomeHANDLED:
		return "HANDLED"
	case AttributeNginxConnOutcomeREADING:
		return "READING"
	case AttributeNginxConnOutcomeWRITING:
		return "WRITING"
	case AttributeNginxConnOutcomeWAITING:
		return "WAITING"
	}
	return ""
}

// MapAttributeNginxConnOutcome is a helper map of string to AttributeNginxConnOutcome attribute value.
var MapAttributeNginxConnOutcome = map[string]AttributeNginxConnOutcome{
	"ACCEPTED": AttributeNginxConnOutcomeACCEPTED,
	"ACTIVE":   AttributeNginxConnOutcomeACTIVE,
	"HANDLED":  AttributeNginxConnOutcomeHANDLED,
	"READING":  AttributeNginxConnOutcomeREADING,
	"WRITING":  AttributeNginxConnOutcomeWRITING,
	"WAITING":  AttributeNginxConnOutcomeWAITING,
}

// AttributeNginxStatusRange specifies the a value nginx.status_range attribute.
type AttributeNginxStatusRange int

const (
	_ AttributeNginxStatusRange = iota
	AttributeNginxStatusRange1xx
	AttributeNginxStatusRange2xx
	AttributeNginxStatusRange3xx
	AttributeNginxStatusRange4xx
	AttributeNginxStatusRange5xx
)

// String returns the string representation of the AttributeNginxStatusRange.
func (av AttributeNginxStatusRange) String() string {
	switch av {
	case AttributeNginxStatusRange1xx:
		return "1xx"
	case AttributeNginxStatusRange2xx:
		return "2xx"
	case AttributeNginxStatusRange3xx:
		return "3xx"
	case AttributeNginxStatusRange4xx:
		return "4xx"
	case AttributeNginxStatusRange5xx:
		return "5xx"
	}
	return ""
}

// MapAttributeNginxStatusRange is a helper map of string to AttributeNginxStatusRange attribute value.
var MapAttributeNginxStatusRange = map[string]AttributeNginxStatusRange{
	"1xx": AttributeNginxStatusRange1xx,
	"2xx": AttributeNginxStatusRange2xx,
	"3xx": AttributeNginxStatusRange3xx,
	"4xx": AttributeNginxStatusRange4xx,
	"5xx": AttributeNginxStatusRange5xx,
}

type metricNginxHTTPConn struct {
	data     pmetric.Metric // data buffer for generated metric.
	config   MetricConfig   // metric config provided by user.
	capacity int            // max observed number of data points added to the metric.
}

// init fills nginx.http.conn metric with initial data.
func (m *metricNginxHTTPConn) init() {
	m.data.SetName("nginx.http.conn")
	m.data.SetDescription("The total number of connections.")
	m.data.SetUnit("connections")
	m.data.SetEmptySum()
	m.data.Sum().SetIsMonotonic(true)
	m.data.Sum().SetAggregationTemporality(pmetric.AggregationTemporalityCumulative)
	m.data.Sum().DataPoints().EnsureCapacity(m.capacity)
}

func (m *metricNginxHTTPConn) recordDataPoint(start pcommon.Timestamp, ts pcommon.Timestamp, val int64, nginxConnOutcomeAttributeValue string) {
	if !m.config.Enabled {
		return
	}
	dp := m.data.Sum().DataPoints().AppendEmpty()
	dp.SetStartTimestamp(start)
	dp.SetTimestamp(ts)
	dp.SetIntValue(val)
	dp.Attributes().PutStr("nginx.conn.outcome", nginxConnOutcomeAttributeValue)
}

// updateCapacity saves max length of data point slices that will be used for the slice capacity.
func (m *metricNginxHTTPConn) updateCapacity() {
	if m.data.Sum().DataPoints().Len() > m.capacity {
		m.capacity = m.data.Sum().DataPoints().Len()
	}
}

// emit appends recorded metric data to a metrics slice and prepares it for recording another set of data points.
func (m *metricNginxHTTPConn) emit(metrics pmetric.MetricSlice) {
	if m.config.Enabled && m.data.Sum().DataPoints().Len() > 0 {
		m.updateCapacity()
		m.data.MoveTo(metrics.AppendEmpty())
		m.init()
	}
}

func newMetricNginxHTTPConn(cfg MetricConfig) metricNginxHTTPConn {
	m := metricNginxHTTPConn{config: cfg}
	if cfg.Enabled {
		m.data = pmetric.NewMetric()
		m.init()
	}
	return m
}

type metricNginxHTTPConnCount struct {
	data     pmetric.Metric // data buffer for generated metric.
	config   MetricConfig   // metric config provided by user.
	capacity int            // max observed number of data points added to the metric.
}

// init fills nginx.http.conn.count metric with initial data.
func (m *metricNginxHTTPConnCount) init() {
	m.data.SetName("nginx.http.conn.count")
	m.data.SetDescription("The current number of connections.")
	m.data.SetUnit("connections")
	m.data.SetEmptyGauge()
	m.data.Gauge().DataPoints().EnsureCapacity(m.capacity)
}

func (m *metricNginxHTTPConnCount) recordDataPoint(start pcommon.Timestamp, ts pcommon.Timestamp, val int64, nginxConnOutcomeAttributeValue string) {
	if !m.config.Enabled {
		return
	}
	dp := m.data.Gauge().DataPoints().AppendEmpty()
	dp.SetStartTimestamp(start)
	dp.SetTimestamp(ts)
	dp.SetIntValue(val)
	dp.Attributes().PutStr("nginx.conn.outcome", nginxConnOutcomeAttributeValue)
}

// updateCapacity saves max length of data point slices that will be used for the slice capacity.
func (m *metricNginxHTTPConnCount) updateCapacity() {
	if m.data.Gauge().DataPoints().Len() > m.capacity {
		m.capacity = m.data.Gauge().DataPoints().Len()
	}
}

// emit appends recorded metric data to a metrics slice and prepares it for recording another set of data points.
func (m *metricNginxHTTPConnCount) emit(metrics pmetric.MetricSlice) {
	if m.config.Enabled && m.data.Gauge().DataPoints().Len() > 0 {
		m.updateCapacity()
		m.data.MoveTo(metrics.AppendEmpty())
		m.init()
	}
}

func newMetricNginxHTTPConnCount(cfg MetricConfig) metricNginxHTTPConnCount {
	m := metricNginxHTTPConnCount{config: cfg}
	if cfg.Enabled {
		m.data = pmetric.NewMetric()
		m.init()
	}
	return m
}

type metricNginxHTTPRequests struct {
	data     pmetric.Metric // data buffer for generated metric.
	config   MetricConfig   // metric config provided by user.
	capacity int            // max observed number of data points added to the metric.
}

// init fills nginx.http.requests metric with initial data.
func (m *metricNginxHTTPRequests) init() {
	m.data.SetName("nginx.http.requests")
	m.data.SetDescription("The total number of client requests received from clients.")
	m.data.SetUnit("requests")
	m.data.SetEmptySum()
	m.data.Sum().SetIsMonotonic(true)
	m.data.Sum().SetAggregationTemporality(pmetric.AggregationTemporalityCumulative)
}

func (m *metricNginxHTTPRequests) recordDataPoint(start pcommon.Timestamp, ts pcommon.Timestamp, val int64) {
	if !m.config.Enabled {
		return
	}
	dp := m.data.Sum().DataPoints().AppendEmpty()
	dp.SetStartTimestamp(start)
	dp.SetTimestamp(ts)
	dp.SetIntValue(val)
}

// updateCapacity saves max length of data point slices that will be used for the slice capacity.
func (m *metricNginxHTTPRequests) updateCapacity() {
	if m.data.Sum().DataPoints().Len() > m.capacity {
		m.capacity = m.data.Sum().DataPoints().Len()
	}
}

// emit appends recorded metric data to a metrics slice and prepares it for recording another set of data points.
func (m *metricNginxHTTPRequests) emit(metrics pmetric.MetricSlice) {
	if m.config.Enabled && m.data.Sum().DataPoints().Len() > 0 {
		m.updateCapacity()
		m.data.MoveTo(metrics.AppendEmpty())
		m.init()
	}
}

func newMetricNginxHTTPRequests(cfg MetricConfig) metricNginxHTTPRequests {
	m := metricNginxHTTPRequests{config: cfg}
	if cfg.Enabled {
		m.data = pmetric.NewMetric()
		m.init()
	}
	return m
}

type metricNginxHTTPResponseStatus struct {
	data     pmetric.Metric // data buffer for generated metric.
	config   MetricConfig   // metric config provided by user.
	capacity int            // max observed number of data points added to the metric.
}

// init fills nginx.http.response.status metric with initial data.
func (m *metricNginxHTTPResponseStatus) init() {
	m.data.SetName("nginx.http.response.status")
	m.data.SetDescription("The number of responses, grouped by status code range.")
	m.data.SetUnit("responses")
	m.data.SetEmptySum()
	m.data.Sum().SetIsMonotonic(true)
	m.data.Sum().SetAggregationTemporality(pmetric.AggregationTemporalityCumulative)
	m.data.Sum().DataPoints().EnsureCapacity(m.capacity)
}

func (m *metricNginxHTTPResponseStatus) recordDataPoint(start pcommon.Timestamp, ts pcommon.Timestamp, val int64, nginxStatusRangeAttributeValue string) {
	if !m.config.Enabled {
		return
	}
	dp := m.data.Sum().DataPoints().AppendEmpty()
	dp.SetStartTimestamp(start)
	dp.SetTimestamp(ts)
	dp.SetIntValue(val)
	dp.Attributes().PutStr("nginx.status_range", nginxStatusRangeAttributeValue)
}

// updateCapacity saves max length of data point slices that will be used for the slice capacity.
func (m *metricNginxHTTPResponseStatus) updateCapacity() {
	if m.data.Sum().DataPoints().Len() > m.capacity {
		m.capacity = m.data.Sum().DataPoints().Len()
	}
}

// emit appends recorded metric data to a metrics slice and prepares it for recording another set of data points.
func (m *metricNginxHTTPResponseStatus) emit(metrics pmetric.MetricSlice) {
	if m.config.Enabled && m.data.Sum().DataPoints().Len() > 0 {
		m.updateCapacity()
		m.data.MoveTo(metrics.AppendEmpty())
		m.init()
	}
}

func newMetricNginxHTTPResponseStatus(cfg MetricConfig) metricNginxHTTPResponseStatus {
	m := metricNginxHTTPResponseStatus{config: cfg}
	if cfg.Enabled {
		m.data = pmetric.NewMetric()
		m.init()
	}
	return m
}

// MetricsBuilder provides an interface for scrapers to report metrics while taking care of all the transformations
// required to produce metric representation defined in metadata and user config.
type MetricsBuilder struct {
	config                        MetricsBuilderConfig // config of the metrics builder.
	startTime                     pcommon.Timestamp    // start time that will be applied to all recorded data points.
	metricsCapacity               int                  // maximum observed number of metrics per resource.
	metricsBuffer                 pmetric.Metrics      // accumulates metrics data before emitting.
	buildInfo                     component.BuildInfo  // contains version information.
	metricNginxHTTPConn           metricNginxHTTPConn
	metricNginxHTTPConnCount      metricNginxHTTPConnCount
	metricNginxHTTPRequests       metricNginxHTTPRequests
	metricNginxHTTPResponseStatus metricNginxHTTPResponseStatus
}

// metricBuilderOption applies changes to default metrics builder.
type metricBuilderOption func(*MetricsBuilder)

// WithStartTime sets startTime on the metrics builder.
func WithStartTime(startTime pcommon.Timestamp) metricBuilderOption {
	return func(mb *MetricsBuilder) {
		mb.startTime = startTime
	}
}

func NewMetricsBuilder(mbc MetricsBuilderConfig, settings receiver.Settings, options ...metricBuilderOption) *MetricsBuilder {
	mb := &MetricsBuilder{
		config:                        mbc,
		startTime:                     pcommon.NewTimestampFromTime(time.Now()),
		metricsBuffer:                 pmetric.NewMetrics(),
		buildInfo:                     settings.BuildInfo,
		metricNginxHTTPConn:           newMetricNginxHTTPConn(mbc.Metrics.NginxHTTPConn),
		metricNginxHTTPConnCount:      newMetricNginxHTTPConnCount(mbc.Metrics.NginxHTTPConnCount),
		metricNginxHTTPRequests:       newMetricNginxHTTPRequests(mbc.Metrics.NginxHTTPRequests),
		metricNginxHTTPResponseStatus: newMetricNginxHTTPResponseStatus(mbc.Metrics.NginxHTTPResponseStatus),
	}

	for _, op := range options {
		op(mb)
	}
	return mb
}

// updateCapacity updates max length of metrics and resource attributes that will be used for the slice capacity.
func (mb *MetricsBuilder) updateCapacity(rm pmetric.ResourceMetrics) {
	if mb.metricsCapacity < rm.ScopeMetrics().At(0).Metrics().Len() {
		mb.metricsCapacity = rm.ScopeMetrics().At(0).Metrics().Len()
	}
}

// ResourceMetricsOption applies changes to provided resource metrics.
type ResourceMetricsOption func(pmetric.ResourceMetrics)

// WithResource sets the provided resource on the emitted ResourceMetrics.
// It's recommended to use ResourceBuilder to create the resource.
func WithResource(res pcommon.Resource) ResourceMetricsOption {
	return func(rm pmetric.ResourceMetrics) {
		res.CopyTo(rm.Resource())
	}
}

// WithStartTimeOverride overrides start time for all the resource metrics data points.
// This option should be only used if different start time has to be set on metrics coming from different resources.
func WithStartTimeOverride(start pcommon.Timestamp) ResourceMetricsOption {
	return func(rm pmetric.ResourceMetrics) {
		var dps pmetric.NumberDataPointSlice
		metrics := rm.ScopeMetrics().At(0).Metrics()
		for i := 0; i < metrics.Len(); i++ {
			switch metrics.At(i).Type() {
			case pmetric.MetricTypeGauge:
				dps = metrics.At(i).Gauge().DataPoints()
			case pmetric.MetricTypeSum:
				dps = metrics.At(i).Sum().DataPoints()
			}
			for j := 0; j < dps.Len(); j++ {
				dps.At(j).SetStartTimestamp(start)
			}
		}
	}
}

// EmitForResource saves all the generated metrics under a new resource and updates the internal state to be ready for
// recording another set of data points as part of another resource. This function can be helpful when one scraper
// needs to emit metrics from several resources. Otherwise calling this function is not required,
// just `Emit` function can be called instead.
// Resource attributes should be provided as ResourceMetricsOption arguments.
func (mb *MetricsBuilder) EmitForResource(rmo ...ResourceMetricsOption) {
	rm := pmetric.NewResourceMetrics()
	ils := rm.ScopeMetrics().AppendEmpty()
	ils.Scope().SetName("otelcol/nginxreceiver")
	ils.Scope().SetVersion(mb.buildInfo.Version)
	ils.Metrics().EnsureCapacity(mb.metricsCapacity)
	mb.metricNginxHTTPConn.emit(ils.Metrics())
	mb.metricNginxHTTPConnCount.emit(ils.Metrics())
	mb.metricNginxHTTPRequests.emit(ils.Metrics())
	mb.metricNginxHTTPResponseStatus.emit(ils.Metrics())

	for _, op := range rmo {
		op(rm)
	}

	if ils.Metrics().Len() > 0 {
		mb.updateCapacity(rm)
		rm.MoveTo(mb.metricsBuffer.ResourceMetrics().AppendEmpty())
	}
}

// Emit returns all the metrics accumulated by the metrics builder and updates the internal state to be ready for
// recording another set of metrics. This function will be responsible for applying all the transformations required to
// produce metric representation defined in metadata and user config, e.g. delta or cumulative.
func (mb *MetricsBuilder) Emit(rmo ...ResourceMetricsOption) pmetric.Metrics {
	mb.EmitForResource(rmo...)
	metrics := mb.metricsBuffer
	mb.metricsBuffer = pmetric.NewMetrics()
	return metrics
}

// RecordNginxHTTPConnDataPoint adds a data point to nginx.http.conn metric.
func (mb *MetricsBuilder) RecordNginxHTTPConnDataPoint(ts pcommon.Timestamp, val int64, nginxConnOutcomeAttributeValue AttributeNginxConnOutcome) {
	mb.metricNginxHTTPConn.recordDataPoint(mb.startTime, ts, val, nginxConnOutcomeAttributeValue.String())
}

// RecordNginxHTTPConnCountDataPoint adds a data point to nginx.http.conn.count metric.
func (mb *MetricsBuilder) RecordNginxHTTPConnCountDataPoint(ts pcommon.Timestamp, val int64, nginxConnOutcomeAttributeValue AttributeNginxConnOutcome) {
	mb.metricNginxHTTPConnCount.recordDataPoint(mb.startTime, ts, val, nginxConnOutcomeAttributeValue.String())
}

// RecordNginxHTTPRequestsDataPoint adds a data point to nginx.http.requests metric.
func (mb *MetricsBuilder) RecordNginxHTTPRequestsDataPoint(ts pcommon.Timestamp, val int64) {
	mb.metricNginxHTTPRequests.recordDataPoint(mb.startTime, ts, val)
}

// RecordNginxHTTPResponseStatusDataPoint adds a data point to nginx.http.response.status metric.
func (mb *MetricsBuilder) RecordNginxHTTPResponseStatusDataPoint(ts pcommon.Timestamp, val int64, nginxStatusRangeAttributeValue AttributeNginxStatusRange) {
	mb.metricNginxHTTPResponseStatus.recordDataPoint(mb.startTime, ts, val, nginxStatusRangeAttributeValue.String())
}

// Reset resets metrics builder to its initial state. It should be used when external metrics source is restarted,
// and metrics builder should update its startTime and reset it's internal state accordingly.
func (mb *MetricsBuilder) Reset(options ...metricBuilderOption) {
	mb.startTime = pcommon.NewTimestampFromTime(time.Now())
	for _, op := range options {
		op(mb)
	}
}
