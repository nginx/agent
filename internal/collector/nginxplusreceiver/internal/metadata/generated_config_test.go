// Code generated by mdatagen. DO NOT EDIT.

package metadata

import (
	"path/filepath"
	"testing"

	"github.com/google/go-cmp/cmp"
	"github.com/google/go-cmp/cmp/cmpopts"
	"github.com/stretchr/testify/require"
	"go.opentelemetry.io/collector/confmap/confmaptest"
)

func TestMetricsBuilderConfig(t *testing.T) {
	tests := []struct {
		name string
		want MetricsBuilderConfig
	}{
		{
			name: "default",
			want: DefaultMetricsBuilderConfig(),
		},
		{
			name: "all_set",
			want: MetricsBuilderConfig{
				Metrics: MetricsConfig{
					NginxCacheBytesRead:                    MetricConfig{Enabled: true},
					NginxCacheMemoryLimit:                  MetricConfig{Enabled: true},
					NginxCacheMemoryUsage:                  MetricConfig{Enabled: true},
					NginxCacheResponses:                    MetricConfig{Enabled: true},
					NginxConfigReloads:                     MetricConfig{Enabled: true},
					NginxHTTPConnectionCount:               MetricConfig{Enabled: true},
					NginxHTTPConnections:                   MetricConfig{Enabled: true},
					NginxHTTPLimitConnRequests:             MetricConfig{Enabled: true},
					NginxHTTPLimitReqRequests:              MetricConfig{Enabled: true},
					NginxHTTPRequestCount:                  MetricConfig{Enabled: true},
					NginxHTTPRequestDiscarded:              MetricConfig{Enabled: true},
					NginxHTTPRequestIo:                     MetricConfig{Enabled: true},
					NginxHTTPRequestProcessingCount:        MetricConfig{Enabled: true},
					NginxHTTPRequests:                      MetricConfig{Enabled: true},
					NginxHTTPResponseStatus:                MetricConfig{Enabled: true},
					NginxHTTPResponses:                     MetricConfig{Enabled: true},
					NginxHTTPUpstreamKeepaliveCount:        MetricConfig{Enabled: true},
					NginxHTTPUpstreamPeerConnectionCount:   MetricConfig{Enabled: true},
					NginxHTTPUpstreamPeerCount:             MetricConfig{Enabled: true},
					NginxHTTPUpstreamPeerFails:             MetricConfig{Enabled: true},
					NginxHTTPUpstreamPeerHeaderTime:        MetricConfig{Enabled: true},
					NginxHTTPUpstreamPeerHealthChecks:      MetricConfig{Enabled: true},
					NginxHTTPUpstreamPeerIo:                MetricConfig{Enabled: true},
					NginxHTTPUpstreamPeerRequests:          MetricConfig{Enabled: true},
					NginxHTTPUpstreamPeerResponseTime:      MetricConfig{Enabled: true},
					NginxHTTPUpstreamPeerResponses:         MetricConfig{Enabled: true},
					NginxHTTPUpstreamPeerState:             MetricConfig{Enabled: true},
					NginxHTTPUpstreamPeerUnavailables:      MetricConfig{Enabled: true},
					NginxHTTPUpstreamQueueLimit:            MetricConfig{Enabled: true},
					NginxHTTPUpstreamQueueOverflows:        MetricConfig{Enabled: true},
					NginxHTTPUpstreamQueueUsage:            MetricConfig{Enabled: true},
					NginxHTTPUpstreamZombieCount:           MetricConfig{Enabled: true},
					NginxSlabPageFree:                      MetricConfig{Enabled: true},
					NginxSlabPageLimit:                     MetricConfig{Enabled: true},
					NginxSlabPageUsage:                     MetricConfig{Enabled: true},
					NginxSlabPageUtilization:               MetricConfig{Enabled: true},
					NginxSlabSlotAllocations:               MetricConfig{Enabled: true},
					NginxSlabSlotFree:                      MetricConfig{Enabled: true},
					NginxSlabSlotUsage:                     MetricConfig{Enabled: true},
					NginxSslCertificateVerifyFailures:      MetricConfig{Enabled: true},
					NginxSslHandshakes:                     MetricConfig{Enabled: true},
					NginxStreamConnectionAccepted:          MetricConfig{Enabled: true},
					NginxStreamConnectionDiscarded:         MetricConfig{Enabled: true},
					NginxStreamConnectionProcessingCount:   MetricConfig{Enabled: true},
					NginxStreamIo:                          MetricConfig{Enabled: true},
					NginxStreamSessionStatus:               MetricConfig{Enabled: true},
					NginxStreamUpstreamPeerConnectionCount: MetricConfig{Enabled: true},
					NginxStreamUpstreamPeerConnectionTime:  MetricConfig{Enabled: true},
					NginxStreamUpstreamPeerConnections:     MetricConfig{Enabled: true},
					NginxStreamUpstreamPeerCount:           MetricConfig{Enabled: true},
					NginxStreamUpstreamPeerFails:           MetricConfig{Enabled: true},
					NginxStreamUpstreamPeerHealthChecks:    MetricConfig{Enabled: true},
					NginxStreamUpstreamPeerIo:              MetricConfig{Enabled: true},
					NginxStreamUpstreamPeerResponseTime:    MetricConfig{Enabled: true},
					NginxStreamUpstreamPeerState:           MetricConfig{Enabled: true},
					NginxStreamUpstreamPeerTtfbTime:        MetricConfig{Enabled: true},
					NginxStreamUpstreamPeerUnavailables:    MetricConfig{Enabled: true},
					NginxStreamUpstreamZombieCount:         MetricConfig{Enabled: true},
				},
				ResourceAttributes: ResourceAttributesConfig{
					InstanceID:   ResourceAttributeConfig{Enabled: true},
					InstanceType: ResourceAttributeConfig{Enabled: true},
				},
			},
		},
		{
			name: "none_set",
			want: MetricsBuilderConfig{
				Metrics: MetricsConfig{
					NginxCacheBytesRead:                    MetricConfig{Enabled: false},
					NginxCacheMemoryLimit:                  MetricConfig{Enabled: false},
					NginxCacheMemoryUsage:                  MetricConfig{Enabled: false},
					NginxCacheResponses:                    MetricConfig{Enabled: false},
					NginxConfigReloads:                     MetricConfig{Enabled: false},
					NginxHTTPConnectionCount:               MetricConfig{Enabled: false},
					NginxHTTPConnections:                   MetricConfig{Enabled: false},
					NginxHTTPLimitConnRequests:             MetricConfig{Enabled: false},
					NginxHTTPLimitReqRequests:              MetricConfig{Enabled: false},
					NginxHTTPRequestCount:                  MetricConfig{Enabled: false},
					NginxHTTPRequestDiscarded:              MetricConfig{Enabled: false},
					NginxHTTPRequestIo:                     MetricConfig{Enabled: false},
					NginxHTTPRequestProcessingCount:        MetricConfig{Enabled: false},
					NginxHTTPRequests:                      MetricConfig{Enabled: false},
					NginxHTTPResponseStatus:                MetricConfig{Enabled: false},
					NginxHTTPResponses:                     MetricConfig{Enabled: false},
					NginxHTTPUpstreamKeepaliveCount:        MetricConfig{Enabled: false},
					NginxHTTPUpstreamPeerConnectionCount:   MetricConfig{Enabled: false},
					NginxHTTPUpstreamPeerCount:             MetricConfig{Enabled: false},
					NginxHTTPUpstreamPeerFails:             MetricConfig{Enabled: false},
					NginxHTTPUpstreamPeerHeaderTime:        MetricConfig{Enabled: false},
					NginxHTTPUpstreamPeerHealthChecks:      MetricConfig{Enabled: false},
					NginxHTTPUpstreamPeerIo:                MetricConfig{Enabled: false},
					NginxHTTPUpstreamPeerRequests:          MetricConfig{Enabled: false},
					NginxHTTPUpstreamPeerResponseTime:      MetricConfig{Enabled: false},
					NginxHTTPUpstreamPeerResponses:         MetricConfig{Enabled: false},
					NginxHTTPUpstreamPeerState:             MetricConfig{Enabled: false},
					NginxHTTPUpstreamPeerUnavailables:      MetricConfig{Enabled: false},
					NginxHTTPUpstreamQueueLimit:            MetricConfig{Enabled: false},
					NginxHTTPUpstreamQueueOverflows:        MetricConfig{Enabled: false},
					NginxHTTPUpstreamQueueUsage:            MetricConfig{Enabled: false},
					NginxHTTPUpstreamZombieCount:           MetricConfig{Enabled: false},
					NginxSlabPageFree:                      MetricConfig{Enabled: false},
					NginxSlabPageLimit:                     MetricConfig{Enabled: false},
					NginxSlabPageUsage:                     MetricConfig{Enabled: false},
					NginxSlabPageUtilization:               MetricConfig{Enabled: false},
					NginxSlabSlotAllocations:               MetricConfig{Enabled: false},
					NginxSlabSlotFree:                      MetricConfig{Enabled: false},
					NginxSlabSlotUsage:                     MetricConfig{Enabled: false},
					NginxSslCertificateVerifyFailures:      MetricConfig{Enabled: false},
					NginxSslHandshakes:                     MetricConfig{Enabled: false},
					NginxStreamConnectionAccepted:          MetricConfig{Enabled: false},
					NginxStreamConnectionDiscarded:         MetricConfig{Enabled: false},
					NginxStreamConnectionProcessingCount:   MetricConfig{Enabled: false},
					NginxStreamIo:                          MetricConfig{Enabled: false},
					NginxStreamSessionStatus:               MetricConfig{Enabled: false},
					NginxStreamUpstreamPeerConnectionCount: MetricConfig{Enabled: false},
					NginxStreamUpstreamPeerConnectionTime:  MetricConfig{Enabled: false},
					NginxStreamUpstreamPeerConnections:     MetricConfig{Enabled: false},
					NginxStreamUpstreamPeerCount:           MetricConfig{Enabled: false},
					NginxStreamUpstreamPeerFails:           MetricConfig{Enabled: false},
					NginxStreamUpstreamPeerHealthChecks:    MetricConfig{Enabled: false},
					NginxStreamUpstreamPeerIo:              MetricConfig{Enabled: false},
					NginxStreamUpstreamPeerResponseTime:    MetricConfig{Enabled: false},
					NginxStreamUpstreamPeerState:           MetricConfig{Enabled: false},
					NginxStreamUpstreamPeerTtfbTime:        MetricConfig{Enabled: false},
					NginxStreamUpstreamPeerUnavailables:    MetricConfig{Enabled: false},
					NginxStreamUpstreamZombieCount:         MetricConfig{Enabled: false},
				},
				ResourceAttributes: ResourceAttributesConfig{
					InstanceID:   ResourceAttributeConfig{Enabled: false},
					InstanceType: ResourceAttributeConfig{Enabled: false},
				},
			},
		},
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			cfg := loadMetricsBuilderConfig(t, tt.name)
			diff := cmp.Diff(tt.want, cfg, cmpopts.IgnoreUnexported(MetricConfig{}, ResourceAttributeConfig{}))
			require.Emptyf(t, diff, "Config mismatch (-expected +actual):\n%s", diff)
		})
	}
}

func loadMetricsBuilderConfig(t *testing.T, name string) MetricsBuilderConfig {
	cm, err := confmaptest.LoadConf(filepath.Join("testdata", "config.yaml"))
	require.NoError(t, err)
	sub, err := cm.Sub(name)
	require.NoError(t, err)
	cfg := DefaultMetricsBuilderConfig()
	require.NoError(t, sub.Unmarshal(&cfg))
	return cfg
}

func TestResourceAttributesConfig(t *testing.T) {
	tests := []struct {
		name string
		want ResourceAttributesConfig
	}{
		{
			name: "default",
			want: DefaultResourceAttributesConfig(),
		},
		{
			name: "all_set",
			want: ResourceAttributesConfig{
				InstanceID:   ResourceAttributeConfig{Enabled: true},
				InstanceType: ResourceAttributeConfig{Enabled: true},
			},
		},
		{
			name: "none_set",
			want: ResourceAttributesConfig{
				InstanceID:   ResourceAttributeConfig{Enabled: false},
				InstanceType: ResourceAttributeConfig{Enabled: false},
			},
		},
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			cfg := loadResourceAttributesConfig(t, tt.name)
			diff := cmp.Diff(tt.want, cfg, cmpopts.IgnoreUnexported(ResourceAttributeConfig{}))
			require.Emptyf(t, diff, "Config mismatch (-expected +actual):\n%s", diff)
		})
	}
}

func loadResourceAttributesConfig(t *testing.T, name string) ResourceAttributesConfig {
	cm, err := confmaptest.LoadConf(filepath.Join("testdata", "config.yaml"))
	require.NoError(t, err)
	sub, err := cm.Sub(name)
	require.NoError(t, err)
	sub, err = sub.Sub("resource_attributes")
	require.NoError(t, err)
	cfg := DefaultResourceAttributesConfig()
	require.NoError(t, sub.Unmarshal(&cfg))
	return cfg
}
