// Code generated by mdatagen. DO NOT EDIT.

package metadata

import (
	"testing"

	"github.com/stretchr/testify/assert"
	"go.opentelemetry.io/collector/pdata/pcommon"
	"go.opentelemetry.io/collector/pdata/pmetric"
	"go.opentelemetry.io/collector/receiver/receivertest"
	"go.uber.org/zap"
	"go.uber.org/zap/zaptest/observer"
)

type testDataSet int

const (
	testDataSetDefault testDataSet = iota
	testDataSetAll
	testDataSetNone
)

func TestMetricsBuilder(t *testing.T) {
	tests := []struct {
		name        string
		metricsSet  testDataSet
		resAttrsSet testDataSet
		expectEmpty bool
	}{
		{
			name: "default",
		},
		{
			name:        "all_set",
			metricsSet:  testDataSetAll,
			resAttrsSet: testDataSetAll,
		},
		{
			name:        "none_set",
			metricsSet:  testDataSetNone,
			resAttrsSet: testDataSetNone,
			expectEmpty: true,
		},
	}
	for _, test := range tests {
		t.Run(test.name, func(t *testing.T) {
			start := pcommon.Timestamp(1_000_000_000)
			ts := pcommon.Timestamp(1_000_001_000)
			observedZapCore, observedLogs := observer.New(zap.WarnLevel)
			settings := receivertest.NewNopSettings()
			settings.Logger = zap.New(observedZapCore)
			mb := NewMetricsBuilder(loadMetricsBuilderConfig(t, test.name), settings, WithStartTime(start))

			expectedWarnings := 0

			assert.Equal(t, expectedWarnings, observedLogs.Len())

			defaultMetricsCount := 0
			allMetricsCount := 0

			defaultMetricsCount++
			allMetricsCount++
			mb.RecordNginxCacheBytesDataPoint(ts, 1, AttributeNginxCacheOutcomeBYPASS, "nginx.cache.name-val")

			defaultMetricsCount++
			allMetricsCount++
			mb.RecordNginxCacheMemoryLimitDataPoint(ts, 1, "nginx.cache.name-val")

			defaultMetricsCount++
			allMetricsCount++
			mb.RecordNginxCacheMemoryUsageDataPoint(ts, 1, "nginx.cache.name-val")

			defaultMetricsCount++
			allMetricsCount++
			mb.RecordNginxCacheResponsesDataPoint(ts, 1, AttributeNginxCacheOutcomeBYPASS, "nginx.cache.name-val")

			defaultMetricsCount++
			allMetricsCount++
			mb.RecordNginxConfigReloadsDataPoint(ts, 1)

			defaultMetricsCount++
			allMetricsCount++
			mb.RecordNginxHTTPConnDataPoint(ts, 1, AttributeNginxConnOutcomeACCEPTED)

			defaultMetricsCount++
			allMetricsCount++
			mb.RecordNginxHTTPConnCountDataPoint(ts, 1, AttributeNginxConnOutcomeACCEPTED)

			defaultMetricsCount++
			allMetricsCount++
			mb.RecordNginxHTTPLimitConnRequestsDataPoint(ts, 1, AttributeNginxLimitConnOutcomePASSED, "nginx.zone.name-val")

			defaultMetricsCount++
			allMetricsCount++
			mb.RecordNginxHTTPLimitReqRequestsDataPoint(ts, 1, AttributeNginxLimitReqOutcomePASSED, "nginx.zone.name-val")

			defaultMetricsCount++
			allMetricsCount++
			mb.RecordNginxHTTPRequestByteIoDataPoint(ts, 1, AttributeNginxByteIoDirectionRX, "nginx.zone.name-val", AttributeNginxZoneTypeSERVER)

			defaultMetricsCount++
			allMetricsCount++
			mb.RecordNginxHTTPRequestDiscardedDataPoint(ts, 1, "nginx.zone.name-val", AttributeNginxZoneTypeSERVER)

			defaultMetricsCount++
			allMetricsCount++
			mb.RecordNginxHTTPRequestProcessingCountDataPoint(ts, 1, "nginx.zone.name-val", AttributeNginxZoneTypeSERVER)

			defaultMetricsCount++
			allMetricsCount++
			mb.RecordNginxHTTPRequestsDataPoint(ts, 1, "nginx.zone.name-val", AttributeNginxZoneTypeSERVER)

			defaultMetricsCount++
			allMetricsCount++
			mb.RecordNginxHTTPRequestsCountDataPoint(ts, 1)

			defaultMetricsCount++
			allMetricsCount++
			mb.RecordNginxHTTPResponseStatusDataPoint(ts, 1, AttributeNginxStatusRange1xx, "nginx.zone.name-val", AttributeNginxZoneTypeSERVER)

			defaultMetricsCount++
			allMetricsCount++
			mb.RecordNginxHTTPResponsesDataPoint(ts, 1, "nginx.zone.name-val", AttributeNginxZoneTypeSERVER)

			defaultMetricsCount++
			allMetricsCount++
			mb.RecordNginxHTTPUpstreamKeepaliveCountDataPoint(ts, 1, "nginx.zone.name-val", "nginx.upstream.name-val")

			defaultMetricsCount++
			allMetricsCount++
			mb.RecordNginxHTTPUpstreamPeerByteIoDataPoint(ts, 1, AttributeNginxByteIoDirectionRX, "nginx.zone.name-val", "nginx.upstream.name-val", "nginx.peer.address-val", "nginx.peer.name-val")

			defaultMetricsCount++
			allMetricsCount++
			mb.RecordNginxHTTPUpstreamPeerConnCountDataPoint(ts, 1, "nginx.zone.name-val", "nginx.upstream.name-val", "nginx.peer.address-val", "nginx.peer.name-val")

			defaultMetricsCount++
			allMetricsCount++
			mb.RecordNginxHTTPUpstreamPeerCountDataPoint(ts, 1, AttributeNginxPeerStateCHECKING, "nginx.zone.name-val", "nginx.upstream.name-val")

			defaultMetricsCount++
			allMetricsCount++
			mb.RecordNginxHTTPUpstreamPeerFailsDataPoint(ts, 1, "nginx.zone.name-val", "nginx.upstream.name-val", "nginx.peer.address-val", "nginx.peer.name-val")

			defaultMetricsCount++
			allMetricsCount++
			mb.RecordNginxHTTPUpstreamPeerHeaderTimeDataPoint(ts, 1, "nginx.zone.name-val", "nginx.upstream.name-val", "nginx.peer.address-val", "nginx.peer.name-val")

			defaultMetricsCount++
			allMetricsCount++
			mb.RecordNginxHTTPUpstreamPeerHealthChecksDataPoint(ts, 1, AttributeNginxHealthCheckUNHEALTHY, "nginx.zone.name-val", "nginx.upstream.name-val", "nginx.peer.address-val", "nginx.peer.name-val")

			defaultMetricsCount++
			allMetricsCount++
			mb.RecordNginxHTTPUpstreamPeerRequestsDataPoint(ts, 1, "nginx.zone.name-val", "nginx.upstream.name-val", "nginx.peer.address-val", "nginx.peer.name-val")

			defaultMetricsCount++
			allMetricsCount++
			mb.RecordNginxHTTPUpstreamPeerResponseTimeDataPoint(ts, 1, "nginx.zone.name-val", "nginx.upstream.name-val", "nginx.peer.address-val", "nginx.peer.name-val")

			defaultMetricsCount++
			allMetricsCount++
			mb.RecordNginxHTTPUpstreamPeerResponsesDataPoint(ts, 1, AttributeNginxStatusRange1xx, "nginx.zone.name-val", "nginx.upstream.name-val", "nginx.peer.address-val", "nginx.peer.name-val")

			defaultMetricsCount++
			allMetricsCount++
			mb.RecordNginxHTTPUpstreamPeerStateDataPoint(ts, 1, AttributeNginxPeerStateCHECKING, "nginx.zone.name-val", "nginx.upstream.name-val", "nginx.peer.address-val", "nginx.peer.name-val")

			defaultMetricsCount++
			allMetricsCount++
			mb.RecordNginxHTTPUpstreamPeerUnavailablesDataPoint(ts, 1, "nginx.zone.name-val", "nginx.upstream.name-val", "nginx.peer.address-val", "nginx.peer.name-val")

			defaultMetricsCount++
			allMetricsCount++
			mb.RecordNginxHTTPUpstreamQueueLimitDataPoint(ts, 1, "nginx.zone.name-val", "nginx.upstream.name-val")

			defaultMetricsCount++
			allMetricsCount++
			mb.RecordNginxHTTPUpstreamQueueOverflowsDataPoint(ts, 1, "nginx.zone.name-val", "nginx.upstream.name-val")

			defaultMetricsCount++
			allMetricsCount++
			mb.RecordNginxHTTPUpstreamQueueUsageDataPoint(ts, 1, "nginx.zone.name-val", "nginx.upstream.name-val")

			defaultMetricsCount++
			allMetricsCount++
			mb.RecordNginxHTTPUpstreamZombieCountDataPoint(ts, 1, "nginx.zone.name-val", "nginx.upstream.name-val")

			defaultMetricsCount++
			allMetricsCount++
			mb.RecordNginxSlabPageFreeDataPoint(ts, 1, "nginx.zone.name-val")

			defaultMetricsCount++
			allMetricsCount++
			mb.RecordNginxSlabPageLimitDataPoint(ts, 1, "nginx.zone.name-val")

			defaultMetricsCount++
			allMetricsCount++
			mb.RecordNginxSlabPageUsageDataPoint(ts, 1, "nginx.zone.name-val")

			defaultMetricsCount++
			allMetricsCount++
			mb.RecordNginxSlabPageUtilizationDataPoint(ts, 1, "nginx.zone.name-val")

			defaultMetricsCount++
			allMetricsCount++
			mb.RecordNginxSlabSlotAllocationsDataPoint(ts, 1, 21, AttributeNginxSlabSlotAllocationResultFAILURE, "nginx.zone.name-val")

			defaultMetricsCount++
			allMetricsCount++
			mb.RecordNginxSlabSlotFreeDataPoint(ts, 1, 21, "nginx.zone.name-val")

			defaultMetricsCount++
			allMetricsCount++
			mb.RecordNginxSlabSlotUsageDataPoint(ts, 1, 21, "nginx.zone.name-val")

			defaultMetricsCount++
			allMetricsCount++
			mb.RecordNginxSslCertificateVerifyFailuresDataPoint(ts, 1, AttributeNginxSslVerifyFailureReasonNOCERT)

			defaultMetricsCount++
			allMetricsCount++
			mb.RecordNginxSslHandshakesDataPoint(ts, 1, AttributeNginxSslStatusFAILED, AttributeNginxSslHandshakeReasonNOCOMMONPROTOCOL)

			defaultMetricsCount++
			allMetricsCount++
			mb.RecordNginxStreamByteIoDataPoint(ts, 1, AttributeNginxByteIoDirectionRX, "nginx.zone.name-val")

			defaultMetricsCount++
			allMetricsCount++
			mb.RecordNginxStreamConnectionAcceptedDataPoint(ts, 1, "nginx.zone.name-val")

			defaultMetricsCount++
			allMetricsCount++
			mb.RecordNginxStreamConnectionDiscardedDataPoint(ts, 1, "nginx.zone.name-val")

			defaultMetricsCount++
			allMetricsCount++
			mb.RecordNginxStreamConnectionProcessingCountDataPoint(ts, 1, "nginx.zone.name-val")

			defaultMetricsCount++
			allMetricsCount++
			mb.RecordNginxStreamSessionStatusDataPoint(ts, 1, AttributeNginxStatusRange1xx, "nginx.zone.name-val")

			defaultMetricsCount++
			allMetricsCount++
			mb.RecordNginxStreamUpstreamPeerByteIoDataPoint(ts, 1, AttributeNginxByteIoDirectionRX, "nginx.zone.name-val", "nginx.upstream.name-val", "nginx.peer.address-val", "nginx.peer.name-val")

			defaultMetricsCount++
			allMetricsCount++
			mb.RecordNginxStreamUpstreamPeerConnCountDataPoint(ts, 1, "nginx.zone.name-val", "nginx.upstream.name-val", "nginx.peer.address-val", "nginx.peer.name-val")

			defaultMetricsCount++
			allMetricsCount++
			mb.RecordNginxStreamUpstreamPeerConnTimeDataPoint(ts, 1, "nginx.zone.name-val", "nginx.upstream.name-val", "nginx.peer.address-val", "nginx.peer.name-val")

			defaultMetricsCount++
			allMetricsCount++
			mb.RecordNginxStreamUpstreamPeerConnsDataPoint(ts, 1, "nginx.zone.name-val", "nginx.upstream.name-val", "nginx.peer.address-val", "nginx.peer.name-val")

			defaultMetricsCount++
			allMetricsCount++
			mb.RecordNginxStreamUpstreamPeerCountDataPoint(ts, 1, AttributeNginxPeerStateCHECKING, "nginx.zone.name-val", "nginx.upstream.name-val")

			defaultMetricsCount++
			allMetricsCount++
			mb.RecordNginxStreamUpstreamPeerFailsDataPoint(ts, 1, "nginx.zone.name-val", "nginx.upstream.name-val", "nginx.peer.address-val")

			defaultMetricsCount++
			allMetricsCount++
			mb.RecordNginxStreamUpstreamPeerHealthChecksDataPoint(ts, 1, AttributeNginxHealthCheckUNHEALTHY, "nginx.zone.name-val", "nginx.upstream.name-val", "nginx.peer.address-val", "nginx.peer.name-val")

			defaultMetricsCount++
			allMetricsCount++
			mb.RecordNginxStreamUpstreamPeerResponseTimeDataPoint(ts, 1, "nginx.zone.name-val", "nginx.upstream.name-val", "nginx.peer.address-val", "nginx.peer.name-val")

			defaultMetricsCount++
			allMetricsCount++
			mb.RecordNginxStreamUpstreamPeerStateDataPoint(ts, 1, AttributeNginxPeerStateCHECKING, "nginx.zone.name-val", "nginx.upstream.name-val", "nginx.peer.address-val", "nginx.peer.name-val")

			defaultMetricsCount++
			allMetricsCount++
			mb.RecordNginxStreamUpstreamPeerTtfbTimeDataPoint(ts, 1, "nginx.zone.name-val", "nginx.upstream.name-val", "nginx.peer.address-val", "nginx.peer.name-val")

			defaultMetricsCount++
			allMetricsCount++
			mb.RecordNginxStreamUpstreamPeerUnavailableDataPoint(ts, 1, "nginx.zone.name-val", "nginx.upstream.name-val", "nginx.peer.address-val", "nginx.peer.name-val")

			defaultMetricsCount++
			allMetricsCount++
			mb.RecordNginxStreamUpstreamZombieCountDataPoint(ts, 1, "nginx.zone.name-val", "nginx.upstream.name-val")

			res := pcommon.NewResource()
			metrics := mb.Emit(WithResource(res))

			if test.expectEmpty {
				assert.Equal(t, 0, metrics.ResourceMetrics().Len())
				return
			}

			assert.Equal(t, 1, metrics.ResourceMetrics().Len())
			rm := metrics.ResourceMetrics().At(0)
			assert.Equal(t, res, rm.Resource())
			assert.Equal(t, 1, rm.ScopeMetrics().Len())
			ms := rm.ScopeMetrics().At(0).Metrics()
			if test.metricsSet == testDataSetDefault {
				assert.Equal(t, defaultMetricsCount, ms.Len())
			}
			if test.metricsSet == testDataSetAll {
				assert.Equal(t, allMetricsCount, ms.Len())
			}
			validatedMetrics := make(map[string]bool)
			for i := 0; i < ms.Len(); i++ {
				switch ms.At(i).Name() {
				case "nginx.cache.bytes":
					assert.False(t, validatedMetrics["nginx.cache.bytes"], "Found a duplicate in the metrics slice: nginx.cache.bytes")
					validatedMetrics["nginx.cache.bytes"] = true
					assert.Equal(t, pmetric.MetricTypeSum, ms.At(i).Type())
					assert.Equal(t, 1, ms.At(i).Sum().DataPoints().Len())
					assert.Equal(t, "The total number of bytes read from the cache or proxied server.", ms.At(i).Description())
					assert.Equal(t, "bytes", ms.At(i).Unit())
					assert.Equal(t, true, ms.At(i).Sum().IsMonotonic())
					assert.Equal(t, pmetric.AggregationTemporalityCumulative, ms.At(i).Sum().AggregationTemporality())
					dp := ms.At(i).Sum().DataPoints().At(0)
					assert.Equal(t, start, dp.StartTimestamp())
					assert.Equal(t, ts, dp.Timestamp())
					assert.Equal(t, pmetric.NumberDataPointValueTypeInt, dp.ValueType())
					assert.Equal(t, int64(1), dp.IntValue())
					attrVal, ok := dp.Attributes().Get("nginx.cache.outcome")
					assert.True(t, ok)
					assert.EqualValues(t, "BYPASS", attrVal.Str())
					attrVal, ok = dp.Attributes().Get("nginx.cache.name")
					assert.True(t, ok)
					assert.EqualValues(t, "nginx.cache.name-val", attrVal.Str())
				case "nginx.cache.memory.limit":
					assert.False(t, validatedMetrics["nginx.cache.memory.limit"], "Found a duplicate in the metrics slice: nginx.cache.memory.limit")
					validatedMetrics["nginx.cache.memory.limit"] = true
					assert.Equal(t, pmetric.MetricTypeGauge, ms.At(i).Type())
					assert.Equal(t, 1, ms.At(i).Gauge().DataPoints().Len())
					assert.Equal(t, "The limit on the maximum size of the cache specified in the configuration.", ms.At(i).Description())
					assert.Equal(t, "bytes", ms.At(i).Unit())
					dp := ms.At(i).Gauge().DataPoints().At(0)
					assert.Equal(t, start, dp.StartTimestamp())
					assert.Equal(t, ts, dp.Timestamp())
					assert.Equal(t, pmetric.NumberDataPointValueTypeInt, dp.ValueType())
					assert.Equal(t, int64(1), dp.IntValue())
					attrVal, ok := dp.Attributes().Get("nginx.cache.name")
					assert.True(t, ok)
					assert.EqualValues(t, "nginx.cache.name-val", attrVal.Str())
				case "nginx.cache.memory.usage":
					assert.False(t, validatedMetrics["nginx.cache.memory.usage"], "Found a duplicate in the metrics slice: nginx.cache.memory.usage")
					validatedMetrics["nginx.cache.memory.usage"] = true
					assert.Equal(t, pmetric.MetricTypeGauge, ms.At(i).Type())
					assert.Equal(t, 1, ms.At(i).Gauge().DataPoints().Len())
					assert.Equal(t, "The current size of the cache.", ms.At(i).Description())
					assert.Equal(t, "bytes", ms.At(i).Unit())
					dp := ms.At(i).Gauge().DataPoints().At(0)
					assert.Equal(t, start, dp.StartTimestamp())
					assert.Equal(t, ts, dp.Timestamp())
					assert.Equal(t, pmetric.NumberDataPointValueTypeInt, dp.ValueType())
					assert.Equal(t, int64(1), dp.IntValue())
					attrVal, ok := dp.Attributes().Get("nginx.cache.name")
					assert.True(t, ok)
					assert.EqualValues(t, "nginx.cache.name-val", attrVal.Str())
				case "nginx.cache.responses":
					assert.False(t, validatedMetrics["nginx.cache.responses"], "Found a duplicate in the metrics slice: nginx.cache.responses")
					validatedMetrics["nginx.cache.responses"] = true
					assert.Equal(t, pmetric.MetricTypeSum, ms.At(i).Type())
					assert.Equal(t, 1, ms.At(i).Sum().DataPoints().Len())
					assert.Equal(t, "The total number of responses read from the cache or proxied server.", ms.At(i).Description())
					assert.Equal(t, "responses", ms.At(i).Unit())
					assert.Equal(t, true, ms.At(i).Sum().IsMonotonic())
					assert.Equal(t, pmetric.AggregationTemporalityCumulative, ms.At(i).Sum().AggregationTemporality())
					dp := ms.At(i).Sum().DataPoints().At(0)
					assert.Equal(t, start, dp.StartTimestamp())
					assert.Equal(t, ts, dp.Timestamp())
					assert.Equal(t, pmetric.NumberDataPointValueTypeInt, dp.ValueType())
					assert.Equal(t, int64(1), dp.IntValue())
					attrVal, ok := dp.Attributes().Get("nginx.cache.outcome")
					assert.True(t, ok)
					assert.EqualValues(t, "BYPASS", attrVal.Str())
					attrVal, ok = dp.Attributes().Get("nginx.cache.name")
					assert.True(t, ok)
					assert.EqualValues(t, "nginx.cache.name-val", attrVal.Str())
				case "nginx.config.reloads":
					assert.False(t, validatedMetrics["nginx.config.reloads"], "Found a duplicate in the metrics slice: nginx.config.reloads")
					validatedMetrics["nginx.config.reloads"] = true
					assert.Equal(t, pmetric.MetricTypeSum, ms.At(i).Type())
					assert.Equal(t, 1, ms.At(i).Sum().DataPoints().Len())
					assert.Equal(t, "The total number of NGINX config reloads.", ms.At(i).Description())
					assert.Equal(t, "reloads", ms.At(i).Unit())
					assert.Equal(t, true, ms.At(i).Sum().IsMonotonic())
					assert.Equal(t, pmetric.AggregationTemporalityCumulative, ms.At(i).Sum().AggregationTemporality())
					dp := ms.At(i).Sum().DataPoints().At(0)
					assert.Equal(t, start, dp.StartTimestamp())
					assert.Equal(t, ts, dp.Timestamp())
					assert.Equal(t, pmetric.NumberDataPointValueTypeInt, dp.ValueType())
					assert.Equal(t, int64(1), dp.IntValue())
				case "nginx.http.conn":
					assert.False(t, validatedMetrics["nginx.http.conn"], "Found a duplicate in the metrics slice: nginx.http.conn")
					validatedMetrics["nginx.http.conn"] = true
					assert.Equal(t, pmetric.MetricTypeSum, ms.At(i).Type())
					assert.Equal(t, 1, ms.At(i).Sum().DataPoints().Len())
					assert.Equal(t, "The total number of connections.", ms.At(i).Description())
					assert.Equal(t, "connections", ms.At(i).Unit())
					assert.Equal(t, true, ms.At(i).Sum().IsMonotonic())
					assert.Equal(t, pmetric.AggregationTemporalityCumulative, ms.At(i).Sum().AggregationTemporality())
					dp := ms.At(i).Sum().DataPoints().At(0)
					assert.Equal(t, start, dp.StartTimestamp())
					assert.Equal(t, ts, dp.Timestamp())
					assert.Equal(t, pmetric.NumberDataPointValueTypeInt, dp.ValueType())
					assert.Equal(t, int64(1), dp.IntValue())
					attrVal, ok := dp.Attributes().Get("nginx.conn.outcome")
					assert.True(t, ok)
					assert.EqualValues(t, "ACCEPTED", attrVal.Str())
				case "nginx.http.conn.count":
					assert.False(t, validatedMetrics["nginx.http.conn.count"], "Found a duplicate in the metrics slice: nginx.http.conn.count")
					validatedMetrics["nginx.http.conn.count"] = true
					assert.Equal(t, pmetric.MetricTypeGauge, ms.At(i).Type())
					assert.Equal(t, 1, ms.At(i).Gauge().DataPoints().Len())
					assert.Equal(t, "The current number of connections.", ms.At(i).Description())
					assert.Equal(t, "connections", ms.At(i).Unit())
					dp := ms.At(i).Gauge().DataPoints().At(0)
					assert.Equal(t, start, dp.StartTimestamp())
					assert.Equal(t, ts, dp.Timestamp())
					assert.Equal(t, pmetric.NumberDataPointValueTypeInt, dp.ValueType())
					assert.Equal(t, int64(1), dp.IntValue())
					attrVal, ok := dp.Attributes().Get("nginx.conn.outcome")
					assert.True(t, ok)
					assert.EqualValues(t, "ACCEPTED", attrVal.Str())
				case "nginx.http.limit_conn.requests":
					assert.False(t, validatedMetrics["nginx.http.limit_conn.requests"], "Found a duplicate in the metrics slice: nginx.http.limit_conn.requests")
					validatedMetrics["nginx.http.limit_conn.requests"] = true
					assert.Equal(t, pmetric.MetricTypeSum, ms.At(i).Type())
					assert.Equal(t, 1, ms.At(i).Sum().DataPoints().Len())
					assert.Equal(t, "The total number of connections to an endpoint with a limit_conn directive.", ms.At(i).Description())
					assert.Equal(t, "connections", ms.At(i).Unit())
					assert.Equal(t, true, ms.At(i).Sum().IsMonotonic())
					assert.Equal(t, pmetric.AggregationTemporalityCumulative, ms.At(i).Sum().AggregationTemporality())
					dp := ms.At(i).Sum().DataPoints().At(0)
					assert.Equal(t, start, dp.StartTimestamp())
					assert.Equal(t, ts, dp.Timestamp())
					assert.Equal(t, pmetric.NumberDataPointValueTypeInt, dp.ValueType())
					assert.Equal(t, int64(1), dp.IntValue())
					attrVal, ok := dp.Attributes().Get("nginx.limit_conn.outcome")
					assert.True(t, ok)
					assert.EqualValues(t, "PASSED", attrVal.Str())
					attrVal, ok = dp.Attributes().Get("nginx.zone.name")
					assert.True(t, ok)
					assert.EqualValues(t, "nginx.zone.name-val", attrVal.Str())
				case "nginx.http.limit_req.requests":
					assert.False(t, validatedMetrics["nginx.http.limit_req.requests"], "Found a duplicate in the metrics slice: nginx.http.limit_req.requests")
					validatedMetrics["nginx.http.limit_req.requests"] = true
					assert.Equal(t, pmetric.MetricTypeSum, ms.At(i).Type())
					assert.Equal(t, 1, ms.At(i).Sum().DataPoints().Len())
					assert.Equal(t, "The total number of requests to an endpoint with a limit_req directive.", ms.At(i).Description())
					assert.Equal(t, "requests", ms.At(i).Unit())
					assert.Equal(t, true, ms.At(i).Sum().IsMonotonic())
					assert.Equal(t, pmetric.AggregationTemporalityCumulative, ms.At(i).Sum().AggregationTemporality())
					dp := ms.At(i).Sum().DataPoints().At(0)
					assert.Equal(t, start, dp.StartTimestamp())
					assert.Equal(t, ts, dp.Timestamp())
					assert.Equal(t, pmetric.NumberDataPointValueTypeInt, dp.ValueType())
					assert.Equal(t, int64(1), dp.IntValue())
					attrVal, ok := dp.Attributes().Get("nginx.limit_req.outcome")
					assert.True(t, ok)
					assert.EqualValues(t, "PASSED", attrVal.Str())
					attrVal, ok = dp.Attributes().Get("nginx.zone.name")
					assert.True(t, ok)
					assert.EqualValues(t, "nginx.zone.name-val", attrVal.Str())
				case "nginx.http.request.byte.io":
					assert.False(t, validatedMetrics["nginx.http.request.byte.io"], "Found a duplicate in the metrics slice: nginx.http.request.byte.io")
					validatedMetrics["nginx.http.request.byte.io"] = true
					assert.Equal(t, pmetric.MetricTypeSum, ms.At(i).Type())
					assert.Equal(t, 1, ms.At(i).Sum().DataPoints().Len())
					assert.Equal(t, "The total number of HTTP byte IO.", ms.At(i).Description())
					assert.Equal(t, "bytes", ms.At(i).Unit())
					assert.Equal(t, true, ms.At(i).Sum().IsMonotonic())
					assert.Equal(t, pmetric.AggregationTemporalityCumulative, ms.At(i).Sum().AggregationTemporality())
					dp := ms.At(i).Sum().DataPoints().At(0)
					assert.Equal(t, start, dp.StartTimestamp())
					assert.Equal(t, ts, dp.Timestamp())
					assert.Equal(t, pmetric.NumberDataPointValueTypeInt, dp.ValueType())
					assert.Equal(t, int64(1), dp.IntValue())
					attrVal, ok := dp.Attributes().Get("nginx.byte.io.direction")
					assert.True(t, ok)
					assert.EqualValues(t, "RX", attrVal.Str())
					attrVal, ok = dp.Attributes().Get("nginx.zone.name")
					assert.True(t, ok)
					assert.EqualValues(t, "nginx.zone.name-val", attrVal.Str())
					attrVal, ok = dp.Attributes().Get("nginx.zone.type")
					assert.True(t, ok)
					assert.EqualValues(t, "SERVER", attrVal.Str())
				case "nginx.http.request.discarded":
					assert.False(t, validatedMetrics["nginx.http.request.discarded"], "Found a duplicate in the metrics slice: nginx.http.request.discarded")
					validatedMetrics["nginx.http.request.discarded"] = true
					assert.Equal(t, pmetric.MetricTypeSum, ms.At(i).Type())
					assert.Equal(t, 1, ms.At(i).Sum().DataPoints().Len())
					assert.Equal(t, "The total number of requests completed without sending a response.", ms.At(i).Description())
					assert.Equal(t, "requests", ms.At(i).Unit())
					assert.Equal(t, true, ms.At(i).Sum().IsMonotonic())
					assert.Equal(t, pmetric.AggregationTemporalityCumulative, ms.At(i).Sum().AggregationTemporality())
					dp := ms.At(i).Sum().DataPoints().At(0)
					assert.Equal(t, start, dp.StartTimestamp())
					assert.Equal(t, ts, dp.Timestamp())
					assert.Equal(t, pmetric.NumberDataPointValueTypeInt, dp.ValueType())
					assert.Equal(t, int64(1), dp.IntValue())
					attrVal, ok := dp.Attributes().Get("nginx.zone.name")
					assert.True(t, ok)
					assert.EqualValues(t, "nginx.zone.name-val", attrVal.Str())
					attrVal, ok = dp.Attributes().Get("nginx.zone.type")
					assert.True(t, ok)
					assert.EqualValues(t, "SERVER", attrVal.Str())
				case "nginx.http.request.processing.count":
					assert.False(t, validatedMetrics["nginx.http.request.processing.count"], "Found a duplicate in the metrics slice: nginx.http.request.processing.count")
					validatedMetrics["nginx.http.request.processing.count"] = true
					assert.Equal(t, pmetric.MetricTypeGauge, ms.At(i).Type())
					assert.Equal(t, 1, ms.At(i).Gauge().DataPoints().Len())
					assert.Equal(t, "The number of client requests that are currently being processed.", ms.At(i).Description())
					assert.Equal(t, "requests", ms.At(i).Unit())
					dp := ms.At(i).Gauge().DataPoints().At(0)
					assert.Equal(t, start, dp.StartTimestamp())
					assert.Equal(t, ts, dp.Timestamp())
					assert.Equal(t, pmetric.NumberDataPointValueTypeInt, dp.ValueType())
					assert.Equal(t, int64(1), dp.IntValue())
					attrVal, ok := dp.Attributes().Get("nginx.zone.name")
					assert.True(t, ok)
					assert.EqualValues(t, "nginx.zone.name-val", attrVal.Str())
					attrVal, ok = dp.Attributes().Get("nginx.zone.type")
					assert.True(t, ok)
					assert.EqualValues(t, "SERVER", attrVal.Str())
				case "nginx.http.requests":
					assert.False(t, validatedMetrics["nginx.http.requests"], "Found a duplicate in the metrics slice: nginx.http.requests")
					validatedMetrics["nginx.http.requests"] = true
					assert.Equal(t, pmetric.MetricTypeSum, ms.At(i).Type())
					assert.Equal(t, 1, ms.At(i).Sum().DataPoints().Len())
					assert.Equal(t, "The total number of client requests received from clients.", ms.At(i).Description())
					assert.Equal(t, "requests", ms.At(i).Unit())
					assert.Equal(t, true, ms.At(i).Sum().IsMonotonic())
					assert.Equal(t, pmetric.AggregationTemporalityCumulative, ms.At(i).Sum().AggregationTemporality())
					dp := ms.At(i).Sum().DataPoints().At(0)
					assert.Equal(t, start, dp.StartTimestamp())
					assert.Equal(t, ts, dp.Timestamp())
					assert.Equal(t, pmetric.NumberDataPointValueTypeInt, dp.ValueType())
					assert.Equal(t, int64(1), dp.IntValue())
					attrVal, ok := dp.Attributes().Get("nginx.zone.name")
					assert.True(t, ok)
					assert.EqualValues(t, "nginx.zone.name-val", attrVal.Str())
					attrVal, ok = dp.Attributes().Get("nginx.zone.type")
					assert.True(t, ok)
					assert.EqualValues(t, "SERVER", attrVal.Str())
				case "nginx.http.requests.count":
					assert.False(t, validatedMetrics["nginx.http.requests.count"], "Found a duplicate in the metrics slice: nginx.http.requests.count")
					validatedMetrics["nginx.http.requests.count"] = true
					assert.Equal(t, pmetric.MetricTypeGauge, ms.At(i).Type())
					assert.Equal(t, 1, ms.At(i).Gauge().DataPoints().Len())
					assert.Equal(t, "The current number of client requests received from clients.", ms.At(i).Description())
					assert.Equal(t, "requests", ms.At(i).Unit())
					dp := ms.At(i).Gauge().DataPoints().At(0)
					assert.Equal(t, start, dp.StartTimestamp())
					assert.Equal(t, ts, dp.Timestamp())
					assert.Equal(t, pmetric.NumberDataPointValueTypeInt, dp.ValueType())
					assert.Equal(t, int64(1), dp.IntValue())
				case "nginx.http.response.status":
					assert.False(t, validatedMetrics["nginx.http.response.status"], "Found a duplicate in the metrics slice: nginx.http.response.status")
					validatedMetrics["nginx.http.response.status"] = true
					assert.Equal(t, pmetric.MetricTypeSum, ms.At(i).Type())
					assert.Equal(t, 1, ms.At(i).Sum().DataPoints().Len())
					assert.Equal(t, "The number of responses, grouped by status code range.", ms.At(i).Description())
					assert.Equal(t, "responses", ms.At(i).Unit())
					assert.Equal(t, true, ms.At(i).Sum().IsMonotonic())
					assert.Equal(t, pmetric.AggregationTemporalityCumulative, ms.At(i).Sum().AggregationTemporality())
					dp := ms.At(i).Sum().DataPoints().At(0)
					assert.Equal(t, start, dp.StartTimestamp())
					assert.Equal(t, ts, dp.Timestamp())
					assert.Equal(t, pmetric.NumberDataPointValueTypeInt, dp.ValueType())
					assert.Equal(t, int64(1), dp.IntValue())
					attrVal, ok := dp.Attributes().Get("nginx.status_range")
					assert.True(t, ok)
					assert.EqualValues(t, "1xx", attrVal.Str())
					attrVal, ok = dp.Attributes().Get("nginx.zone.name")
					assert.True(t, ok)
					assert.EqualValues(t, "nginx.zone.name-val", attrVal.Str())
					attrVal, ok = dp.Attributes().Get("nginx.zone.type")
					assert.True(t, ok)
					assert.EqualValues(t, "SERVER", attrVal.Str())
				case "nginx.http.responses":
					assert.False(t, validatedMetrics["nginx.http.responses"], "Found a duplicate in the metrics slice: nginx.http.responses")
					validatedMetrics["nginx.http.responses"] = true
					assert.Equal(t, pmetric.MetricTypeSum, ms.At(i).Type())
					assert.Equal(t, 1, ms.At(i).Sum().DataPoints().Len())
					assert.Equal(t, "The total number of client requests received from clients.", ms.At(i).Description())
					assert.Equal(t, "responses", ms.At(i).Unit())
					assert.Equal(t, true, ms.At(i).Sum().IsMonotonic())
					assert.Equal(t, pmetric.AggregationTemporalityCumulative, ms.At(i).Sum().AggregationTemporality())
					dp := ms.At(i).Sum().DataPoints().At(0)
					assert.Equal(t, start, dp.StartTimestamp())
					assert.Equal(t, ts, dp.Timestamp())
					assert.Equal(t, pmetric.NumberDataPointValueTypeInt, dp.ValueType())
					assert.Equal(t, int64(1), dp.IntValue())
					attrVal, ok := dp.Attributes().Get("nginx.zone.name")
					assert.True(t, ok)
					assert.EqualValues(t, "nginx.zone.name-val", attrVal.Str())
					attrVal, ok = dp.Attributes().Get("nginx.zone.type")
					assert.True(t, ok)
					assert.EqualValues(t, "SERVER", attrVal.Str())
				case "nginx.http.upstream.keepalive.count":
					assert.False(t, validatedMetrics["nginx.http.upstream.keepalive.count"], "Found a duplicate in the metrics slice: nginx.http.upstream.keepalive.count")
					validatedMetrics["nginx.http.upstream.keepalive.count"] = true
					assert.Equal(t, pmetric.MetricTypeGauge, ms.At(i).Type())
					assert.Equal(t, 1, ms.At(i).Gauge().DataPoints().Len())
					assert.Equal(t, "The current number of idle keepalive connections per HTTP upstream.", ms.At(i).Description())
					assert.Equal(t, "connections", ms.At(i).Unit())
					dp := ms.At(i).Gauge().DataPoints().At(0)
					assert.Equal(t, start, dp.StartTimestamp())
					assert.Equal(t, ts, dp.Timestamp())
					assert.Equal(t, pmetric.NumberDataPointValueTypeInt, dp.ValueType())
					assert.Equal(t, int64(1), dp.IntValue())
					attrVal, ok := dp.Attributes().Get("nginx.zone.name")
					assert.True(t, ok)
					assert.EqualValues(t, "nginx.zone.name-val", attrVal.Str())
					attrVal, ok = dp.Attributes().Get("nginx.upstream.name")
					assert.True(t, ok)
					assert.EqualValues(t, "nginx.upstream.name-val", attrVal.Str())
				case "nginx.http.upstream.peer.byte.io":
					assert.False(t, validatedMetrics["nginx.http.upstream.peer.byte.io"], "Found a duplicate in the metrics slice: nginx.http.upstream.peer.byte.io")
					validatedMetrics["nginx.http.upstream.peer.byte.io"] = true
					assert.Equal(t, pmetric.MetricTypeSum, ms.At(i).Type())
					assert.Equal(t, 1, ms.At(i).Sum().DataPoints().Len())
					assert.Equal(t, "The total number of byte IO per HTTP upstream peer.", ms.At(i).Description())
					assert.Equal(t, "bytes", ms.At(i).Unit())
					assert.Equal(t, true, ms.At(i).Sum().IsMonotonic())
					assert.Equal(t, pmetric.AggregationTemporalityCumulative, ms.At(i).Sum().AggregationTemporality())
					dp := ms.At(i).Sum().DataPoints().At(0)
					assert.Equal(t, start, dp.StartTimestamp())
					assert.Equal(t, ts, dp.Timestamp())
					assert.Equal(t, pmetric.NumberDataPointValueTypeInt, dp.ValueType())
					assert.Equal(t, int64(1), dp.IntValue())
					attrVal, ok := dp.Attributes().Get("nginx.byte.io.direction")
					assert.True(t, ok)
					assert.EqualValues(t, "RX", attrVal.Str())
					attrVal, ok = dp.Attributes().Get("nginx.zone.name")
					assert.True(t, ok)
					assert.EqualValues(t, "nginx.zone.name-val", attrVal.Str())
					attrVal, ok = dp.Attributes().Get("nginx.upstream.name")
					assert.True(t, ok)
					assert.EqualValues(t, "nginx.upstream.name-val", attrVal.Str())
					attrVal, ok = dp.Attributes().Get("nginx.peer.address")
					assert.True(t, ok)
					assert.EqualValues(t, "nginx.peer.address-val", attrVal.Str())
					attrVal, ok = dp.Attributes().Get("nginx.peer.name")
					assert.True(t, ok)
					assert.EqualValues(t, "nginx.peer.name-val", attrVal.Str())
				case "nginx.http.upstream.peer.conn.count":
					assert.False(t, validatedMetrics["nginx.http.upstream.peer.conn.count"], "Found a duplicate in the metrics slice: nginx.http.upstream.peer.conn.count")
					validatedMetrics["nginx.http.upstream.peer.conn.count"] = true
					assert.Equal(t, pmetric.MetricTypeGauge, ms.At(i).Type())
					assert.Equal(t, 1, ms.At(i).Gauge().DataPoints().Len())
					assert.Equal(t, "The average number of active connections per HTTP upstream peer.", ms.At(i).Description())
					assert.Equal(t, "connections", ms.At(i).Unit())
					dp := ms.At(i).Gauge().DataPoints().At(0)
					assert.Equal(t, start, dp.StartTimestamp())
					assert.Equal(t, ts, dp.Timestamp())
					assert.Equal(t, pmetric.NumberDataPointValueTypeInt, dp.ValueType())
					assert.Equal(t, int64(1), dp.IntValue())
					attrVal, ok := dp.Attributes().Get("nginx.zone.name")
					assert.True(t, ok)
					assert.EqualValues(t, "nginx.zone.name-val", attrVal.Str())
					attrVal, ok = dp.Attributes().Get("nginx.upstream.name")
					assert.True(t, ok)
					assert.EqualValues(t, "nginx.upstream.name-val", attrVal.Str())
					attrVal, ok = dp.Attributes().Get("nginx.peer.address")
					assert.True(t, ok)
					assert.EqualValues(t, "nginx.peer.address-val", attrVal.Str())
					attrVal, ok = dp.Attributes().Get("nginx.peer.name")
					assert.True(t, ok)
					assert.EqualValues(t, "nginx.peer.name-val", attrVal.Str())
				case "nginx.http.upstream.peer.count":
					assert.False(t, validatedMetrics["nginx.http.upstream.peer.count"], "Found a duplicate in the metrics slice: nginx.http.upstream.peer.count")
					validatedMetrics["nginx.http.upstream.peer.count"] = true
					assert.Equal(t, pmetric.MetricTypeGauge, ms.At(i).Type())
					assert.Equal(t, 1, ms.At(i).Gauge().DataPoints().Len())
					assert.Equal(t, "The current count of peers on the HTTP upstream grouped by state.", ms.At(i).Description())
					assert.Equal(t, "peers", ms.At(i).Unit())
					dp := ms.At(i).Gauge().DataPoints().At(0)
					assert.Equal(t, start, dp.StartTimestamp())
					assert.Equal(t, ts, dp.Timestamp())
					assert.Equal(t, pmetric.NumberDataPointValueTypeInt, dp.ValueType())
					assert.Equal(t, int64(1), dp.IntValue())
					attrVal, ok := dp.Attributes().Get("nginx.peer.state")
					assert.True(t, ok)
					assert.EqualValues(t, "CHECKING", attrVal.Str())
					attrVal, ok = dp.Attributes().Get("nginx.zone.name")
					assert.True(t, ok)
					assert.EqualValues(t, "nginx.zone.name-val", attrVal.Str())
					attrVal, ok = dp.Attributes().Get("nginx.upstream.name")
					assert.True(t, ok)
					assert.EqualValues(t, "nginx.upstream.name-val", attrVal.Str())
				case "nginx.http.upstream.peer.fails":
					assert.False(t, validatedMetrics["nginx.http.upstream.peer.fails"], "Found a duplicate in the metrics slice: nginx.http.upstream.peer.fails")
					validatedMetrics["nginx.http.upstream.peer.fails"] = true
					assert.Equal(t, pmetric.MetricTypeGauge, ms.At(i).Type())
					assert.Equal(t, 1, ms.At(i).Gauge().DataPoints().Len())
					assert.Equal(t, "The total number of unsuccessful attempts to communicate with the HTTP upstream peer.", ms.At(i).Description())
					assert.Equal(t, "attempts", ms.At(i).Unit())
					dp := ms.At(i).Gauge().DataPoints().At(0)
					assert.Equal(t, start, dp.StartTimestamp())
					assert.Equal(t, ts, dp.Timestamp())
					assert.Equal(t, pmetric.NumberDataPointValueTypeInt, dp.ValueType())
					assert.Equal(t, int64(1), dp.IntValue())
					attrVal, ok := dp.Attributes().Get("nginx.zone.name")
					assert.True(t, ok)
					assert.EqualValues(t, "nginx.zone.name-val", attrVal.Str())
					attrVal, ok = dp.Attributes().Get("nginx.upstream.name")
					assert.True(t, ok)
					assert.EqualValues(t, "nginx.upstream.name-val", attrVal.Str())
					attrVal, ok = dp.Attributes().Get("nginx.peer.address")
					assert.True(t, ok)
					assert.EqualValues(t, "nginx.peer.address-val", attrVal.Str())
					attrVal, ok = dp.Attributes().Get("nginx.peer.name")
					assert.True(t, ok)
					assert.EqualValues(t, "nginx.peer.name-val", attrVal.Str())
				case "nginx.http.upstream.peer.header.time":
					assert.False(t, validatedMetrics["nginx.http.upstream.peer.header.time"], "Found a duplicate in the metrics slice: nginx.http.upstream.peer.header.time")
					validatedMetrics["nginx.http.upstream.peer.header.time"] = true
					assert.Equal(t, pmetric.MetricTypeGauge, ms.At(i).Type())
					assert.Equal(t, 1, ms.At(i).Gauge().DataPoints().Len())
					assert.Equal(t, "The average time to get the response header from the HTTP upstream peer.", ms.At(i).Description())
					assert.Equal(t, "ms", ms.At(i).Unit())
					dp := ms.At(i).Gauge().DataPoints().At(0)
					assert.Equal(t, start, dp.StartTimestamp())
					assert.Equal(t, ts, dp.Timestamp())
					assert.Equal(t, pmetric.NumberDataPointValueTypeInt, dp.ValueType())
					assert.Equal(t, int64(1), dp.IntValue())
					attrVal, ok := dp.Attributes().Get("nginx.zone.name")
					assert.True(t, ok)
					assert.EqualValues(t, "nginx.zone.name-val", attrVal.Str())
					attrVal, ok = dp.Attributes().Get("nginx.upstream.name")
					assert.True(t, ok)
					assert.EqualValues(t, "nginx.upstream.name-val", attrVal.Str())
					attrVal, ok = dp.Attributes().Get("nginx.peer.address")
					assert.True(t, ok)
					assert.EqualValues(t, "nginx.peer.address-val", attrVal.Str())
					attrVal, ok = dp.Attributes().Get("nginx.peer.name")
					assert.True(t, ok)
					assert.EqualValues(t, "nginx.peer.name-val", attrVal.Str())
				case "nginx.http.upstream.peer.health_checks":
					assert.False(t, validatedMetrics["nginx.http.upstream.peer.health_checks"], "Found a duplicate in the metrics slice: nginx.http.upstream.peer.health_checks")
					validatedMetrics["nginx.http.upstream.peer.health_checks"] = true
					assert.Equal(t, pmetric.MetricTypeSum, ms.At(i).Type())
					assert.Equal(t, 1, ms.At(i).Sum().DataPoints().Len())
					assert.Equal(t, "The total number of health check requests made to a HTTP upstream peer.", ms.At(i).Description())
					assert.Equal(t, "requests", ms.At(i).Unit())
					assert.Equal(t, true, ms.At(i).Sum().IsMonotonic())
					assert.Equal(t, pmetric.AggregationTemporalityCumulative, ms.At(i).Sum().AggregationTemporality())
					dp := ms.At(i).Sum().DataPoints().At(0)
					assert.Equal(t, start, dp.StartTimestamp())
					assert.Equal(t, ts, dp.Timestamp())
					assert.Equal(t, pmetric.NumberDataPointValueTypeInt, dp.ValueType())
					assert.Equal(t, int64(1), dp.IntValue())
					attrVal, ok := dp.Attributes().Get("nginx.health_check")
					assert.True(t, ok)
					assert.EqualValues(t, "UNHEALTHY", attrVal.Str())
					attrVal, ok = dp.Attributes().Get("nginx.zone.name")
					assert.True(t, ok)
					assert.EqualValues(t, "nginx.zone.name-val", attrVal.Str())
					attrVal, ok = dp.Attributes().Get("nginx.upstream.name")
					assert.True(t, ok)
					assert.EqualValues(t, "nginx.upstream.name-val", attrVal.Str())
					attrVal, ok = dp.Attributes().Get("nginx.peer.address")
					assert.True(t, ok)
					assert.EqualValues(t, "nginx.peer.address-val", attrVal.Str())
					attrVal, ok = dp.Attributes().Get("nginx.peer.name")
					assert.True(t, ok)
					assert.EqualValues(t, "nginx.peer.name-val", attrVal.Str())
				case "nginx.http.upstream.peer.requests":
					assert.False(t, validatedMetrics["nginx.http.upstream.peer.requests"], "Found a duplicate in the metrics slice: nginx.http.upstream.peer.requests")
					validatedMetrics["nginx.http.upstream.peer.requests"] = true
					assert.Equal(t, pmetric.MetricTypeSum, ms.At(i).Type())
					assert.Equal(t, 1, ms.At(i).Sum().DataPoints().Len())
					assert.Equal(t, "The total number of client requests forwarded to the HTTP upstream peer.", ms.At(i).Description())
					assert.Equal(t, "requests", ms.At(i).Unit())
					assert.Equal(t, true, ms.At(i).Sum().IsMonotonic())
					assert.Equal(t, pmetric.AggregationTemporalityCumulative, ms.At(i).Sum().AggregationTemporality())
					dp := ms.At(i).Sum().DataPoints().At(0)
					assert.Equal(t, start, dp.StartTimestamp())
					assert.Equal(t, ts, dp.Timestamp())
					assert.Equal(t, pmetric.NumberDataPointValueTypeInt, dp.ValueType())
					assert.Equal(t, int64(1), dp.IntValue())
					attrVal, ok := dp.Attributes().Get("nginx.zone.name")
					assert.True(t, ok)
					assert.EqualValues(t, "nginx.zone.name-val", attrVal.Str())
					attrVal, ok = dp.Attributes().Get("nginx.upstream.name")
					assert.True(t, ok)
					assert.EqualValues(t, "nginx.upstream.name-val", attrVal.Str())
					attrVal, ok = dp.Attributes().Get("nginx.peer.address")
					assert.True(t, ok)
					assert.EqualValues(t, "nginx.peer.address-val", attrVal.Str())
					attrVal, ok = dp.Attributes().Get("nginx.peer.name")
					assert.True(t, ok)
					assert.EqualValues(t, "nginx.peer.name-val", attrVal.Str())
				case "nginx.http.upstream.peer.response.time":
					assert.False(t, validatedMetrics["nginx.http.upstream.peer.response.time"], "Found a duplicate in the metrics slice: nginx.http.upstream.peer.response.time")
					validatedMetrics["nginx.http.upstream.peer.response.time"] = true
					assert.Equal(t, pmetric.MetricTypeGauge, ms.At(i).Type())
					assert.Equal(t, 1, ms.At(i).Gauge().DataPoints().Len())
					assert.Equal(t, "The average time to get the full response from the HTTP upstream peer.", ms.At(i).Description())
					assert.Equal(t, "ms", ms.At(i).Unit())
					dp := ms.At(i).Gauge().DataPoints().At(0)
					assert.Equal(t, start, dp.StartTimestamp())
					assert.Equal(t, ts, dp.Timestamp())
					assert.Equal(t, pmetric.NumberDataPointValueTypeInt, dp.ValueType())
					assert.Equal(t, int64(1), dp.IntValue())
					attrVal, ok := dp.Attributes().Get("nginx.zone.name")
					assert.True(t, ok)
					assert.EqualValues(t, "nginx.zone.name-val", attrVal.Str())
					attrVal, ok = dp.Attributes().Get("nginx.upstream.name")
					assert.True(t, ok)
					assert.EqualValues(t, "nginx.upstream.name-val", attrVal.Str())
					attrVal, ok = dp.Attributes().Get("nginx.peer.address")
					assert.True(t, ok)
					assert.EqualValues(t, "nginx.peer.address-val", attrVal.Str())
					attrVal, ok = dp.Attributes().Get("nginx.peer.name")
					assert.True(t, ok)
					assert.EqualValues(t, "nginx.peer.name-val", attrVal.Str())
				case "nginx.http.upstream.peer.responses":
					assert.False(t, validatedMetrics["nginx.http.upstream.peer.responses"], "Found a duplicate in the metrics slice: nginx.http.upstream.peer.responses")
					validatedMetrics["nginx.http.upstream.peer.responses"] = true
					assert.Equal(t, pmetric.MetricTypeSum, ms.At(i).Type())
					assert.Equal(t, 1, ms.At(i).Sum().DataPoints().Len())
					assert.Equal(t, "The total number of responses obtained from the HTTP upstream peer grouped by status range.", ms.At(i).Description())
					assert.Equal(t, "responses", ms.At(i).Unit())
					assert.Equal(t, true, ms.At(i).Sum().IsMonotonic())
					assert.Equal(t, pmetric.AggregationTemporalityCumulative, ms.At(i).Sum().AggregationTemporality())
					dp := ms.At(i).Sum().DataPoints().At(0)
					assert.Equal(t, start, dp.StartTimestamp())
					assert.Equal(t, ts, dp.Timestamp())
					assert.Equal(t, pmetric.NumberDataPointValueTypeInt, dp.ValueType())
					assert.Equal(t, int64(1), dp.IntValue())
					attrVal, ok := dp.Attributes().Get("nginx.status_range")
					assert.True(t, ok)
					assert.EqualValues(t, "1xx", attrVal.Str())
					attrVal, ok = dp.Attributes().Get("nginx.zone.name")
					assert.True(t, ok)
					assert.EqualValues(t, "nginx.zone.name-val", attrVal.Str())
					attrVal, ok = dp.Attributes().Get("nginx.upstream.name")
					assert.True(t, ok)
					assert.EqualValues(t, "nginx.upstream.name-val", attrVal.Str())
					attrVal, ok = dp.Attributes().Get("nginx.peer.address")
					assert.True(t, ok)
					assert.EqualValues(t, "nginx.peer.address-val", attrVal.Str())
					attrVal, ok = dp.Attributes().Get("nginx.peer.name")
					assert.True(t, ok)
					assert.EqualValues(t, "nginx.peer.name-val", attrVal.Str())
				case "nginx.http.upstream.peer.state":
					assert.False(t, validatedMetrics["nginx.http.upstream.peer.state"], "Found a duplicate in the metrics slice: nginx.http.upstream.peer.state")
					validatedMetrics["nginx.http.upstream.peer.state"] = true
					assert.Equal(t, pmetric.MetricTypeGauge, ms.At(i).Type())
					assert.Equal(t, 1, ms.At(i).Gauge().DataPoints().Len())
					assert.Equal(t, "Current state of an upstream peer in deployment.", ms.At(i).Description())
					assert.Equal(t, "is_deployed", ms.At(i).Unit())
					dp := ms.At(i).Gauge().DataPoints().At(0)
					assert.Equal(t, start, dp.StartTimestamp())
					assert.Equal(t, ts, dp.Timestamp())
					assert.Equal(t, pmetric.NumberDataPointValueTypeInt, dp.ValueType())
					assert.Equal(t, int64(1), dp.IntValue())
					attrVal, ok := dp.Attributes().Get("nginx.peer.state")
					assert.True(t, ok)
					assert.EqualValues(t, "CHECKING", attrVal.Str())
					attrVal, ok = dp.Attributes().Get("nginx.zone.name")
					assert.True(t, ok)
					assert.EqualValues(t, "nginx.zone.name-val", attrVal.Str())
					attrVal, ok = dp.Attributes().Get("nginx.upstream.name")
					assert.True(t, ok)
					assert.EqualValues(t, "nginx.upstream.name-val", attrVal.Str())
					attrVal, ok = dp.Attributes().Get("nginx.peer.address")
					assert.True(t, ok)
					assert.EqualValues(t, "nginx.peer.address-val", attrVal.Str())
					attrVal, ok = dp.Attributes().Get("nginx.peer.name")
					assert.True(t, ok)
					assert.EqualValues(t, "nginx.peer.name-val", attrVal.Str())
				case "nginx.http.upstream.peer.unavailables":
					assert.False(t, validatedMetrics["nginx.http.upstream.peer.unavailables"], "Found a duplicate in the metrics slice: nginx.http.upstream.peer.unavailables")
					validatedMetrics["nginx.http.upstream.peer.unavailables"] = true
					assert.Equal(t, pmetric.MetricTypeSum, ms.At(i).Type())
					assert.Equal(t, 1, ms.At(i).Sum().DataPoints().Len())
					assert.Equal(t, "Number of times the server became unavailable for client requests (“unavail”).", ms.At(i).Description())
					assert.Equal(t, "requests", ms.At(i).Unit())
					assert.Equal(t, true, ms.At(i).Sum().IsMonotonic())
					assert.Equal(t, pmetric.AggregationTemporalityCumulative, ms.At(i).Sum().AggregationTemporality())
					dp := ms.At(i).Sum().DataPoints().At(0)
					assert.Equal(t, start, dp.StartTimestamp())
					assert.Equal(t, ts, dp.Timestamp())
					assert.Equal(t, pmetric.NumberDataPointValueTypeInt, dp.ValueType())
					assert.Equal(t, int64(1), dp.IntValue())
					attrVal, ok := dp.Attributes().Get("nginx.zone.name")
					assert.True(t, ok)
					assert.EqualValues(t, "nginx.zone.name-val", attrVal.Str())
					attrVal, ok = dp.Attributes().Get("nginx.upstream.name")
					assert.True(t, ok)
					assert.EqualValues(t, "nginx.upstream.name-val", attrVal.Str())
					attrVal, ok = dp.Attributes().Get("nginx.peer.address")
					assert.True(t, ok)
					assert.EqualValues(t, "nginx.peer.address-val", attrVal.Str())
					attrVal, ok = dp.Attributes().Get("nginx.peer.name")
					assert.True(t, ok)
					assert.EqualValues(t, "nginx.peer.name-val", attrVal.Str())
				case "nginx.http.upstream.queue.limit":
					assert.False(t, validatedMetrics["nginx.http.upstream.queue.limit"], "Found a duplicate in the metrics slice: nginx.http.upstream.queue.limit")
					validatedMetrics["nginx.http.upstream.queue.limit"] = true
					assert.Equal(t, pmetric.MetricTypeGauge, ms.At(i).Type())
					assert.Equal(t, 1, ms.At(i).Gauge().DataPoints().Len())
					assert.Equal(t, "The maximum number of requests that can be in the queue at the same time.", ms.At(i).Description())
					assert.Equal(t, "requests", ms.At(i).Unit())
					dp := ms.At(i).Gauge().DataPoints().At(0)
					assert.Equal(t, start, dp.StartTimestamp())
					assert.Equal(t, ts, dp.Timestamp())
					assert.Equal(t, pmetric.NumberDataPointValueTypeInt, dp.ValueType())
					assert.Equal(t, int64(1), dp.IntValue())
					attrVal, ok := dp.Attributes().Get("nginx.zone.name")
					assert.True(t, ok)
					assert.EqualValues(t, "nginx.zone.name-val", attrVal.Str())
					attrVal, ok = dp.Attributes().Get("nginx.upstream.name")
					assert.True(t, ok)
					assert.EqualValues(t, "nginx.upstream.name-val", attrVal.Str())
				case "nginx.http.upstream.queue.overflows":
					assert.False(t, validatedMetrics["nginx.http.upstream.queue.overflows"], "Found a duplicate in the metrics slice: nginx.http.upstream.queue.overflows")
					validatedMetrics["nginx.http.upstream.queue.overflows"] = true
					assert.Equal(t, pmetric.MetricTypeSum, ms.At(i).Type())
					assert.Equal(t, 1, ms.At(i).Sum().DataPoints().Len())
					assert.Equal(t, "The total number of requests rejected due to the queue overflow.", ms.At(i).Description())
					assert.Equal(t, "responses", ms.At(i).Unit())
					assert.Equal(t, true, ms.At(i).Sum().IsMonotonic())
					assert.Equal(t, pmetric.AggregationTemporalityCumulative, ms.At(i).Sum().AggregationTemporality())
					dp := ms.At(i).Sum().DataPoints().At(0)
					assert.Equal(t, start, dp.StartTimestamp())
					assert.Equal(t, ts, dp.Timestamp())
					assert.Equal(t, pmetric.NumberDataPointValueTypeInt, dp.ValueType())
					assert.Equal(t, int64(1), dp.IntValue())
					attrVal, ok := dp.Attributes().Get("nginx.zone.name")
					assert.True(t, ok)
					assert.EqualValues(t, "nginx.zone.name-val", attrVal.Str())
					attrVal, ok = dp.Attributes().Get("nginx.upstream.name")
					assert.True(t, ok)
					assert.EqualValues(t, "nginx.upstream.name-val", attrVal.Str())
				case "nginx.http.upstream.queue.usage":
					assert.False(t, validatedMetrics["nginx.http.upstream.queue.usage"], "Found a duplicate in the metrics slice: nginx.http.upstream.queue.usage")
					validatedMetrics["nginx.http.upstream.queue.usage"] = true
					assert.Equal(t, pmetric.MetricTypeGauge, ms.At(i).Type())
					assert.Equal(t, 1, ms.At(i).Gauge().DataPoints().Len())
					assert.Equal(t, "The current number of requests in the queue.", ms.At(i).Description())
					assert.Equal(t, "requests", ms.At(i).Unit())
					dp := ms.At(i).Gauge().DataPoints().At(0)
					assert.Equal(t, start, dp.StartTimestamp())
					assert.Equal(t, ts, dp.Timestamp())
					assert.Equal(t, pmetric.NumberDataPointValueTypeInt, dp.ValueType())
					assert.Equal(t, int64(1), dp.IntValue())
					attrVal, ok := dp.Attributes().Get("nginx.zone.name")
					assert.True(t, ok)
					assert.EqualValues(t, "nginx.zone.name-val", attrVal.Str())
					attrVal, ok = dp.Attributes().Get("nginx.upstream.name")
					assert.True(t, ok)
					assert.EqualValues(t, "nginx.upstream.name-val", attrVal.Str())
				case "nginx.http.upstream.zombie.count":
					assert.False(t, validatedMetrics["nginx.http.upstream.zombie.count"], "Found a duplicate in the metrics slice: nginx.http.upstream.zombie.count")
					validatedMetrics["nginx.http.upstream.zombie.count"] = true
					assert.Equal(t, pmetric.MetricTypeGauge, ms.At(i).Type())
					assert.Equal(t, 1, ms.At(i).Gauge().DataPoints().Len())
					assert.Equal(t, "The current number of upstream peers removed from the group but still processing active client requests.", ms.At(i).Description())
					assert.Equal(t, "is_deployed", ms.At(i).Unit())
					dp := ms.At(i).Gauge().DataPoints().At(0)
					assert.Equal(t, start, dp.StartTimestamp())
					assert.Equal(t, ts, dp.Timestamp())
					assert.Equal(t, pmetric.NumberDataPointValueTypeInt, dp.ValueType())
					assert.Equal(t, int64(1), dp.IntValue())
					attrVal, ok := dp.Attributes().Get("nginx.zone.name")
					assert.True(t, ok)
					assert.EqualValues(t, "nginx.zone.name-val", attrVal.Str())
					attrVal, ok = dp.Attributes().Get("nginx.upstream.name")
					assert.True(t, ok)
					assert.EqualValues(t, "nginx.upstream.name-val", attrVal.Str())
				case "nginx.slab.page.free":
					assert.False(t, validatedMetrics["nginx.slab.page.free"], "Found a duplicate in the metrics slice: nginx.slab.page.free")
					validatedMetrics["nginx.slab.page.free"] = true
					assert.Equal(t, pmetric.MetricTypeGauge, ms.At(i).Type())
					assert.Equal(t, 1, ms.At(i).Gauge().DataPoints().Len())
					assert.Equal(t, "The current number of free memory pages.", ms.At(i).Description())
					assert.Equal(t, "pages", ms.At(i).Unit())
					dp := ms.At(i).Gauge().DataPoints().At(0)
					assert.Equal(t, start, dp.StartTimestamp())
					assert.Equal(t, ts, dp.Timestamp())
					assert.Equal(t, pmetric.NumberDataPointValueTypeInt, dp.ValueType())
					assert.Equal(t, int64(1), dp.IntValue())
					attrVal, ok := dp.Attributes().Get("nginx.zone.name")
					assert.True(t, ok)
					assert.EqualValues(t, "nginx.zone.name-val", attrVal.Str())
				case "nginx.slab.page.limit":
					assert.False(t, validatedMetrics["nginx.slab.page.limit"], "Found a duplicate in the metrics slice: nginx.slab.page.limit")
					validatedMetrics["nginx.slab.page.limit"] = true
					assert.Equal(t, pmetric.MetricTypeGauge, ms.At(i).Type())
					assert.Equal(t, 1, ms.At(i).Gauge().DataPoints().Len())
					assert.Equal(t, "The total number of memory pages (free and used).", ms.At(i).Description())
					assert.Equal(t, "pages", ms.At(i).Unit())
					dp := ms.At(i).Gauge().DataPoints().At(0)
					assert.Equal(t, start, dp.StartTimestamp())
					assert.Equal(t, ts, dp.Timestamp())
					assert.Equal(t, pmetric.NumberDataPointValueTypeInt, dp.ValueType())
					assert.Equal(t, int64(1), dp.IntValue())
					attrVal, ok := dp.Attributes().Get("nginx.zone.name")
					assert.True(t, ok)
					assert.EqualValues(t, "nginx.zone.name-val", attrVal.Str())
				case "nginx.slab.page.usage":
					assert.False(t, validatedMetrics["nginx.slab.page.usage"], "Found a duplicate in the metrics slice: nginx.slab.page.usage")
					validatedMetrics["nginx.slab.page.usage"] = true
					assert.Equal(t, pmetric.MetricTypeGauge, ms.At(i).Type())
					assert.Equal(t, 1, ms.At(i).Gauge().DataPoints().Len())
					assert.Equal(t, "The current number of used memory pages.", ms.At(i).Description())
					assert.Equal(t, "pages", ms.At(i).Unit())
					dp := ms.At(i).Gauge().DataPoints().At(0)
					assert.Equal(t, start, dp.StartTimestamp())
					assert.Equal(t, ts, dp.Timestamp())
					assert.Equal(t, pmetric.NumberDataPointValueTypeInt, dp.ValueType())
					assert.Equal(t, int64(1), dp.IntValue())
					attrVal, ok := dp.Attributes().Get("nginx.zone.name")
					assert.True(t, ok)
					assert.EqualValues(t, "nginx.zone.name-val", attrVal.Str())
				case "nginx.slab.page.utilization":
					assert.False(t, validatedMetrics["nginx.slab.page.utilization"], "Found a duplicate in the metrics slice: nginx.slab.page.utilization")
					validatedMetrics["nginx.slab.page.utilization"] = true
					assert.Equal(t, pmetric.MetricTypeGauge, ms.At(i).Type())
					assert.Equal(t, 1, ms.At(i).Gauge().DataPoints().Len())
					assert.Equal(t, "The current percentage of used memory pages.", ms.At(i).Description())
					assert.Equal(t, "pages", ms.At(i).Unit())
					dp := ms.At(i).Gauge().DataPoints().At(0)
					assert.Equal(t, start, dp.StartTimestamp())
					assert.Equal(t, ts, dp.Timestamp())
					assert.Equal(t, pmetric.NumberDataPointValueTypeDouble, dp.ValueType())
					assert.Equal(t, float64(1), dp.DoubleValue())
					attrVal, ok := dp.Attributes().Get("nginx.zone.name")
					assert.True(t, ok)
					assert.EqualValues(t, "nginx.zone.name-val", attrVal.Str())
				case "nginx.slab.slot.allocations":
					assert.False(t, validatedMetrics["nginx.slab.slot.allocations"], "Found a duplicate in the metrics slice: nginx.slab.slot.allocations")
					validatedMetrics["nginx.slab.slot.allocations"] = true
					assert.Equal(t, pmetric.MetricTypeSum, ms.At(i).Type())
					assert.Equal(t, 1, ms.At(i).Sum().DataPoints().Len())
					assert.Equal(t, "The number of attempts to allocate memory of specified size.", ms.At(i).Description())
					assert.Equal(t, "allocations", ms.At(i).Unit())
					assert.Equal(t, true, ms.At(i).Sum().IsMonotonic())
					assert.Equal(t, pmetric.AggregationTemporalityCumulative, ms.At(i).Sum().AggregationTemporality())
					dp := ms.At(i).Sum().DataPoints().At(0)
					assert.Equal(t, start, dp.StartTimestamp())
					assert.Equal(t, ts, dp.Timestamp())
					assert.Equal(t, pmetric.NumberDataPointValueTypeInt, dp.ValueType())
					assert.Equal(t, int64(1), dp.IntValue())
					attrVal, ok := dp.Attributes().Get("nginx.slab.slot.limit")
					assert.True(t, ok)
					assert.EqualValues(t, 21, attrVal.Int())
					attrVal, ok = dp.Attributes().Get("nginx.slab.slot.allocation.result")
					assert.True(t, ok)
					assert.EqualValues(t, "FAILURE", attrVal.Str())
					attrVal, ok = dp.Attributes().Get("nginx.zone.name")
					assert.True(t, ok)
					assert.EqualValues(t, "nginx.zone.name-val", attrVal.Str())
				case "nginx.slab.slot.free":
					assert.False(t, validatedMetrics["nginx.slab.slot.free"], "Found a duplicate in the metrics slice: nginx.slab.slot.free")
					validatedMetrics["nginx.slab.slot.free"] = true
					assert.Equal(t, pmetric.MetricTypeGauge, ms.At(i).Type())
					assert.Equal(t, 1, ms.At(i).Gauge().DataPoints().Len())
					assert.Equal(t, "The current number of free memory slots.", ms.At(i).Description())
					assert.Equal(t, "slots", ms.At(i).Unit())
					dp := ms.At(i).Gauge().DataPoints().At(0)
					assert.Equal(t, start, dp.StartTimestamp())
					assert.Equal(t, ts, dp.Timestamp())
					assert.Equal(t, pmetric.NumberDataPointValueTypeInt, dp.ValueType())
					assert.Equal(t, int64(1), dp.IntValue())
					attrVal, ok := dp.Attributes().Get("nginx.slab.slot.limit")
					assert.True(t, ok)
					assert.EqualValues(t, 21, attrVal.Int())
					attrVal, ok = dp.Attributes().Get("nginx.zone.name")
					assert.True(t, ok)
					assert.EqualValues(t, "nginx.zone.name-val", attrVal.Str())
				case "nginx.slab.slot.usage":
					assert.False(t, validatedMetrics["nginx.slab.slot.usage"], "Found a duplicate in the metrics slice: nginx.slab.slot.usage")
					validatedMetrics["nginx.slab.slot.usage"] = true
					assert.Equal(t, pmetric.MetricTypeGauge, ms.At(i).Type())
					assert.Equal(t, 1, ms.At(i).Gauge().DataPoints().Len())
					assert.Equal(t, "The current number of used memory slots.", ms.At(i).Description())
					assert.Equal(t, "slots", ms.At(i).Unit())
					dp := ms.At(i).Gauge().DataPoints().At(0)
					assert.Equal(t, start, dp.StartTimestamp())
					assert.Equal(t, ts, dp.Timestamp())
					assert.Equal(t, pmetric.NumberDataPointValueTypeInt, dp.ValueType())
					assert.Equal(t, int64(1), dp.IntValue())
					attrVal, ok := dp.Attributes().Get("nginx.slab.slot.limit")
					assert.True(t, ok)
					assert.EqualValues(t, 21, attrVal.Int())
					attrVal, ok = dp.Attributes().Get("nginx.zone.name")
					assert.True(t, ok)
					assert.EqualValues(t, "nginx.zone.name-val", attrVal.Str())
				case "nginx.ssl.certificate.verify_failures":
					assert.False(t, validatedMetrics["nginx.ssl.certificate.verify_failures"], "Found a duplicate in the metrics slice: nginx.ssl.certificate.verify_failures")
					validatedMetrics["nginx.ssl.certificate.verify_failures"] = true
					assert.Equal(t, pmetric.MetricTypeSum, ms.At(i).Type())
					assert.Equal(t, 1, ms.At(i).Sum().DataPoints().Len())
					assert.Equal(t, "The total number of SSL certificate verification failures.", ms.At(i).Description())
					assert.Equal(t, "certificates", ms.At(i).Unit())
					assert.Equal(t, true, ms.At(i).Sum().IsMonotonic())
					assert.Equal(t, pmetric.AggregationTemporalityCumulative, ms.At(i).Sum().AggregationTemporality())
					dp := ms.At(i).Sum().DataPoints().At(0)
					assert.Equal(t, start, dp.StartTimestamp())
					assert.Equal(t, ts, dp.Timestamp())
					assert.Equal(t, pmetric.NumberDataPointValueTypeInt, dp.ValueType())
					assert.Equal(t, int64(1), dp.IntValue())
					attrVal, ok := dp.Attributes().Get("nginx.ssl.verify_failure.reason")
					assert.True(t, ok)
					assert.EqualValues(t, "NO_CERT", attrVal.Str())
				case "nginx.ssl.handshakes":
					assert.False(t, validatedMetrics["nginx.ssl.handshakes"], "Found a duplicate in the metrics slice: nginx.ssl.handshakes")
					validatedMetrics["nginx.ssl.handshakes"] = true
					assert.Equal(t, pmetric.MetricTypeSum, ms.At(i).Type())
					assert.Equal(t, 1, ms.At(i).Sum().DataPoints().Len())
					assert.Equal(t, "The total number of SSL handshakes.", ms.At(i).Description())
					assert.Equal(t, "handshakes", ms.At(i).Unit())
					assert.Equal(t, true, ms.At(i).Sum().IsMonotonic())
					assert.Equal(t, pmetric.AggregationTemporalityCumulative, ms.At(i).Sum().AggregationTemporality())
					dp := ms.At(i).Sum().DataPoints().At(0)
					assert.Equal(t, start, dp.StartTimestamp())
					assert.Equal(t, ts, dp.Timestamp())
					assert.Equal(t, pmetric.NumberDataPointValueTypeInt, dp.ValueType())
					assert.Equal(t, int64(1), dp.IntValue())
					attrVal, ok := dp.Attributes().Get("nginx.ssl.status")
					assert.True(t, ok)
					assert.EqualValues(t, "FAILED", attrVal.Str())
					attrVal, ok = dp.Attributes().Get("nginx.ssl.handshake.reason")
					assert.True(t, ok)
					assert.EqualValues(t, "NO_COMMON_PROTOCOL", attrVal.Str())
				case "nginx.stream.byte.io":
					assert.False(t, validatedMetrics["nginx.stream.byte.io"], "Found a duplicate in the metrics slice: nginx.stream.byte.io")
					validatedMetrics["nginx.stream.byte.io"] = true
					assert.Equal(t, pmetric.MetricTypeSum, ms.At(i).Type())
					assert.Equal(t, 1, ms.At(i).Sum().DataPoints().Len())
					assert.Equal(t, "The total number of Stream byte IO.", ms.At(i).Description())
					assert.Equal(t, "bytes", ms.At(i).Unit())
					assert.Equal(t, true, ms.At(i).Sum().IsMonotonic())
					assert.Equal(t, pmetric.AggregationTemporalityCumulative, ms.At(i).Sum().AggregationTemporality())
					dp := ms.At(i).Sum().DataPoints().At(0)
					assert.Equal(t, start, dp.StartTimestamp())
					assert.Equal(t, ts, dp.Timestamp())
					assert.Equal(t, pmetric.NumberDataPointValueTypeInt, dp.ValueType())
					assert.Equal(t, int64(1), dp.IntValue())
					attrVal, ok := dp.Attributes().Get("nginx.byte.io.direction")
					assert.True(t, ok)
					assert.EqualValues(t, "RX", attrVal.Str())
					attrVal, ok = dp.Attributes().Get("nginx.zone.name")
					assert.True(t, ok)
					assert.EqualValues(t, "nginx.zone.name-val", attrVal.Str())
				case "nginx.stream.connection.accepted":
					assert.False(t, validatedMetrics["nginx.stream.connection.accepted"], "Found a duplicate in the metrics slice: nginx.stream.connection.accepted")
					validatedMetrics["nginx.stream.connection.accepted"] = true
					assert.Equal(t, pmetric.MetricTypeSum, ms.At(i).Type())
					assert.Equal(t, 1, ms.At(i).Sum().DataPoints().Len())
					assert.Equal(t, "The total number of connections accepted from clients.", ms.At(i).Description())
					assert.Equal(t, "connections", ms.At(i).Unit())
					assert.Equal(t, true, ms.At(i).Sum().IsMonotonic())
					assert.Equal(t, pmetric.AggregationTemporalityCumulative, ms.At(i).Sum().AggregationTemporality())
					dp := ms.At(i).Sum().DataPoints().At(0)
					assert.Equal(t, start, dp.StartTimestamp())
					assert.Equal(t, ts, dp.Timestamp())
					assert.Equal(t, pmetric.NumberDataPointValueTypeInt, dp.ValueType())
					assert.Equal(t, int64(1), dp.IntValue())
					attrVal, ok := dp.Attributes().Get("nginx.zone.name")
					assert.True(t, ok)
					assert.EqualValues(t, "nginx.zone.name-val", attrVal.Str())
				case "nginx.stream.connection.discarded":
					assert.False(t, validatedMetrics["nginx.stream.connection.discarded"], "Found a duplicate in the metrics slice: nginx.stream.connection.discarded")
					validatedMetrics["nginx.stream.connection.discarded"] = true
					assert.Equal(t, pmetric.MetricTypeSum, ms.At(i).Type())
					assert.Equal(t, 1, ms.At(i).Sum().DataPoints().Len())
					assert.Equal(t, "Total number of connections completed without creating a session.", ms.At(i).Description())
					assert.Equal(t, "connections", ms.At(i).Unit())
					assert.Equal(t, true, ms.At(i).Sum().IsMonotonic())
					assert.Equal(t, pmetric.AggregationTemporalityCumulative, ms.At(i).Sum().AggregationTemporality())
					dp := ms.At(i).Sum().DataPoints().At(0)
					assert.Equal(t, start, dp.StartTimestamp())
					assert.Equal(t, ts, dp.Timestamp())
					assert.Equal(t, pmetric.NumberDataPointValueTypeInt, dp.ValueType())
					assert.Equal(t, int64(1), dp.IntValue())
					attrVal, ok := dp.Attributes().Get("nginx.zone.name")
					assert.True(t, ok)
					assert.EqualValues(t, "nginx.zone.name-val", attrVal.Str())
				case "nginx.stream.connection.processing.count":
					assert.False(t, validatedMetrics["nginx.stream.connection.processing.count"], "Found a duplicate in the metrics slice: nginx.stream.connection.processing.count")
					validatedMetrics["nginx.stream.connection.processing.count"] = true
					assert.Equal(t, pmetric.MetricTypeGauge, ms.At(i).Type())
					assert.Equal(t, 1, ms.At(i).Gauge().DataPoints().Len())
					assert.Equal(t, "The number of client connections that are currently being processed.", ms.At(i).Description())
					assert.Equal(t, "connections", ms.At(i).Unit())
					dp := ms.At(i).Gauge().DataPoints().At(0)
					assert.Equal(t, start, dp.StartTimestamp())
					assert.Equal(t, ts, dp.Timestamp())
					assert.Equal(t, pmetric.NumberDataPointValueTypeInt, dp.ValueType())
					assert.Equal(t, int64(1), dp.IntValue())
					attrVal, ok := dp.Attributes().Get("nginx.zone.name")
					assert.True(t, ok)
					assert.EqualValues(t, "nginx.zone.name-val", attrVal.Str())
				case "nginx.stream.session.status":
					assert.False(t, validatedMetrics["nginx.stream.session.status"], "Found a duplicate in the metrics slice: nginx.stream.session.status")
					validatedMetrics["nginx.stream.session.status"] = true
					assert.Equal(t, pmetric.MetricTypeSum, ms.At(i).Type())
					assert.Equal(t, 1, ms.At(i).Sum().DataPoints().Len())
					assert.Equal(t, "The total number of completed sessions.", ms.At(i).Description())
					assert.Equal(t, "sessions", ms.At(i).Unit())
					assert.Equal(t, true, ms.At(i).Sum().IsMonotonic())
					assert.Equal(t, pmetric.AggregationTemporalityCumulative, ms.At(i).Sum().AggregationTemporality())
					dp := ms.At(i).Sum().DataPoints().At(0)
					assert.Equal(t, start, dp.StartTimestamp())
					assert.Equal(t, ts, dp.Timestamp())
					assert.Equal(t, pmetric.NumberDataPointValueTypeInt, dp.ValueType())
					assert.Equal(t, int64(1), dp.IntValue())
					attrVal, ok := dp.Attributes().Get("nginx.status_range")
					assert.True(t, ok)
					assert.EqualValues(t, "1xx", attrVal.Str())
					attrVal, ok = dp.Attributes().Get("nginx.zone.name")
					assert.True(t, ok)
					assert.EqualValues(t, "nginx.zone.name-val", attrVal.Str())
				case "nginx.stream.upstream.peer.byte.io":
					assert.False(t, validatedMetrics["nginx.stream.upstream.peer.byte.io"], "Found a duplicate in the metrics slice: nginx.stream.upstream.peer.byte.io")
					validatedMetrics["nginx.stream.upstream.peer.byte.io"] = true
					assert.Equal(t, pmetric.MetricTypeSum, ms.At(i).Type())
					assert.Equal(t, 1, ms.At(i).Sum().DataPoints().Len())
					assert.Equal(t, "The total number of Stream Upstream Peer byte IO.", ms.At(i).Description())
					assert.Equal(t, "bytes", ms.At(i).Unit())
					assert.Equal(t, true, ms.At(i).Sum().IsMonotonic())
					assert.Equal(t, pmetric.AggregationTemporalityCumulative, ms.At(i).Sum().AggregationTemporality())
					dp := ms.At(i).Sum().DataPoints().At(0)
					assert.Equal(t, start, dp.StartTimestamp())
					assert.Equal(t, ts, dp.Timestamp())
					assert.Equal(t, pmetric.NumberDataPointValueTypeInt, dp.ValueType())
					assert.Equal(t, int64(1), dp.IntValue())
					attrVal, ok := dp.Attributes().Get("nginx.byte.io.direction")
					assert.True(t, ok)
					assert.EqualValues(t, "RX", attrVal.Str())
					attrVal, ok = dp.Attributes().Get("nginx.zone.name")
					assert.True(t, ok)
					assert.EqualValues(t, "nginx.zone.name-val", attrVal.Str())
					attrVal, ok = dp.Attributes().Get("nginx.upstream.name")
					assert.True(t, ok)
					assert.EqualValues(t, "nginx.upstream.name-val", attrVal.Str())
					attrVal, ok = dp.Attributes().Get("nginx.peer.address")
					assert.True(t, ok)
					assert.EqualValues(t, "nginx.peer.address-val", attrVal.Str())
					attrVal, ok = dp.Attributes().Get("nginx.peer.name")
					assert.True(t, ok)
					assert.EqualValues(t, "nginx.peer.name-val", attrVal.Str())
				case "nginx.stream.upstream.peer.conn.count":
					assert.False(t, validatedMetrics["nginx.stream.upstream.peer.conn.count"], "Found a duplicate in the metrics slice: nginx.stream.upstream.peer.conn.count")
					validatedMetrics["nginx.stream.upstream.peer.conn.count"] = true
					assert.Equal(t, pmetric.MetricTypeGauge, ms.At(i).Type())
					assert.Equal(t, 1, ms.At(i).Gauge().DataPoints().Len())
					assert.Equal(t, "The current number of Stream Upstream Peer connections.", ms.At(i).Description())
					assert.Equal(t, "connections", ms.At(i).Unit())
					dp := ms.At(i).Gauge().DataPoints().At(0)
					assert.Equal(t, start, dp.StartTimestamp())
					assert.Equal(t, ts, dp.Timestamp())
					assert.Equal(t, pmetric.NumberDataPointValueTypeInt, dp.ValueType())
					assert.Equal(t, int64(1), dp.IntValue())
					attrVal, ok := dp.Attributes().Get("nginx.zone.name")
					assert.True(t, ok)
					assert.EqualValues(t, "nginx.zone.name-val", attrVal.Str())
					attrVal, ok = dp.Attributes().Get("nginx.upstream.name")
					assert.True(t, ok)
					assert.EqualValues(t, "nginx.upstream.name-val", attrVal.Str())
					attrVal, ok = dp.Attributes().Get("nginx.peer.address")
					assert.True(t, ok)
					assert.EqualValues(t, "nginx.peer.address-val", attrVal.Str())
					attrVal, ok = dp.Attributes().Get("nginx.peer.name")
					assert.True(t, ok)
					assert.EqualValues(t, "nginx.peer.name-val", attrVal.Str())
				case "nginx.stream.upstream.peer.conn.time":
					assert.False(t, validatedMetrics["nginx.stream.upstream.peer.conn.time"], "Found a duplicate in the metrics slice: nginx.stream.upstream.peer.conn.time")
					validatedMetrics["nginx.stream.upstream.peer.conn.time"] = true
					assert.Equal(t, pmetric.MetricTypeGauge, ms.At(i).Type())
					assert.Equal(t, 1, ms.At(i).Gauge().DataPoints().Len())
					assert.Equal(t, "The average time to connect to the stream upstream peer.", ms.At(i).Description())
					assert.Equal(t, "ms", ms.At(i).Unit())
					dp := ms.At(i).Gauge().DataPoints().At(0)
					assert.Equal(t, start, dp.StartTimestamp())
					assert.Equal(t, ts, dp.Timestamp())
					assert.Equal(t, pmetric.NumberDataPointValueTypeInt, dp.ValueType())
					assert.Equal(t, int64(1), dp.IntValue())
					attrVal, ok := dp.Attributes().Get("nginx.zone.name")
					assert.True(t, ok)
					assert.EqualValues(t, "nginx.zone.name-val", attrVal.Str())
					attrVal, ok = dp.Attributes().Get("nginx.upstream.name")
					assert.True(t, ok)
					assert.EqualValues(t, "nginx.upstream.name-val", attrVal.Str())
					attrVal, ok = dp.Attributes().Get("nginx.peer.address")
					assert.True(t, ok)
					assert.EqualValues(t, "nginx.peer.address-val", attrVal.Str())
					attrVal, ok = dp.Attributes().Get("nginx.peer.name")
					assert.True(t, ok)
					assert.EqualValues(t, "nginx.peer.name-val", attrVal.Str())
				case "nginx.stream.upstream.peer.conns":
					assert.False(t, validatedMetrics["nginx.stream.upstream.peer.conns"], "Found a duplicate in the metrics slice: nginx.stream.upstream.peer.conns")
					validatedMetrics["nginx.stream.upstream.peer.conns"] = true
					assert.Equal(t, pmetric.MetricTypeSum, ms.At(i).Type())
					assert.Equal(t, 1, ms.At(i).Sum().DataPoints().Len())
					assert.Equal(t, "The total number of client connections forwarded to this stream upstream peer.", ms.At(i).Description())
					assert.Equal(t, "connections", ms.At(i).Unit())
					assert.Equal(t, true, ms.At(i).Sum().IsMonotonic())
					assert.Equal(t, pmetric.AggregationTemporalityCumulative, ms.At(i).Sum().AggregationTemporality())
					dp := ms.At(i).Sum().DataPoints().At(0)
					assert.Equal(t, start, dp.StartTimestamp())
					assert.Equal(t, ts, dp.Timestamp())
					assert.Equal(t, pmetric.NumberDataPointValueTypeInt, dp.ValueType())
					assert.Equal(t, int64(1), dp.IntValue())
					attrVal, ok := dp.Attributes().Get("nginx.zone.name")
					assert.True(t, ok)
					assert.EqualValues(t, "nginx.zone.name-val", attrVal.Str())
					attrVal, ok = dp.Attributes().Get("nginx.upstream.name")
					assert.True(t, ok)
					assert.EqualValues(t, "nginx.upstream.name-val", attrVal.Str())
					attrVal, ok = dp.Attributes().Get("nginx.peer.address")
					assert.True(t, ok)
					assert.EqualValues(t, "nginx.peer.address-val", attrVal.Str())
					attrVal, ok = dp.Attributes().Get("nginx.peer.name")
					assert.True(t, ok)
					assert.EqualValues(t, "nginx.peer.name-val", attrVal.Str())
				case "nginx.stream.upstream.peer.count":
					assert.False(t, validatedMetrics["nginx.stream.upstream.peer.count"], "Found a duplicate in the metrics slice: nginx.stream.upstream.peer.count")
					validatedMetrics["nginx.stream.upstream.peer.count"] = true
					assert.Equal(t, pmetric.MetricTypeSum, ms.At(i).Type())
					assert.Equal(t, 1, ms.At(i).Sum().DataPoints().Len())
					assert.Equal(t, "The total number of stream upstream peers grouped by state.", ms.At(i).Description())
					assert.Equal(t, "peers", ms.At(i).Unit())
					assert.Equal(t, true, ms.At(i).Sum().IsMonotonic())
					assert.Equal(t, pmetric.AggregationTemporalityCumulative, ms.At(i).Sum().AggregationTemporality())
					dp := ms.At(i).Sum().DataPoints().At(0)
					assert.Equal(t, start, dp.StartTimestamp())
					assert.Equal(t, ts, dp.Timestamp())
					assert.Equal(t, pmetric.NumberDataPointValueTypeInt, dp.ValueType())
					assert.Equal(t, int64(1), dp.IntValue())
					attrVal, ok := dp.Attributes().Get("nginx.peer.state")
					assert.True(t, ok)
					assert.EqualValues(t, "CHECKING", attrVal.Str())
					attrVal, ok = dp.Attributes().Get("nginx.zone.name")
					assert.True(t, ok)
					assert.EqualValues(t, "nginx.zone.name-val", attrVal.Str())
					attrVal, ok = dp.Attributes().Get("nginx.upstream.name")
					assert.True(t, ok)
					assert.EqualValues(t, "nginx.upstream.name-val", attrVal.Str())
				case "nginx.stream.upstream.peer.fails":
					assert.False(t, validatedMetrics["nginx.stream.upstream.peer.fails"], "Found a duplicate in the metrics slice: nginx.stream.upstream.peer.fails")
					validatedMetrics["nginx.stream.upstream.peer.fails"] = true
					assert.Equal(t, pmetric.MetricTypeSum, ms.At(i).Type())
					assert.Equal(t, 1, ms.At(i).Sum().DataPoints().Len())
					assert.Equal(t, "The total number of unsuccessful attempts to communicate with the stream upstream peer.", ms.At(i).Description())
					assert.Equal(t, "peers", ms.At(i).Unit())
					assert.Equal(t, true, ms.At(i).Sum().IsMonotonic())
					assert.Equal(t, pmetric.AggregationTemporalityCumulative, ms.At(i).Sum().AggregationTemporality())
					dp := ms.At(i).Sum().DataPoints().At(0)
					assert.Equal(t, start, dp.StartTimestamp())
					assert.Equal(t, ts, dp.Timestamp())
					assert.Equal(t, pmetric.NumberDataPointValueTypeInt, dp.ValueType())
					assert.Equal(t, int64(1), dp.IntValue())
					attrVal, ok := dp.Attributes().Get("nginx.zone.name")
					assert.True(t, ok)
					assert.EqualValues(t, "nginx.zone.name-val", attrVal.Str())
					attrVal, ok = dp.Attributes().Get("nginx.upstream.name")
					assert.True(t, ok)
					assert.EqualValues(t, "nginx.upstream.name-val", attrVal.Str())
					attrVal, ok = dp.Attributes().Get("nginx.peer.address")
					assert.True(t, ok)
					assert.EqualValues(t, "nginx.peer.address-val", attrVal.Str())
				case "nginx.stream.upstream.peer.health_checks":
					assert.False(t, validatedMetrics["nginx.stream.upstream.peer.health_checks"], "Found a duplicate in the metrics slice: nginx.stream.upstream.peer.health_checks")
					validatedMetrics["nginx.stream.upstream.peer.health_checks"] = true
					assert.Equal(t, pmetric.MetricTypeSum, ms.At(i).Type())
					assert.Equal(t, 1, ms.At(i).Sum().DataPoints().Len())
					assert.Equal(t, "The total number of health check requests made to the stream upstream peer.", ms.At(i).Description())
					assert.Equal(t, "requests", ms.At(i).Unit())
					assert.Equal(t, true, ms.At(i).Sum().IsMonotonic())
					assert.Equal(t, pmetric.AggregationTemporalityCumulative, ms.At(i).Sum().AggregationTemporality())
					dp := ms.At(i).Sum().DataPoints().At(0)
					assert.Equal(t, start, dp.StartTimestamp())
					assert.Equal(t, ts, dp.Timestamp())
					assert.Equal(t, pmetric.NumberDataPointValueTypeInt, dp.ValueType())
					assert.Equal(t, int64(1), dp.IntValue())
					attrVal, ok := dp.Attributes().Get("nginx.health_check")
					assert.True(t, ok)
					assert.EqualValues(t, "UNHEALTHY", attrVal.Str())
					attrVal, ok = dp.Attributes().Get("nginx.zone.name")
					assert.True(t, ok)
					assert.EqualValues(t, "nginx.zone.name-val", attrVal.Str())
					attrVal, ok = dp.Attributes().Get("nginx.upstream.name")
					assert.True(t, ok)
					assert.EqualValues(t, "nginx.upstream.name-val", attrVal.Str())
					attrVal, ok = dp.Attributes().Get("nginx.peer.address")
					assert.True(t, ok)
					assert.EqualValues(t, "nginx.peer.address-val", attrVal.Str())
					attrVal, ok = dp.Attributes().Get("nginx.peer.name")
					assert.True(t, ok)
					assert.EqualValues(t, "nginx.peer.name-val", attrVal.Str())
				case "nginx.stream.upstream.peer.response.time":
					assert.False(t, validatedMetrics["nginx.stream.upstream.peer.response.time"], "Found a duplicate in the metrics slice: nginx.stream.upstream.peer.response.time")
					validatedMetrics["nginx.stream.upstream.peer.response.time"] = true
					assert.Equal(t, pmetric.MetricTypeGauge, ms.At(i).Type())
					assert.Equal(t, 1, ms.At(i).Gauge().DataPoints().Len())
					assert.Equal(t, "The average time to receive the last byte of data for the stream upstream peer.", ms.At(i).Description())
					assert.Equal(t, "ms", ms.At(i).Unit())
					dp := ms.At(i).Gauge().DataPoints().At(0)
					assert.Equal(t, start, dp.StartTimestamp())
					assert.Equal(t, ts, dp.Timestamp())
					assert.Equal(t, pmetric.NumberDataPointValueTypeInt, dp.ValueType())
					assert.Equal(t, int64(1), dp.IntValue())
					attrVal, ok := dp.Attributes().Get("nginx.zone.name")
					assert.True(t, ok)
					assert.EqualValues(t, "nginx.zone.name-val", attrVal.Str())
					attrVal, ok = dp.Attributes().Get("nginx.upstream.name")
					assert.True(t, ok)
					assert.EqualValues(t, "nginx.upstream.name-val", attrVal.Str())
					attrVal, ok = dp.Attributes().Get("nginx.peer.address")
					assert.True(t, ok)
					assert.EqualValues(t, "nginx.peer.address-val", attrVal.Str())
					attrVal, ok = dp.Attributes().Get("nginx.peer.name")
					assert.True(t, ok)
					assert.EqualValues(t, "nginx.peer.name-val", attrVal.Str())
				case "nginx.stream.upstream.peer.state":
					assert.False(t, validatedMetrics["nginx.stream.upstream.peer.state"], "Found a duplicate in the metrics slice: nginx.stream.upstream.peer.state")
					validatedMetrics["nginx.stream.upstream.peer.state"] = true
					assert.Equal(t, pmetric.MetricTypeSum, ms.At(i).Type())
					assert.Equal(t, 1, ms.At(i).Sum().DataPoints().Len())
					assert.Equal(t, "Current state of upstream peers in deployment. If any of the upstream peers in the deployment match the given state then the value will be 1. If no upstream peer is a match then the value will be 0.", ms.At(i).Description())
					assert.Equal(t, "deployments", ms.At(i).Unit())
					assert.Equal(t, true, ms.At(i).Sum().IsMonotonic())
					assert.Equal(t, pmetric.AggregationTemporalityCumulative, ms.At(i).Sum().AggregationTemporality())
					dp := ms.At(i).Sum().DataPoints().At(0)
					assert.Equal(t, start, dp.StartTimestamp())
					assert.Equal(t, ts, dp.Timestamp())
					assert.Equal(t, pmetric.NumberDataPointValueTypeInt, dp.ValueType())
					assert.Equal(t, int64(1), dp.IntValue())
					attrVal, ok := dp.Attributes().Get("nginx.peer.state")
					assert.True(t, ok)
					assert.EqualValues(t, "CHECKING", attrVal.Str())
					attrVal, ok = dp.Attributes().Get("nginx.zone.name")
					assert.True(t, ok)
					assert.EqualValues(t, "nginx.zone.name-val", attrVal.Str())
					attrVal, ok = dp.Attributes().Get("nginx.upstream.name")
					assert.True(t, ok)
					assert.EqualValues(t, "nginx.upstream.name-val", attrVal.Str())
					attrVal, ok = dp.Attributes().Get("nginx.peer.address")
					assert.True(t, ok)
					assert.EqualValues(t, "nginx.peer.address-val", attrVal.Str())
					attrVal, ok = dp.Attributes().Get("nginx.peer.name")
					assert.True(t, ok)
					assert.EqualValues(t, "nginx.peer.name-val", attrVal.Str())
				case "nginx.stream.upstream.peer.ttfb.time":
					assert.False(t, validatedMetrics["nginx.stream.upstream.peer.ttfb.time"], "Found a duplicate in the metrics slice: nginx.stream.upstream.peer.ttfb.time")
					validatedMetrics["nginx.stream.upstream.peer.ttfb.time"] = true
					assert.Equal(t, pmetric.MetricTypeGauge, ms.At(i).Type())
					assert.Equal(t, 1, ms.At(i).Gauge().DataPoints().Len())
					assert.Equal(t, "The average time to receive the first byte of data for the stream upstream peer.", ms.At(i).Description())
					assert.Equal(t, "ms", ms.At(i).Unit())
					dp := ms.At(i).Gauge().DataPoints().At(0)
					assert.Equal(t, start, dp.StartTimestamp())
					assert.Equal(t, ts, dp.Timestamp())
					assert.Equal(t, pmetric.NumberDataPointValueTypeInt, dp.ValueType())
					assert.Equal(t, int64(1), dp.IntValue())
					attrVal, ok := dp.Attributes().Get("nginx.zone.name")
					assert.True(t, ok)
					assert.EqualValues(t, "nginx.zone.name-val", attrVal.Str())
					attrVal, ok = dp.Attributes().Get("nginx.upstream.name")
					assert.True(t, ok)
					assert.EqualValues(t, "nginx.upstream.name-val", attrVal.Str())
					attrVal, ok = dp.Attributes().Get("nginx.peer.address")
					assert.True(t, ok)
					assert.EqualValues(t, "nginx.peer.address-val", attrVal.Str())
					attrVal, ok = dp.Attributes().Get("nginx.peer.name")
					assert.True(t, ok)
					assert.EqualValues(t, "nginx.peer.name-val", attrVal.Str())
				case "nginx.stream.upstream.peer.unavailable":
					assert.False(t, validatedMetrics["nginx.stream.upstream.peer.unavailable"], "Found a duplicate in the metrics slice: nginx.stream.upstream.peer.unavailable")
					validatedMetrics["nginx.stream.upstream.peer.unavailable"] = true
					assert.Equal(t, pmetric.MetricTypeSum, ms.At(i).Type())
					assert.Equal(t, 1, ms.At(i).Sum().DataPoints().Len())
					assert.Equal(t, "How many times the server became unavailable for client connections (state “unavail”) due to the number of unsuccessful attempts reaching the max_fails threshold.", ms.At(i).Description())
					assert.Equal(t, "requests", ms.At(i).Unit())
					assert.Equal(t, true, ms.At(i).Sum().IsMonotonic())
					assert.Equal(t, pmetric.AggregationTemporalityCumulative, ms.At(i).Sum().AggregationTemporality())
					dp := ms.At(i).Sum().DataPoints().At(0)
					assert.Equal(t, start, dp.StartTimestamp())
					assert.Equal(t, ts, dp.Timestamp())
					assert.Equal(t, pmetric.NumberDataPointValueTypeInt, dp.ValueType())
					assert.Equal(t, int64(1), dp.IntValue())
					attrVal, ok := dp.Attributes().Get("nginx.zone.name")
					assert.True(t, ok)
					assert.EqualValues(t, "nginx.zone.name-val", attrVal.Str())
					attrVal, ok = dp.Attributes().Get("nginx.upstream.name")
					assert.True(t, ok)
					assert.EqualValues(t, "nginx.upstream.name-val", attrVal.Str())
					attrVal, ok = dp.Attributes().Get("nginx.peer.address")
					assert.True(t, ok)
					assert.EqualValues(t, "nginx.peer.address-val", attrVal.Str())
					attrVal, ok = dp.Attributes().Get("nginx.peer.name")
					assert.True(t, ok)
					assert.EqualValues(t, "nginx.peer.name-val", attrVal.Str())
				case "nginx.stream.upstream.zombie.count":
					assert.False(t, validatedMetrics["nginx.stream.upstream.zombie.count"], "Found a duplicate in the metrics slice: nginx.stream.upstream.zombie.count")
					validatedMetrics["nginx.stream.upstream.zombie.count"] = true
					assert.Equal(t, pmetric.MetricTypeGauge, ms.At(i).Type())
					assert.Equal(t, 1, ms.At(i).Gauge().DataPoints().Len())
					assert.Equal(t, "The current number of peers removed from the group but still processing active client connections.", ms.At(i).Description())
					assert.Equal(t, "deployments", ms.At(i).Unit())
					dp := ms.At(i).Gauge().DataPoints().At(0)
					assert.Equal(t, start, dp.StartTimestamp())
					assert.Equal(t, ts, dp.Timestamp())
					assert.Equal(t, pmetric.NumberDataPointValueTypeInt, dp.ValueType())
					assert.Equal(t, int64(1), dp.IntValue())
					attrVal, ok := dp.Attributes().Get("nginx.zone.name")
					assert.True(t, ok)
					assert.EqualValues(t, "nginx.zone.name-val", attrVal.Str())
					attrVal, ok = dp.Attributes().Get("nginx.upstream.name")
					assert.True(t, ok)
					assert.EqualValues(t, "nginx.upstream.name-val", attrVal.Str())
				}
			}
		})
	}
}
