// Code generated by counterfeiter. DO NOT EDIT.
package resourcefakes

import (
	"context"
	"sync"
)

type FakeLogTailerOperator struct {
	TailStub        func(context.Context, string, chan error)
	tailMutex       sync.RWMutex
	tailArgsForCall []struct {
		arg1 context.Context
		arg2 string
		arg3 chan error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeLogTailerOperator) Tail(arg1 context.Context, arg2 string, arg3 chan error) {
	fake.tailMutex.Lock()
	fake.tailArgsForCall = append(fake.tailArgsForCall, struct {
		arg1 context.Context
		arg2 string
		arg3 chan error
	}{arg1, arg2, arg3})
	stub := fake.TailStub
	fake.recordInvocation("Tail", []interface{}{arg1, arg2, arg3})
	fake.tailMutex.Unlock()
	if stub != nil {
		fake.TailStub(arg1, arg2, arg3)
	}
}

func (fake *FakeLogTailerOperator) TailCallCount() int {
	fake.tailMutex.RLock()
	defer fake.tailMutex.RUnlock()
	return len(fake.tailArgsForCall)
}

func (fake *FakeLogTailerOperator) TailCalls(stub func(context.Context, string, chan error)) {
	fake.tailMutex.Lock()
	defer fake.tailMutex.Unlock()
	fake.TailStub = stub
}

func (fake *FakeLogTailerOperator) TailArgsForCall(i int) (context.Context, string, chan error) {
	fake.tailMutex.RLock()
	defer fake.tailMutex.RUnlock()
	argsForCall := fake.tailArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeLogTailerOperator) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.tailMutex.RLock()
	defer fake.tailMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakeLogTailerOperator) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}
