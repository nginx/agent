// Code generated by counterfeiter. DO NOT EDIT.
package resourcefakes

import (
	"context"
	"sync"

	"github.com/nginx/agent/v3/pkg/nginxprocess"
)

type FakeProcessOperator struct {
	FindNginxProcessesStub        func(context.Context) ([]*nginxprocess.Process, error)
	findNginxProcessesMutex       sync.RWMutex
	findNginxProcessesArgsForCall []struct {
		arg1 context.Context
	}
	findNginxProcessesReturns struct {
		result1 []*nginxprocess.Process
		result2 error
	}
	findNginxProcessesReturnsOnCall map[int]struct {
		result1 []*nginxprocess.Process
		result2 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeProcessOperator) FindNginxProcesses(arg1 context.Context) ([]*nginxprocess.Process, error) {
	fake.findNginxProcessesMutex.Lock()
	ret, specificReturn := fake.findNginxProcessesReturnsOnCall[len(fake.findNginxProcessesArgsForCall)]
	fake.findNginxProcessesArgsForCall = append(fake.findNginxProcessesArgsForCall, struct {
		arg1 context.Context
	}{arg1})
	stub := fake.FindNginxProcessesStub
	fakeReturns := fake.findNginxProcessesReturns
	fake.recordInvocation("FindNginxProcesses", []interface{}{arg1})
	fake.findNginxProcessesMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeProcessOperator) FindNginxProcessesCallCount() int {
	fake.findNginxProcessesMutex.RLock()
	defer fake.findNginxProcessesMutex.RUnlock()
	return len(fake.findNginxProcessesArgsForCall)
}

func (fake *FakeProcessOperator) FindNginxProcessesCalls(stub func(context.Context) ([]*nginxprocess.Process, error)) {
	fake.findNginxProcessesMutex.Lock()
	defer fake.findNginxProcessesMutex.Unlock()
	fake.FindNginxProcessesStub = stub
}

func (fake *FakeProcessOperator) FindNginxProcessesArgsForCall(i int) context.Context {
	fake.findNginxProcessesMutex.RLock()
	defer fake.findNginxProcessesMutex.RUnlock()
	argsForCall := fake.findNginxProcessesArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeProcessOperator) FindNginxProcessesReturns(result1 []*nginxprocess.Process, result2 error) {
	fake.findNginxProcessesMutex.Lock()
	defer fake.findNginxProcessesMutex.Unlock()
	fake.FindNginxProcessesStub = nil
	fake.findNginxProcessesReturns = struct {
		result1 []*nginxprocess.Process
		result2 error
	}{result1, result2}
}

func (fake *FakeProcessOperator) FindNginxProcessesReturnsOnCall(i int, result1 []*nginxprocess.Process, result2 error) {
	fake.findNginxProcessesMutex.Lock()
	defer fake.findNginxProcessesMutex.Unlock()
	fake.FindNginxProcessesStub = nil
	if fake.findNginxProcessesReturnsOnCall == nil {
		fake.findNginxProcessesReturnsOnCall = make(map[int]struct {
			result1 []*nginxprocess.Process
			result2 error
		})
	}
	fake.findNginxProcessesReturnsOnCall[i] = struct {
		result1 []*nginxprocess.Process
		result2 error
	}{result1, result2}
}

func (fake *FakeProcessOperator) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.findNginxProcessesMutex.RLock()
	defer fake.findNginxProcessesMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakeProcessOperator) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}
