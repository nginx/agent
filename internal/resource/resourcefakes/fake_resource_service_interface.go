// Code generated by counterfeiter. DO NOT EDIT.
package resourcefakes

import (
	"sync"

	v1 "github.com/nginx/agent/v3/api/grpc/mpi/v1"
)

type FakeResourceServiceInterface struct {
	AddInstancesStub        func([]*v1.Instance) *v1.Resource
	addInstancesMutex       sync.RWMutex
	addInstancesArgsForCall []struct {
		arg1 []*v1.Instance
	}
	addInstancesReturns struct {
		result1 *v1.Resource
	}
	addInstancesReturnsOnCall map[int]struct {
		result1 *v1.Resource
	}
	DeleteInstancesStub        func([]*v1.Instance) *v1.Resource
	deleteInstancesMutex       sync.RWMutex
	deleteInstancesArgsForCall []struct {
		arg1 []*v1.Instance
	}
	deleteInstancesReturns struct {
		result1 *v1.Resource
	}
	deleteInstancesReturnsOnCall map[int]struct {
		result1 *v1.Resource
	}
	UpdateInstancesStub        func([]*v1.Instance) *v1.Resource
	updateInstancesMutex       sync.RWMutex
	updateInstancesArgsForCall []struct {
		arg1 []*v1.Instance
	}
	updateInstancesReturns struct {
		result1 *v1.Resource
	}
	updateInstancesReturnsOnCall map[int]struct {
		result1 *v1.Resource
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeResourceServiceInterface) AddInstances(arg1 []*v1.Instance) *v1.Resource {
	var arg1Copy []*v1.Instance
	if arg1 != nil {
		arg1Copy = make([]*v1.Instance, len(arg1))
		copy(arg1Copy, arg1)
	}
	fake.addInstancesMutex.Lock()
	ret, specificReturn := fake.addInstancesReturnsOnCall[len(fake.addInstancesArgsForCall)]
	fake.addInstancesArgsForCall = append(fake.addInstancesArgsForCall, struct {
		arg1 []*v1.Instance
	}{arg1Copy})
	stub := fake.AddInstancesStub
	fakeReturns := fake.addInstancesReturns
	fake.recordInvocation("AddInstances", []interface{}{arg1Copy})
	fake.addInstancesMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeResourceServiceInterface) AddInstancesCallCount() int {
	fake.addInstancesMutex.RLock()
	defer fake.addInstancesMutex.RUnlock()
	return len(fake.addInstancesArgsForCall)
}

func (fake *FakeResourceServiceInterface) AddInstancesCalls(stub func([]*v1.Instance) *v1.Resource) {
	fake.addInstancesMutex.Lock()
	defer fake.addInstancesMutex.Unlock()
	fake.AddInstancesStub = stub
}

func (fake *FakeResourceServiceInterface) AddInstancesArgsForCall(i int) []*v1.Instance {
	fake.addInstancesMutex.RLock()
	defer fake.addInstancesMutex.RUnlock()
	argsForCall := fake.addInstancesArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeResourceServiceInterface) AddInstancesReturns(result1 *v1.Resource) {
	fake.addInstancesMutex.Lock()
	defer fake.addInstancesMutex.Unlock()
	fake.AddInstancesStub = nil
	fake.addInstancesReturns = struct {
		result1 *v1.Resource
	}{result1}
}

func (fake *FakeResourceServiceInterface) AddInstancesReturnsOnCall(i int, result1 *v1.Resource) {
	fake.addInstancesMutex.Lock()
	defer fake.addInstancesMutex.Unlock()
	fake.AddInstancesStub = nil
	if fake.addInstancesReturnsOnCall == nil {
		fake.addInstancesReturnsOnCall = make(map[int]struct {
			result1 *v1.Resource
		})
	}
	fake.addInstancesReturnsOnCall[i] = struct {
		result1 *v1.Resource
	}{result1}
}

func (fake *FakeResourceServiceInterface) DeleteInstances(arg1 []*v1.Instance) *v1.Resource {
	var arg1Copy []*v1.Instance
	if arg1 != nil {
		arg1Copy = make([]*v1.Instance, len(arg1))
		copy(arg1Copy, arg1)
	}
	fake.deleteInstancesMutex.Lock()
	ret, specificReturn := fake.deleteInstancesReturnsOnCall[len(fake.deleteInstancesArgsForCall)]
	fake.deleteInstancesArgsForCall = append(fake.deleteInstancesArgsForCall, struct {
		arg1 []*v1.Instance
	}{arg1Copy})
	stub := fake.DeleteInstancesStub
	fakeReturns := fake.deleteInstancesReturns
	fake.recordInvocation("DeleteInstances", []interface{}{arg1Copy})
	fake.deleteInstancesMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeResourceServiceInterface) DeleteInstancesCallCount() int {
	fake.deleteInstancesMutex.RLock()
	defer fake.deleteInstancesMutex.RUnlock()
	return len(fake.deleteInstancesArgsForCall)
}

func (fake *FakeResourceServiceInterface) DeleteInstancesCalls(stub func([]*v1.Instance) *v1.Resource) {
	fake.deleteInstancesMutex.Lock()
	defer fake.deleteInstancesMutex.Unlock()
	fake.DeleteInstancesStub = stub
}

func (fake *FakeResourceServiceInterface) DeleteInstancesArgsForCall(i int) []*v1.Instance {
	fake.deleteInstancesMutex.RLock()
	defer fake.deleteInstancesMutex.RUnlock()
	argsForCall := fake.deleteInstancesArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeResourceServiceInterface) DeleteInstancesReturns(result1 *v1.Resource) {
	fake.deleteInstancesMutex.Lock()
	defer fake.deleteInstancesMutex.Unlock()
	fake.DeleteInstancesStub = nil
	fake.deleteInstancesReturns = struct {
		result1 *v1.Resource
	}{result1}
}

func (fake *FakeResourceServiceInterface) DeleteInstancesReturnsOnCall(i int, result1 *v1.Resource) {
	fake.deleteInstancesMutex.Lock()
	defer fake.deleteInstancesMutex.Unlock()
	fake.DeleteInstancesStub = nil
	if fake.deleteInstancesReturnsOnCall == nil {
		fake.deleteInstancesReturnsOnCall = make(map[int]struct {
			result1 *v1.Resource
		})
	}
	fake.deleteInstancesReturnsOnCall[i] = struct {
		result1 *v1.Resource
	}{result1}
}

func (fake *FakeResourceServiceInterface) UpdateInstances(arg1 []*v1.Instance) *v1.Resource {
	var arg1Copy []*v1.Instance
	if arg1 != nil {
		arg1Copy = make([]*v1.Instance, len(arg1))
		copy(arg1Copy, arg1)
	}
	fake.updateInstancesMutex.Lock()
	ret, specificReturn := fake.updateInstancesReturnsOnCall[len(fake.updateInstancesArgsForCall)]
	fake.updateInstancesArgsForCall = append(fake.updateInstancesArgsForCall, struct {
		arg1 []*v1.Instance
	}{arg1Copy})
	stub := fake.UpdateInstancesStub
	fakeReturns := fake.updateInstancesReturns
	fake.recordInvocation("UpdateInstances", []interface{}{arg1Copy})
	fake.updateInstancesMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeResourceServiceInterface) UpdateInstancesCallCount() int {
	fake.updateInstancesMutex.RLock()
	defer fake.updateInstancesMutex.RUnlock()
	return len(fake.updateInstancesArgsForCall)
}

func (fake *FakeResourceServiceInterface) UpdateInstancesCalls(stub func([]*v1.Instance) *v1.Resource) {
	fake.updateInstancesMutex.Lock()
	defer fake.updateInstancesMutex.Unlock()
	fake.UpdateInstancesStub = stub
}

func (fake *FakeResourceServiceInterface) UpdateInstancesArgsForCall(i int) []*v1.Instance {
	fake.updateInstancesMutex.RLock()
	defer fake.updateInstancesMutex.RUnlock()
	argsForCall := fake.updateInstancesArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeResourceServiceInterface) UpdateInstancesReturns(result1 *v1.Resource) {
	fake.updateInstancesMutex.Lock()
	defer fake.updateInstancesMutex.Unlock()
	fake.UpdateInstancesStub = nil
	fake.updateInstancesReturns = struct {
		result1 *v1.Resource
	}{result1}
}

func (fake *FakeResourceServiceInterface) UpdateInstancesReturnsOnCall(i int, result1 *v1.Resource) {
	fake.updateInstancesMutex.Lock()
	defer fake.updateInstancesMutex.Unlock()
	fake.UpdateInstancesStub = nil
	if fake.updateInstancesReturnsOnCall == nil {
		fake.updateInstancesReturnsOnCall = make(map[int]struct {
			result1 *v1.Resource
		})
	}
	fake.updateInstancesReturnsOnCall[i] = struct {
		result1 *v1.Resource
	}{result1}
}

func (fake *FakeResourceServiceInterface) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.addInstancesMutex.RLock()
	defer fake.addInstancesMutex.RUnlock()
	fake.deleteInstancesMutex.RLock()
	defer fake.deleteInstancesMutex.RUnlock()
	fake.updateInstancesMutex.RLock()
	defer fake.updateInstancesMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakeResourceServiceInterface) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}
