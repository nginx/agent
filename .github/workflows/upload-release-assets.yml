name: Release Agent

on:
  workflow_dispatch:
    inputs:
      version:
        description: 'Agent version'
        type: string
        default: ""
      uploadAzure:
        description: 'Publish packages Azure storage'
        type: boolean
        default: false
      githubRelease:
        description: 'Setup release in github'
        type: boolean
        default: false
      pkgRepo:
        description: "Source repository to pull packages from"
        type: string
        default: ""

defaults:
  run:
    shell: bash

permissions:
  contents: read

jobs:
  vars:
    name: Set workflow variables
    runs-on: ubuntu-22.04
    outputs:
      github_release: ${{steps.vars.outputs.github_release }}
      upload_azure: ${{steps.vars.outputs.upload_azure }}
    steps:
      - name: Checkout Repository
        uses: actions/checkout@9bb56186c3b09b4f86b1c65136769dd318469633 # v4.1.2
        with:
          ref: ${{ inputs.releaseBranch }}

      - name: Set variables
        id: vars
        run: |
          echo "github_release=${{ inputs.githubRelease }}" >> $GITHUB_OUTPUT
          echo "upload_azure=${{ inputs.uploadAzure }}" >> $GITHUB_OUTPUT
          cat $GITHUB_OUTPUT

  upload-release-assets:
    name: Upload assets
    runs-on: ubuntu-22.04-amd64
    needs: [vars]
    permissions:
      id-token: write
    steps:
      - name: Checkout Repository
        uses: actions/checkout@9bb56186c3b09b4f86b1c65136769dd318469633 # v4.1.2
        with:
          ref: ${{ inputs.releaseBranch }}

      - name: Azure Login
        if: ${{ inputs.uploadAzure == true }}
        uses: azure/login@8c334a195cbb38e46038007b304988d888bf676a # v2.0.0
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      - name: Get Id Token
        if: ${{ inputs.publishPackages == true }}
        uses: actions/github-script@60a0d83039c74a4aee543508d2ffcb1c3799cdea # v7.0.1
        id: idtoken
        with:
          script: |
            let id_token = await core.getIDToken()
            core.setOutput('id_token', id_token)

      - name: Download Packages
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run:
          |
          echo "Checking Packages in ${{inputs.pkgRepo}}/nginx-agent"
          PKG_REPO=${{inputs.pkgRepo}} CERT=${{PUBTEST_CERT}} KEY=${{PUBTEST_KEY}} DL=1 scripts/packages/package_check.sh ${{version}}
          find ${{inputs.pkgRepo}}/nginx-agent | grep -e "nginx-agent[_-]${{version}}"

      - name: Azure Upload Release Packages
        if: ${{ inputs.uploadAzure == true }}
        uses: azure/CLI@965c8d7571d2231a54e321ddd07f7b10317f34d9 # v2.0.0
        with:
          inlineScript: |
            for i in $(find pkgs-test.nginx.com/nginx-agent | grep -e "nginx-agent[_-]${{version}}"); do
              echo "Uploading ${i} to nginx-agent/${GITHUB_REF##*/}/${i##*/}"
              az storage blob upload --auth-mode=login -f "$i" -c ${{ secrets.AZURE_CONTAINER_NAME }} \
              --account-name ${{ secrets.AZURE_ACCOUNT_NAME }} --overwrite -n nginx-agent/${GITHUB_REF##*/}/${i##*/}
            done

      - name: Upload Release Assets
        if: ${{ needs.vars.outputs.github_release == 'true' }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        # clobber overwrites existing assets of the same name
        run: |
          gh release upload --clobber v${{ inputs.packageVersion }} \
            $(find ${{inputs.pkgRepo}}/nginx-agent | grep -e "nginx-agent[_-]${{version}}")
