#!/usr/bin/make -f

# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #
# Variable Definitions                                                                                            #
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #
PACKAGES_DIR        := ./build/packages
GITHUB_PACKAGES_DIR := ./build/github/packages
AZURE_PACKAGES_DIR  := ./build/azure/packages
BINARY_PATH         := $(BUILD_DIR)/$(BINARY_NAME)
GPG_PUBLIC_KEY      := .key
PACKAGE_BUILD       ?= 1
PACKAGE_VERSION     ?= $(shell echo ${VERSION} | tr -d 'v')
TARBALL_NAME        := $(PACKAGE_PREFIX).tar.gz

DEB_DISTROS         ?= ubuntu-plucky-25.04 ubuntu-noble-24.04 ubuntu-jammy-22.04 ubuntu-focal-20.04 debian-bookworm-12 debian-bullseye-11
DEB_ARCHS           ?= arm64 amd64
RPM_DISTROS         ?= suse-15-x86_64
RPM_ARCH            := x86_64
REDHAT_VERSIONS     ?= redhatenterprise-8 redhatenterprise-9 redhatenterprise-10
REDHAT_ARCHS        ?= aarch64 x86_64
APK_VERSIONS        ?= 3.18 3.19 3.20 3.21 3.22
APK_ARCHS           ?= aarch64 x86_64
APK_REVISION 		?= 1
AMAZON_VERSIONS     ?= amazon-2 amazon-2023
AMAZON_ARCHS        ?= aarch64 x86_64

# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #
# Release Packaging                                                                                               #
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #
.PHONY: clean-packages
clean-packages: 
	rm -rf $(PACKAGES_DIR)

$(PACKAGES_DIR):
	@mkdir -p $(PACKAGES_DIR)/deb && mkdir -p $(PACKAGES_DIR)/rpm && mkdir -p $(PACKAGES_DIR)/apk

.PHONY: package
package: gpg-key $(PACKAGES_DIR) #### Create final packages for all supported distros
	# Create deb packages
	@for arch in $(DEB_ARCHS); do \
		GOWORK=off CGO_ENABLED=0 GOARCH=$${arch} GOOS=linux go build -pgo=auto -ldflags=${LDFLAGS} -o $(BINARY_PATH) $(PROJECT_DIR)/$(PROJECT_FILE); \
		for distro in $(DEB_DISTROS); do \
			deb_codename=`echo $$distro | cut -d- -f 2`; \
			VERSION=$(PACKAGE_VERSION)~$${deb_codename} ARCH=$${arch} nfpm pkg --config .nfpm.yaml --packager deb --target ${PACKAGES_DIR}/deb/${PACKAGE_PREFIX}_$(PACKAGE_VERSION)~$${deb_codename}_$${arch}.deb; \
		done; \
		rm -rf $(BINARY_PATH); \
	done; \
	
	# Create rpm packages
	@GOWORK=off CGO_ENABLED=0 GOARCH=amd64 GOOS=linux go build -pgo=auto -ldflags=${LDFLAGS} -o $(BINARY_PATH) $(PROJECT_DIR)/$(PROJECT_FILE)
	@for distro in $(RPM_DISTROS); do \
		rpm_distro=`echo $$distro | cut -d- -f 1`; \
		rpm_major=`echo $$distro | cut -d- -f 2`; \
		rpm_codename='na'; \
		if [ "$$rpm_distro" = "suse" ]; then rpm_codename="sles$$rpm_major"; \
		fi; \
		if [ "$$rpm_codename" != "na" ]; then \
			VERSION=$(PACKAGE_VERSION) ARCH=amd64 nfpm pkg --config .nfpm.yaml --packager rpm --target $(PACKAGES_DIR)/rpm/${PACKAGE_PREFIX}-$(PACKAGE_VERSION).$${rpm_codename}.ngx.${RPM_ARCH}.rpm; \
		fi; \
	done; \
	rm -rf $(BINARY_PATH)


	# Create redhat rpm packages
	@for arch in $(REDHAT_ARCHS); do \
		goarch=amd64; \
		if [ "$$arch" = "aarch64" ]; then goarch="arm64"; fi; \
		GOWORK=off CGO_ENABLED=0 GOARCH=$${goarch} GOOS=linux go build -pgo=auto -ldflags=${LDFLAGS} -o $(BINARY_PATH) $(PROJECT_DIR)/$(PROJECT_FILE); \
		for distro in $(REDHAT_VERSIONS); do \
			rpm_distro=`echo $$distro | cut -d- -f 1`; \
			rpm_major=`echo $$distro | cut -d- -f 2`; \
			rpm_codename="el$$rpm_major"; \
			VERSION=$(PACKAGE_VERSION) ARCH=$${arch} nfpm pkg --config .nfpm.yaml --packager rpm --target $(PACKAGES_DIR)/rpm/${PACKAGE_PREFIX}-$(PACKAGE_VERSION).$${rpm_codename}.ngx.$${arch}.rpm; \
		done; \
		rm -rf $(BINARY_PATH); \
	done; \


	# Create amazon rpm packages
	@for arch in $(AMAZON_ARCHS); do \
		goarch=amd64; \
		if [ "$$arch" = "aarch64" ]; then goarch="arm64"; fi; \
		GOWORK=off CGO_ENABLED=0 GOARCH=$${goarch} GOOS=linux go build -pgo=auto -ldflags=${LDFLAGS} -o $(BINARY_PATH) $(PROJECT_DIR)/$(PROJECT_FILE); \
		for version in $(AMAZON_VERSIONS); do \
			rpm_major=`echo $$version | cut -d- -f 2`; \
			rpm_codename="amzn$$rpm_major";\
			VERSION=$(PACKAGE_VERSION) ARCH=$${arch} nfpm pkg --config .nfpm.yaml --packager rpm --target $(PACKAGES_DIR)/rpm/${PACKAGE_PREFIX}-$(PACKAGE_VERSION).$${rpm_codename}.ngx.$${arch}.rpm; \
		done; \
		rm -rf $(BINARY_PATH); \
	done; \
	
	# Create apk packages
	@for arch in $(APK_ARCHS); do \
		goarch=amd64; \
		if [ "$$arch" = "aarch64" ]; then goarch="arm64"; fi; \
		GOWORK=off CGO_ENABLED=0 GOARCH=$${goarch} GOOS=linux go build -pgo=auto -ldflags=${LDFLAGS} -o $(BINARY_PATH) $(PROJECT_DIR)/$(PROJECT_FILE); \
    	for version in $(APK_VERSIONS); do \
			if [ ! -d "$(PACKAGES_DIR)/apk/v$${version}/$${arch}" ]; then mkdir -p $(PACKAGES_DIR)/apk/v$${version}/$${arch}; fi; \
			VERSION=$(PACKAGE_VERSION) ARCH=$${arch} nfpm pkg --config .nfpm.yaml --packager apk --target $(PACKAGES_DIR)/apk/v$${version}/$${arch}/${PACKAGE_PREFIX}-$(PACKAGE_VERSION).apk; \
		done; \
		rm -rf $(BINARY_PATH); \
	done; \

	# Package build complete

	echo "DEB packages:"; \
	find $(PACKAGES_DIR)/deb ;\
	echo "RPM packages:"; \
	find $(PACKAGES_DIR)/rpm ;\
	echo "APK packages:"; \
	find $(PACKAGES_DIR)/apk ;\

	# Create tarball containing all packages
	cd $(PACKAGES_DIR) && tar -czvf "./$(TARBALL_NAME)" * && cd ../..; \

.PHONY: gpg-key
gpg-key: ## Generate GPG public key
	$$(gpg --import $(NFPM_SIGNING_KEY_FILE)); \
	keyid=$$(gpg --list-keys NGINX | egrep -A1 "^pub" | egrep -v "^pub" | tr -d '[:space:]'); \
	if [ -z "$$keyid" ]; then echo "Error: GPG key not found."; exit 1; fi; \
	# Check if the key is expired \
	# Look for the 'e' (expired) flag in the 'pub' or 'uid' lines \
	if gpg --list-keys --with-colons "$$keyid" | grep -E '^pub:e:|^uid:e:'; then \
		echo "Error: GPG key has expired."; \
		exit 1; \
	fi; \
	expiry=1y; \
	$$(gpg --quick-set-expire $$keyid $$expiry '*'); \
	# we need to convert the private gpg key to rsa pem format for pkg signing \
	$$(gpg --export-secret-key $$keyid | openpgp2ssh $$keyid > .key.rsa); \
	$$(gpg --output $(GPG_PUBLIC_KEY) --armor --export)

.PHONY: release
release: ## Publish tarball to the UPLOAD_URL
	echo "Publishing nginx-agent packages to ${UPLOAD_URL}"; \
	curl -XPOST --fail -F "file=@$(PACKAGES_DIR)/$(TARBALL_NAME)" -H "Token: ${TOKEN}" ${UPLOAD_URL}; \
